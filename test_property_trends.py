#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü—ã property_trends
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ –∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º
"""

import os
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv
from datetime import datetime
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    try:
        connection = psycopg2.connect(
            host=os.getenv('DB_HOST', 'localhost'),
            database=os.getenv('DB_NAME', 'postgres'),
            user=os.getenv('DB_USER', 'postgres'),
            password=os.getenv('DB_PASSWORD', ''),
            port=os.getenv('DB_PORT', '5432')
        )
        return connection
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def test_property_trends_table():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã property_trends –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    country_id = 1
    city_id = 7
    county_id = 2038
    district_id = 2339
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã property_trends")
    print(f"üìç –õ–æ–∫–∞—Ü–∏—è: country_id={country_id}, city_id={city_id}, county_id={county_id}, district_id={district_id}")
    print("=" * 80)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection = get_db_connection()
    if not connection:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        with connection.cursor(cursor_factory=RealDictCursor) as cursor:
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
            print("üìä 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã property_trends:")
            cursor.execute("SELECT COUNT(*) as total_count FROM property_trends")
            total_count = cursor.fetchone()['total_count']
            print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {total_count}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
            print(f"\nüìä 2. –ó–∞–ø–∏—Å–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏:")
            cursor.execute("""
                SELECT COUNT(*) as location_count 
                FROM property_trends 
                WHERE country_id = %s AND city_id = %s AND county_id = %s AND district_id = %s
            """, (country_id, city_id, county_id, district_id))
            location_count = cursor.fetchone()['location_count']
            print(f"   –ó–∞–ø–∏—Å–µ–π –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {location_count}")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            print(f"\nüìä 3. –ó–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            cursor.execute("""
                SELECT COUNT(*) as confirmed_count 
                FROM property_trends pt
                INNER JOIN users u ON pt.user_id = u.id
                WHERE pt.country_id = %s 
                    AND pt.city_id = %s 
                    AND pt.county_id = %s 
                    AND pt.district_id = %s
                    AND u.is_confirmed = true
            """, (country_id, city_id, county_id, district_id))
            confirmed_count = cursor.fetchone()['confirmed_count']
            print(f"   –ó–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {confirmed_count}")
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å—è—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            print(f"\nüìä 4. –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å—è—Ö:")
            cursor.execute("""
                SELECT 
                    pt.id,
                    pt.date,
                    pt.unit_price_for_sale,
                    pt.price_change_sale,
                    pt.unit_price_for_rent,
                    pt.price_change_rent,
                    pt.yield,
                    pt.property_year,
                    pt.property_month,
                    u.is_confirmed,
                    u.username
                FROM property_trends pt
                INNER JOIN users u ON pt.user_id = u.id
                WHERE pt.country_id = %s 
                    AND pt.city_id = %s 
                    AND pt.county_id = %s 
                    AND pt.district_id = %s
                    AND u.is_confirmed = true
                ORDER BY pt.property_year DESC, pt.property_month DESC
            """, (country_id, city_id, county_id, district_id))
            
            trends = cursor.fetchall()
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(trends)}")
            
            if trends:
                print(f"\nüìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–µ–π:")
                for i, trend in enumerate(trends):
                    print(f"   {i+1:2d}. ID: {trend['id']:4d} | "
                          f"–î–∞—Ç–∞: {trend['date']} | "
                          f"–ì–æ–¥-–º–µ—Å—è—Ü: {trend['property_year']}-{trend['property_month']:02d} | "
                          f"–ü—Ä–æ–¥–∞–∂–∞: {trend['unit_price_for_sale']:8.2f} | "
                          f"–ê—Ä–µ–Ω–¥–∞: {trend['unit_price_for_rent']:6.2f} | "
                          f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {trend['yield']:5.2f}% | "
                          f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {trend['username']}")
            
            # 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º
            print(f"\nüìä 5. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º:")
            month_distribution = {}
            for trend in trends:
                key = f"{trend['property_year']}-{trend['property_month']:02d}"
                if key not in month_distribution:
                    month_distribution[key] = 0
                month_distribution[key] += 1
            
            for month in sorted(month_distribution.keys(), reverse=True):
                print(f"   {month}: {month_distribution[month]} –∑–∞–ø–∏—Å–µ–π")
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            current_date = datetime.now()
            current_year = current_date.year
            current_month = current_date.month
            
            print(f"\nüìä 6. –ê–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
            print(f"   –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date.strftime('%Y-%m-%d')}")
            print(f"   –¢–µ–∫—É—â–∏–π –≥–æ–¥-–º–µ—Å—è—Ü: {current_year}-{current_month:02d}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è (–¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
            visible_count = 0
            future_count = 0
            
            for trend in trends:
                if trend['property_year'] < current_year:
                    visible_count += 1  # –ü—Ä–æ—à–ª—ã–µ –≥–æ–¥—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                elif trend['property_year'] == current_year:
                    if trend['property_month'] <= current_month:
                        visible_count += 1  # –¢–µ–∫—É—â–∏–π –≥–æ–¥, –º–µ—Å—è—Ü <= —Ç–µ–∫—É—â–µ–≥–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                    else:
                        future_count += 1  # –¢–µ–∫—É—â–∏–π –≥–æ–¥, –º–µ—Å—è—Ü > —Ç–µ–∫—É—â–µ–≥–æ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                else:
                    future_count += 1  # –ë—É–¥—É—â–∏–µ –≥–æ–¥—ã - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            
            print(f"   –ó–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞): {visible_count}")
            print(f"   –ó–∞–ø–∏—Å–µ–π –±—É–¥—É—â–∏—Ö –º–µ—Å—è—Ü–µ–≤ (—Å–∫—Ä—ã—Ç–æ): {future_count}")
            
            # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            print(f"\nüìä 7. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã property_trends:")
            cursor.execute("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns
                WHERE table_name = 'property_trends'
                ORDER BY ordinal_position
            """)
            
            columns = cursor.fetchall()
            for col in columns:
                print(f"   {col['column_name']:20s} | {col['data_type']:15s} | {col['is_nullable']}")
            
            # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
            print(f"\nüìä 8. –ò–Ω–¥–µ–∫—Å—ã —Ç–∞–±–ª–∏—Ü—ã property_trends:")
            cursor.execute("""
                SELECT indexname, indexdef
                FROM pg_indexes
                WHERE tablename = 'property_trends'
            """)
            
            indexes = cursor.fetchall()
            if indexes:
                for idx in indexes:
                    print(f"   {idx['indexname']}: {idx['indexdef']}")
            else:
                print("   –ò–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
            print(f"\nüìä 9. –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã:")
            cursor.execute("""
                SELECT 
                    pg_size_pretty(pg_total_relation_size('property_trends')) as total_size,
                    pg_size_pretty(pg_relation_size('property_trends')) as table_size
            """)
            
            size_info = cursor.fetchone()
            print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {size_info['total_size']}")
            print(f"   –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {size_info['table_size']}")
            
            # 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            print(f"\nüìä 10. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
            cursor.execute("""
                SELECT 
                    MAX(created_at) as last_created,
                    MAX(updated_at) as last_updated
                FROM property_trends
            """)
            
            update_info = cursor.fetchone()
            if update_info['last_created']:
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–∏–µ: {update_info['last_created']}")
            if update_info['last_updated']:
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_info['last_updated']}")
            
            print("\n" + "=" * 80)
            print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
            print(f"\nüìã –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
            print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {total_count}")
            print(f"   –ó–∞–ø–∏—Å–µ–π –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {location_count}")
            print(f"   –ó–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {confirmed_count}")
            print(f"   –ó–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {visible_count}")
            print(f"   –ó–∞–ø–∏—Å–µ–π –±—É–¥—É—â–∏—Ö –º–µ—Å—è—Ü–µ–≤ (—Å–∫—Ä—ã—Ç–æ): {future_count}")
            
            if confirmed_count > visible_count:
                print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í —Ç–∞–±–ª–∏—Ü–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è {visible_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ {confirmed_count} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö!")
                print(f"   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ {confirmed_count - visible_count} –∑–∞–ø–∏—Å–µ–π —Å–∫—Ä—ã—Ç–æ —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–∞–º.")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        connection.close()
        print(f"\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    test_property_trends_table()

