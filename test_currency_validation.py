#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import requests
import logging
from datetime import datetime
from supabase import create_client, Client
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase_url = os.getenv("SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_ANON_KEY")
if not supabase_url or not supabase_key:
    raise RuntimeError("SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
supabase: Client = create_client(supabase_url, supabase_key)

# CurrencyLayer API –∫–ª—é—á
CURRENCYLAYER_API_KEY = "c61dddb55d93e77ce5a2c8b91fb22694"

def test_currency_data_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤–∞–ª—é—Ç
        result = supabase.table('currency').select('*').order('created_at', desc=True).limit(3).execute()
        
        if not result.data:
            print("‚ùå –ó–∞–ø–∏—Å–∏ –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result.data)} –∑–∞–ø–∏—Å–µ–π –≤–∞–ª—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
        for i, record in enumerate(result.data, 1):
            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ {i} (ID: {record.get('id')}):")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['id', 'created_at', 'euro', 'try', 'usd', 'rub', 'aed', 'thb']
            missing_fields = []
            null_fields = []
            negative_fields = []
            
            for field in required_fields:
                if field not in record:
                    missing_fields.append(field)
                elif record[field] is None:
                    null_fields.append(field)
                elif isinstance(record[field], (int, float)) and record[field] <= 0:
                    negative_fields.append(field)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
            if missing_fields:
                print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {missing_fields}")
            else:
                print(f"   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            if null_fields:
                print(f"   ‚ùå NULL –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª—è—Ö: {null_fields}")
            else:
                print(f"   ‚úÖ –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            
            if negative_fields:
                print(f"   ‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {negative_fields}")
            else:
                print(f"   ‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            print(f"   üìã –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
            for field in required_fields:
                if field in record:
                    value = record[field]
                    value_type = type(value).__name__
                    print(f"      {field}: {value_type} = {value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
            if all(field in record for field in ['euro', 'try', 'usd', 'rub', 'aed', 'thb']):
                euro = record['euro']
                if euro != 1.0:
                    print(f"   ‚ö†Ô∏è EUR –Ω–µ —Ä–∞–≤–µ–Ω 1.0: {euro}")
                else:
                    print(f"   ‚úÖ EUR = 1.0 (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫—É—Ä—Å—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EUR
                print(f"   üí± –ö—É—Ä—Å—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EUR:")
                print(f"      TRY: 1 EUR = {record['try']:.6f} TRY")
                print(f"      USD: 1 EUR = {record['usd']:.6f} USD")
                print(f"      RUB: 1 EUR = {record['rub']:.6f} RUB")
                print(f"      AED: 1 EUR = {record['aed']:.6f} AED")
                print(f"      THB: 1 EUR = {record['thb']:.6f} THB")
        
        return True
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_currency_api_response():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç API currencylayer.com"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ API currencylayer.com")
    print("=" * 50)
    
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ API
        url = "http://api.currencylayer.com/historical"
        params = {
            'access_key': CURRENCYLAYER_API_KEY,
            'date': datetime.now().strftime('%Y-%m-%d'),
            'base': 'USD',
            'currencies': 'EUR,RUB,TRY,AED,THB'
        }
        
        print(f"üì° –ó–∞–ø—Ä–æ—Å –∫ API: {url}")
        print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        
        response = requests.get(url, params=params)
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            print(f"üìã –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return False
        
        data = response.json()
        
        if not data.get('success'):
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('error', {})}")
            return False
        
        quotes = data.get('quotes', {})
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫—É—Ä—Å—ã
        required_quotes = ['USDEUR', 'USDRUB', 'USDTRY', 'USDAED', 'USDTHB']
        missing_quotes = [quote for quote in required_quotes if quote not in quotes]
        
        if missing_quotes:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫—É—Ä—Å—ã: {missing_quotes}")
            return False
        
        print(f"‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫—É—Ä—Å—ã –ø–æ–ª—É—á–µ–Ω—ã:")
        for quote in required_quotes:
            rate = quotes[quote]
            print(f"   {quote}: {rate}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—Å—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
        negative_quotes = [quote for quote in required_quotes if quotes[quote] <= 0]
        if negative_quotes:
            print(f"‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –Ω—É–ª–µ–≤—ã–µ –∫—É—Ä—Å—ã: {negative_quotes}")
            return False
        
        print(f"‚úÖ –í—Å–µ –∫—É—Ä—Å—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ EUR
        usd_eur_rate = quotes.get('USDEUR', 1.0)
        if usd_eur_rate == 0:
            print(f"‚ùå –ö—É—Ä—Å USD/EUR —Ä–∞–≤–µ–Ω 0")
            return False
        
        print(f"üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ EUR (–∫—É—Ä—Å USD/EUR: {usd_eur_rate}):")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å—ã
        converted_rates = {
            'rub': quotes.get('USDRUB', 1.0) / usd_eur_rate,
            'usd': 1.0 / usd_eur_rate,
            'euro': 1.0,
            'try': quotes.get('USDTRY', 1.0) / usd_eur_rate,
            'aed': quotes.get('USDAED', 1.0) / usd_eur_rate,
            'thb': quotes.get('USDTHB', 1.0) / usd_eur_rate
        }
        
        for currency, rate in converted_rates.items():
            print(f"   EUR/{currency.upper()}: {rate:.6f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
        negative_converted = [curr for curr, rate in converted_rates.items() if rate <= 0]
        if negative_converted:
            print(f"‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã: {negative_converted}")
            return False
        
        print(f"‚úÖ –í—Å–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ")
        
        return True
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return False

def test_currency_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        from currency_functions import get_currency_rate_for_date, fetch_and_save_currency_rates
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
        print("üìä –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç")
        currency_rate = get_currency_rate_for_date()
        
        if currency_rate:
            print(f"‚úÖ –ö—É—Ä—Å –≤–∞–ª—é—Ç –ø–æ–ª—É—á–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            required_fields = ['euro', 'try', 'usd', 'rub', 'aed', 'thb']
            missing_fields = [field for field in required_fields if field not in currency_rate]
            
            if missing_fields:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                return False
            
            print(f"‚úÖ –í—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            null_fields = [field for field in required_fields if currency_rate[field] is None]
            if null_fields:
                print(f"‚ùå NULL –∑–Ω–∞—á–µ–Ω–∏—è: {null_fields}")
                return False
            
            print(f"‚úÖ –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            negative_fields = [field for field in required_fields if currency_rate[field] <= 0]
            if negative_fields:
                print(f"‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {negative_fields}")
                return False
            
            print(f"‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ")
            
            # –í—ã–≤–æ–¥–∏–º –∫—É—Ä—Å—ã
            print(f"üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:")
            for field in required_fields:
                print(f"   {field.upper()}: {currency_rate[field]}")
        
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç")
            return False
        
        return True
    
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª—é—Ç")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False

def test_currency_insertion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å—Ç–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É currency"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É currency")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            'created_at': datetime.now().isoformat(),
            'euro': 1.0,
            'try': 47.0,
            'usd': 1.16,
            'rub': 92.0,
            'aed': 4.27,
            'thb': 37.6
        }
        
        print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for field, value in test_data.items():
            print(f"   {field}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        required_fields = ['euro', 'try', 'usd', 'rub', 'aed', 'thb']
        missing_fields = [field for field in required_fields if field not in test_data]
        
        if missing_fields:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
            return False
        
        print(f"‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
        negative_fields = [field for field in required_fields if test_data[field] <= 0]
        if negative_fields:
            print(f"‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {negative_fields}")
            return False
        
        print(f"‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –±–∞–∑—É)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
        
        return True
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Å—Ç–∞–≤–∫–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    structure_ok = test_currency_data_structure()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    api_ok = test_currency_api_response()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    functions_ok = test_currency_functions()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É
    insertion_ok = test_currency_insertion()
    
    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ OK' if structure_ok else '‚ùå FAIL'}")
    print(f"   API currencylayer.com: {'‚úÖ OK' if api_ok else '‚ùå FAIL'}")
    print(f"   –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª—é—Ç: {'‚úÖ OK' if functions_ok else '‚ùå FAIL'}")
    print(f"   –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ OK' if insertion_ok else '‚ùå FAIL'}")
    
    if all([structure_ok, api_ok, functions_ok, insertion_ok]):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
