#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–∞–ª—é—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import requests
import logging
from datetime import datetime
from supabase import create_client, Client
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase_url = os.getenv("SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_ANON_KEY")
if not supabase_url or not supabase_key:
    raise RuntimeError("SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
supabase: Client = create_client(supabase_url, supabase_key)

# CurrencyLayer API –∫–ª—é—á
CURRENCYLAYER_API_KEY = "c61dddb55d93e77ce5a2c8b91fb22694"

def test_currency_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API currencylayer.com"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API currencylayer.com")
    print("=" * 50)
    
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ API
        url = "http://api.currencylayer.com/historical"
        params = {
            'access_key': CURRENCYLAYER_API_KEY,
            'date': datetime.now().strftime('%Y-%m-%d'),
            'base': 'USD',
            'currencies': 'EUR,RUB,TRY,AED,THB'
        }
        
        print(f"üì° –ó–∞–ø—Ä–æ—Å –∫ API: {url}")
        print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        
        response = requests.get(url, params=params)
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            
            if data.get('success'):
                quotes = data.get('quotes', {})
                print(f"\nüí± –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ USD):")
                for quote, rate in quotes.items():
                    print(f"   {quote}: {rate}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ EUR
                usd_eur_rate = quotes.get('USDEUR', 1.0)
                print(f"\nüí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ EUR (–∫—É—Ä—Å USD/EUR: {usd_eur_rate}):")
                print(f"   EUR/RUB: {quotes.get('USDRUB', 1.0) / usd_eur_rate:.6f}")
                print(f"   EUR/TRY: {quotes.get('USDTRY', 1.0) / usd_eur_rate:.6f}")
                print(f"   EUR/USD: {1.0 / usd_eur_rate:.6f}")
                print(f"   EUR/AED: {quotes.get('USDAED', 1.0) / usd_eur_rate:.6f}")
                print(f"   EUR/THB: {quotes.get('USDTHB', 1.0) / usd_eur_rate:.6f}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('error', {})}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            print(f"üìã –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return False
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return False

def test_currency_table():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É currency –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã currency")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤–∞–ª—é—Ç
        result = supabase.table('currency').select('*').order('created_at', desc=True).limit(5).execute()
        
        if result.data:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result.data)} –∑–∞–ø–∏—Å–µ–π –≤–∞–ª—é—Ç:")
            for i, record in enumerate(result.data, 1):
                print(f"\nüìä –ó–∞–ø–∏—Å—å {i}:")
                print(f"   ID: {record.get('id')}")
                print(f"   –î–∞—Ç–∞: {record.get('created_at')}")
                print(f"   EUR (–±–∞–∑–æ–≤–∞—è): {record.get('euro')}")
                print(f"   TRY: {record.get('try')} (1 EUR = {record.get('try')} TRY)")
                print(f"   USD: {record.get('usd')} (1 EUR = {record.get('usd')} USD)")
                print(f"   RUB: {record.get('rub')} (1 EUR = {record.get('rub')} RUB)")
                print(f"   AED: {record.get('aed')} (1 EUR = {record.get('aed')} AED)")
                print(f"   THB: {record.get('thb')} (1 EUR = {record.get('thb')} THB)")
            return True
        else:
            print("‚ùå –ó–∞–ø–∏—Å–∏ –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_turkish_location_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—É—Ä–µ—Ü–∫–∏—Ö –ª–æ–∫–∞—Ü–∏–π"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—É—Ä–µ—Ü–∫–∏—Ö –ª–æ–∫–∞—Ü–∏–π")
    print("=" * 50)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    try:
        from currency_functions import is_turkish_location
    except ImportError:
        try:
            from currency_functions_v2 import is_turkish_location
        except ImportError:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é is_turkish_location")
            return False
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_locations = [
        {'country': 'Turkey', 'country_code': 'TR'},
        {'country': 'T√ºrkiye', 'country_code': 'TR'},
        {'country': 'Germany', 'country_code': 'DE'},
        {'country': 'United States', 'country_code': 'US'},
        {'country': 'turkey', 'country_code': 'tr'},
        {'country': 't√ºrkiye', 'country_code': 'tr'},
    ]
    
    for location in test_locations:
        is_turkish = is_turkish_location(location)
        print(f"üìç {location['country']} ({location['country_code']}): {'üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è' if is_turkish else 'üåç –ù–µ —Ç—É—Ä–µ—Ü–∫–∞—è'}")
    
    return True

def test_currency_conversion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∞–ª—é—Ç"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç")
    print("=" * 50)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    try:
        from currency_functions import convert_turkish_data_to_eur
    except ImportError:
        try:
            from currency_functions_v2 import convert_turkish_data_to_eur
        except ImportError:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é convert_turkish_data_to_eur")
            return False
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'unit_price_for_sale': 1000.0,
        'min_unit_price_for_sale': 800.0,
        'max_unit_price_for_sale': 1200.0,
        'unit_price_for_rent': 50.0,
        'min_unit_price_for_rent': 40.0,
        'max_unit_price_for_rent': 60.0,
        'price_for_sale': 50000.0,
        'price_for_rent': 2500.0,
        'other_field': '–Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è'
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã (1 EUR = 30 TRY)
    currency_rate = {'try': 30.0}
    
    print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (TRY):")
    for key, value in test_data.items():
        if isinstance(value, (int, float)):
            print(f"   {key}: {value} TRY")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    converted_data = convert_turkish_data_to_eur(test_data, currency_rate)
    
    print(f"\nüí± –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (EUR):")
    for key, value in converted_data.items():
        if isinstance(value, (int, float)) and key in ['unit_price_for_sale', 'min_unit_price_for_sale', 
                                                      'max_unit_price_for_sale', 'unit_price_for_rent', 
                                                      'min_unit_price_for_rent', 'max_unit_price_for_rent',
                                                      'price_for_sale', 'price_for_rent']:
            print(f"   {key}: {value:.2f} EUR")
        else:
            print(f"   {key}: {value}")
    
    return True

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–∞–ª—é—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    api_ok = test_currency_api()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    table_ok = test_currency_table()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—É—Ä–µ—Ü–∫–∏—Ö –ª–æ–∫–∞—Ü–∏–π
    location_ok = test_turkish_location_detection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∞–ª—é—Ç
    conversion_ok = test_currency_conversion()
    
    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   API currencylayer.com: {'‚úÖ OK' if api_ok else '‚ùå FAIL'}")
    print(f"   –¢–∞–±–ª–∏—Ü–∞ currency: {'‚úÖ OK' if table_ok else '‚ùå FAIL'}")
    print(f"   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—É—Ä–µ—Ü–∫–∏—Ö –ª–æ–∫–∞—Ü–∏–π: {'‚úÖ OK' if location_ok else '‚ùå FAIL'}")
    print(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç: {'‚úÖ OK' if conversion_ok else '‚ùå FAIL'}")
    
    if all([api_ok, table_ok, location_ok, conversion_ok]):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
