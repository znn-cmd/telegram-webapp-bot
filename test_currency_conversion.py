#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç —Å –µ–≤—Ä–æ –∫–∞–∫ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–æ–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from currency_functions import get_currency_rate_for_date, convert_turkish_data_to_eur, is_turkish_location
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def test_currency_conversion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∞–ª—é—Ç —Å –µ–≤—Ä–æ –∫–∞–∫ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–æ–π"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç —Å –µ–≤—Ä–æ –∫–∞–∫ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–æ–π")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
    print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç:")
    currency_rate = get_currency_rate_for_date()
    if currency_rate:
        print(f"‚úÖ –ö—É—Ä—Å –≤–∞–ª—é—Ç –ø–æ–ª—É—á–µ–Ω:")
        print(f"   EUR (–±–∞–∑–æ–≤–∞—è): {currency_rate.get('euro', '–Ω/–¥')}")
        print(f"   TRY: {currency_rate.get('try', '–Ω/–¥')} (1 EUR = {currency_rate.get('try', '–Ω/–¥')} TRY)")
        print(f"   USD: {currency_rate.get('usd', '–Ω/–¥')} (1 EUR = {currency_rate.get('usd', '–Ω/d')} USD)")
        print(f"   RUB: {currency_rate.get('rub', '–Ω/d')} (1 EUR = {currency_rate.get('rub', '–Ω/d')} RUB)")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç")
        return
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—É–ª—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—É–ª—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    if currency_rate and 'try' in currency_rate:
        try_rate = currency_rate['try']
        test_price_try = 100000  # 100,000 TRY
        expected_price_eur = test_price_try / try_rate
        
        print(f"üìä –¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {test_price_try:,} TRY")
        print(f"üí± –ö—É—Ä—Å TRY/EUR: {try_rate}")
        print(f"üßÆ –§–æ—Ä–º—É–ª–∞: {test_price_try:,} TRY / {try_rate} = {expected_price_eur:.2f} EUR")
        print(f"‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected_price_eur:.2f} EUR")
    
    # –¢–µ—Å—Ç 3: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç—É—Ä–µ—Ü–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n3Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç—É—Ä–µ—Ü–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç—É—Ä–µ—Ü–∫–∏–µ —Ü–µ–Ω—ã –≤ TRY)
    test_market_data = {
        'general_data': {
            'unit_price_for_sale': 15000,  # 15,000 TRY/–º¬≤
            'min_unit_price_for_sale': 12000,  # 12,000 TRY/–º¬≤
            'max_unit_price_for_sale': 20000,  # 20,000 TRY/–º¬≤
            'unit_price_for_rent': 800,  # 800 TRY/–º¬≤
            'price_for_sale': 1500000,  # 1,500,000 TRY
            'price_for_rent': 8000,  # 8,000 TRY
        },
        'house_type_data': [
            {
                'listing_type': '3+1',
                'unit_price_for_sale': 16000,  # 16,000 TRY/–º¬≤
                'price_for_sale': 1600000,  # 1,600,000 TRY
                'unit_price_for_rent': 900,  # 900 TRY/–º¬≤
                'price_for_rent': 9000,  # 9,000 TRY
            }
        ]
    }
    
    print("üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ TRY):")
    print(f"   –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º¬≤: {test_market_data['general_data']['unit_price_for_sale']:,} TRY")
    print(f"   –¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã –∑–∞ –º¬≤: {test_market_data['general_data']['unit_price_for_rent']:,} TRY")
    print(f"   –û–±—â–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {test_market_data['general_data']['price_for_sale']:,} TRY")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    converted_data = convert_turkish_data_to_eur(test_market_data, currency_rate)
    
    if converted_data and currency_rate and 'try' in currency_rate:
        try_rate = currency_rate['try']
        print(f"\nüí± –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ EUR):")
        print(f"   –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º¬≤: ‚Ç¨{converted_data['general_data']['unit_price_for_sale']:.2f}")
        print(f"   –¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã –∑–∞ –º¬≤: ‚Ç¨{converted_data['general_data']['unit_price_for_rent']:.2f}")
        print(f"   –û–±—â–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{converted_data['general_data']['price_for_sale']:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        expected_sale_price = test_market_data['general_data']['unit_price_for_sale'] / try_rate
        expected_rent_price = test_market_data['general_data']['unit_price_for_rent'] / try_rate
        expected_total_sale = test_market_data['general_data']['price_for_sale'] / try_rate
        
        print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        print(f"   –û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{expected_sale_price:.2f}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{converted_data['general_data']['unit_price_for_sale']:.2f}")
        print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {'‚úÖ' if abs(expected_sale_price - converted_data['general_data']['unit_price_for_sale']) < 0.01 else '‚ùå'}")
        
        print(f"   –û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: ‚Ç¨{expected_rent_price:.2f}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: ‚Ç¨{converted_data['general_data']['unit_price_for_rent']:.2f}")
        print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {'‚úÖ' if abs(expected_rent_price - converted_data['general_data']['unit_price_for_rent']) < 0.01 else '‚ùå'}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—É—Ä–µ—Ü–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—É—Ä–µ—Ü–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏:")
    
    test_locations = [
        {'country': 'Turkey', 'country_code': 'TR'},
        {'country': 'T√ºrkiye', 'country_code': 'TR'},
        {'country': 'Germany', 'country_code': 'DE'},
        {'country': 'Russia', 'country_code': 'RU'},
        None
    ]
    
    for i, location in enumerate(test_locations, 1):
        is_turkish = is_turkish_location(location)
        location_str = str(location) if location else "None"
        print(f"   {i}. {location_str} -> {'üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è' if is_turkish else '‚ùå –ù–µ —Ç—É—Ä–µ—Ü–∫–∞—è'}")
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_currency_conversion()

