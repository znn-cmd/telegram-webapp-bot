#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –¢—É—Ä—Ü–∏–∏
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from currency_functions import is_turkish_location, get_current_currency_rate, convert_turkish_data_to_eur

def test_turkish_location_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—É—Ä–µ—Ü–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—É—Ä–µ—Ü–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        {'country': 'Turkey', 'country_code': 'TR'},
        {'country': 'T√ºrkiye', 'country_code': 'TR'},
        {'country': 'Germany', 'country_code': 'DE'},
        {'country': 'France', 'country_code': 'FR'},
        {'country': '', 'country_code': ''},
        None
    ]
    
    for i, test_case in enumerate(test_cases):
        result = is_turkish_location(test_case)
        print(f"  –¢–µ—Å—Ç {i+1}: {test_case} -> {'üáπüá∑ –¢—É—Ä—Ü–∏—è' if result else 'üåç –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞'}")
    
    print()

def test_currency_rate_retrieval():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç"""
    print("üí± –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç")
    
    try:
        currency_rate = get_current_currency_rate()
        if currency_rate:
            print(f"  ‚úÖ –ö—É—Ä—Å –≤–∞–ª—é—Ç –ø–æ–ª—É—á–µ–Ω:")
            print(f"    - –î–∞—Ç–∞: {currency_rate.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            print(f"    - TRY/EUR: {currency_rate.get('try', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"    - USD/EUR: {currency_rate.get('usd', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"    - RUB/EUR: {currency_rate.get('rub', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        else:
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: {e}")
    
    print()

def test_currency_conversion():
    """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ TRY –≤ EUR"""
    print("üîÑ –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ TRY –≤ EUR")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ü–µ–Ω—ã –≤ —Ç—É—Ä–µ—Ü–∫–∏—Ö –ª–∏—Ä–∞—Ö)
    test_data = {
        'unit_price_for_sale': 50000,  # 50,000 TRY –∑–∞ –º¬≤
        'min_unit_price_for_sale': 40000,  # 40,000 TRY –∑–∞ –º¬≤
        'max_unit_price_for_sale': 60000,  # 60,000 TRY –∑–∞ –º¬≤
        'unit_price_for_rent': 2000,  # 2,000 TRY –∑–∞ –º¬≤
        'nested_data': {
            'price_for_sale': 5000000,  # 5,000,000 TRY
            'price_for_rent': 200000   # 200,000 TRY
        }
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç (1 EUR = 35 TRY)
    test_currency_rate = {
        'try': 35.0,
        'usd': 1.08,
        'euro': 1.0,
        'created_at': '2024-01-01T00:00:00Z'
    }
    
    try:
        converted_data = convert_turkish_data_to_eur(test_data, test_currency_rate)
        
        print(f"  üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (TRY):")
        print(f"    - –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º¬≤: {test_data['unit_price_for_sale']:,} TRY")
        print(f"    - –ú–∏–Ω. —Ü–µ–Ω–∞ –∑–∞ –º¬≤: {test_data['min_unit_price_for_sale']:,} TRY")
        print(f"    - –ú–∞–∫—Å. —Ü–µ–Ω–∞ –∑–∞ –º¬≤: {test_data['max_unit_price_for_sale']:,} TRY")
        print(f"    - –¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã –∑–∞ –º¬≤: {test_data['unit_price_for_rent']:,} TRY")
        print(f"    - –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {test_data['nested_data']['price_for_sale']:,} TRY")
        print(f"    - –¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: {test_data['nested_data']['price_for_rent']:,} TRY")
        
        print(f"  üí± –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (EUR):")
        print(f"    - –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º¬≤: ‚Ç¨{converted_data['unit_price_for_sale']:,.2f}")
        print(f"    - –ú–∏–Ω. —Ü–µ–Ω–∞ –∑–∞ –º¬≤: ‚Ç¨{converted_data['min_unit_price_for_sale']:,.2f}")
        print(f"    - –ú–∞–∫—Å. —Ü–µ–Ω–∞ –∑–∞ –º¬≤: ‚Ç¨{converted_data['max_unit_price_for_sale']:,.2f}")
        print(f"    - –¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã –∑–∞ –º¬≤: ‚Ç¨{converted_data['unit_price_for_rent']:,.2f}")
        print(f"    - –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{converted_data['nested_data']['price_for_sale']:,.2f}")
        print(f"    - –¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: ‚Ç¨{converted_data['nested_data']['price_for_rent']:,.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        expected_price = 50000 / 35.0
        actual_price = converted_data['unit_price_for_sale']
        if abs(expected_price - actual_price) < 0.01:
            print("  ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_price:.2f}, –ø–æ–ª—É—á–µ–Ω–æ {actual_price:.2f}")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
    
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç")
    print("=" * 50)
    
    test_turkish_location_detection()
    test_currency_rate_retrieval()
    test_currency_conversion()
    
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()
