"""
–ú–æ–¥—É–ª—å —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import logging
import time
from typing import Any, Dict, List, Optional, Callable
from supabase_client import get_supabase_client

logger = logging.getLogger(__name__)

class DatabaseOperationError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    pass

def safe_db_operation(operation: Callable, max_retries: int = 3, delay: int = 2) -> Any:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    Args:
        operation: –§—É–Ω–∫—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    
    Raises:
        DatabaseOperationError: –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
    """
    last_error = None
    
    for attempt in range(max_retries):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
            supabase = get_supabase_client()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            result = operation(supabase)
            
            if attempt > 0:
                logger.info(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ {attempt + 1} –ø–æ–ø—ã—Ç–æ–∫")
            
            return result
            
        except Exception as e:
            last_error = e
            error_msg = str(e).lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            if "ssl" in error_msg or "handshake" in error_msg or "timeout" in error_msg:
                logger.warning(f"‚ö†Ô∏è SSL/–¢–∞–π–º–∞—É—Ç –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            
            if attempt < max_retries - 1:
                # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                wait_time = delay * (attempt + 1)
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(wait_time)
                
                # –ï—Å–ª–∏ —ç—Ç–æ SSL –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                if "ssl" in error_msg or "handshake" in error_msg:
                    try:
                        from supabase_client import supabase_connection
                        supabase_connection.reconnect()
                        logger.info("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase")
                    except:
                        pass
            else:
                logger.error(f"‚ùå –í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã")
    
    raise DatabaseOperationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {last_error}")

def safe_select(table: str, columns: str = "*", filters: Optional[Dict[str, Any]] = None, 
                limit: Optional[int] = None, order: Optional[str] = None) -> List[Dict]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        table: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        columns: –°—Ç–æ–ª–±—Ü—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
        filters: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–∫–ª—é—á - —Å—Ç–æ–ª–±–µ—Ü, –∑–Ω–∞—á–µ–Ω–∏–µ - –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
        limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
        order: –°—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    
    Returns:
        –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    """
    def operation(supabase):
        query = supabase.table(table).select(columns)
        
        if filters:
            for column, value in filters.items():
                if value is None:
                    query = query.is_(column, 'null')
                else:
                    query = query.eq(column, value)
        
        if order:
            query = query.order(order)
        
        if limit:
            query = query.limit(limit)
        
        response = query.execute()
        return response.data if response.data else []
    
    return safe_db_operation(operation)

def safe_insert(table: str, data: Dict[str, Any]) -> Dict:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ INSERT –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        table: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    
    Returns:
        –í—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
    """
    def operation(supabase):
        response = supabase.table(table).insert(data).execute()
        return response.data[0] if response.data else None
    
    return safe_db_operation(operation)

def safe_update(table: str, data: Dict[str, Any], filters: Dict[str, Any]) -> List[Dict]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ UPDATE –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        table: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    """
    def operation(supabase):
        query = supabase.table(table).update(data)
        
        for column, value in filters.items():
            query = query.eq(column, value)
        
        response = query.execute()
        return response.data if response.data else []
    
    return safe_db_operation(operation)

def safe_upsert(table: str, data: Dict[str, Any]) -> Dict:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ UPSERT –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        table: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    Returns:
        –í—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
    """
    def operation(supabase):
        response = supabase.table(table).upsert(data).execute()
        return response.data[0] if response.data else None
    
    return safe_db_operation(operation)

def safe_delete(table: str, filters: Dict[str, Any]) -> List[Dict]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ DELETE –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        table: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    
    Returns:
        –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    """
    def operation(supabase):
        query = supabase.table(table).delete()
        
        for column, value in filters.items():
            query = query.eq(column, value)
        
        response = query.execute()
        return response.data if response.data else []
    
    return safe_db_operation(operation)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# from safe_db_operations import safe_select, safe_insert
# 
# # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞
# users = safe_select('users', filters={'telegram_id': 123456})
# 
# # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞
# new_user = safe_insert('users', {'telegram_id': 123456, 'username': 'test'})