import os
import logging
import requests
from datetime import datetime
from supabase import create_client, Client
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase_url = os.getenv("SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_ANON_KEY")
if not supabase_url or not supabase_key:
    raise RuntimeError("SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
supabase: Client = create_client(supabase_url, supabase_key)

# CurrencyLayer API –∫–ª—é—á
CURRENCYLAYER_API_KEY = "c61dddb55d93e77ce5a2c8b91fb22694"

def get_currency_rates():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É.
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –ø–æ–ª—É—á–∞–µ—Ç —Å API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
    """
    today = datetime.now().date()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        result = supabase.table('currency').select('*').eq('created_at', today.isoformat()).execute()
        
        if result.data and len(result.data) > 0:
            logger.info(f"‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ {today} –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return result.data[0]
        else:
            logger.info(f"üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ {today} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–∞–µ–º —Å API")
            return fetch_and_save_currency_rates()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        return None

def fetch_and_save_currency_rates():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å currencylayer.com API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
        url = "http://api.currencylayer.com/live"
        params = {
            'access_key': CURRENCYLAYER_API_KEY,
            'source': 'EUR',  # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ - –µ–≤—Ä–æ
            'currencies': 'RUB,USD,TRY,AED,THB'  # –ù—É–∂–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        }
        
        logger.info(f"üåê –ó–∞–ø—Ä–æ—Å –∫ currencylayer.com API: {url}")
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        
        if data.get('success'):
            quotes = data.get('quotes', {})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            currency_data = {
                'created_at': datetime.now().isoformat(),
                'euro': 1.0,  # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –≤—Å–µ–≥–¥–∞ 1.0
                'rub': quotes.get('EURRUB', 0),
                'usd': quotes.get('EURUSD', 0),
                'try': quotes.get('EURTRY', 0),
                'aed': quotes.get('EURAED', 0),
                'thb': quotes.get('EURTHB', 0)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            result = supabase.table('currency').insert(currency_data).execute()
            
            if result.data:
                logger.info(f"‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {currency_data}")
                return currency_data
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                return None
                
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API currencylayer.com: {data.get('error', {}).get('info', 'Unknown error')}")
            return None
            
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ currencylayer.com: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        return None

def format_currency_rates_for_report(currency_data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç–µ
    """
    if not currency_data:
        return "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    try:
        rates = []
        if currency_data.get('rub'):
            rates.append(f"RUB: {currency_data['rub']:.4f}")
        if currency_data.get('usd'):
            rates.append(f"USD: {currency_data['usd']:.4f}")
        if currency_data.get('try'):
            rates.append(f"TRY: {currency_data['try']:.4f}")
        if currency_data.get('aed'):
            rates.append(f"AED: {currency_data['aed']:.4f}")
        if currency_data.get('thb'):
            rates.append(f"THB: {currency_data['thb']:.4f}")
        
        return f"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (EUR): {' | '.join(rates)}"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        return "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç: –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

def convert_to_euro(value, currency_code, currency_rates):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –µ–≤—Ä–æ –ø–æ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç
    
    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        currency_code: –ö–æ–¥ –≤–∞–ª—é—Ç—ã (TRY, USD, RUB, AED, THB)
        currency_rates: –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        float: –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –µ–≤—Ä–æ
    """
    if not value or not currency_rates:
        return value
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–ª—è –Ω—É–∂–Ω–æ–π –≤–∞–ª—é—Ç—ã
        rate_key = currency_code.lower()
        rate = currency_rates.get(rate_key, 0)
        
        if rate and rate > 0:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –µ–≤—Ä–æ (–¥–µ–ª–∏–º –Ω–∞ –∫—É—Ä—Å, —Ç–∞–∫ –∫–∞–∫ –∫—É—Ä—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç EUR/–≤–∞–ª—é—Ç–∞)
            return float(value) / rate
        else:
            logger.warning(f"‚ö†Ô∏è –ö—É—Ä—Å –¥–ª—è {currency_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω 0")
            return value
            
    except (ValueError, TypeError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {value} {currency_code} –≤ –µ–≤—Ä–æ: {e}")
        return value

def convert_market_data_to_euro(market_data, currency_rates):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ü–µ–Ω—ã –≤ market_data –≤ –µ–≤—Ä–æ
    
    Args:
        market_data: –î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        currency_rates: –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
    
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    """
    if not currency_rates:
        return market_data
    
    converted_data = {}
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if market_data.get('general_data'):
        general = market_data['general_data'].copy()
        for key in ['unit_price_for_sale', 'min_unit_price_for_sale', 'max_unit_price_for_sale',
                   'unit_price_for_rent', 'min_unit_price_for_rent', 'max_unit_price_for_rent',
                   'price_for_sale', 'price_for_rent']:
            if general.get(key) and general[key] != '–Ω/–¥':
                general[key] = convert_to_euro(general[key], 'TRY', currency_rates)
        converted_data['general_data'] = general
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º –¥–æ–º–æ–≤
    if market_data.get('house_type_data'):
        if isinstance(market_data['house_type_data'], list):
            converted_data['house_type_data'] = []
            for record in market_data['house_type_data']:
                converted_record = record.copy()
                for key in ['unit_price_for_sale', 'min_unit_price_for_sale', 'max_unit_price_for_sale',
                           'unit_price_for_rent', 'min_unit_price_for_rent', 'max_unit_price_for_rent',
                           'price_for_sale', 'price_for_rent']:
                    if converted_record.get(key) and converted_record[key] != '–Ω/–¥':
                        converted_record[key] = convert_to_euro(converted_record[key], 'TRY', currency_rates)
                converted_data['house_type_data'].append(converted_record)
        else:
            converted_record = market_data['house_type_data'].copy()
            for key in ['unit_price_for_sale', 'min_unit_price_for_sale', 'max_unit_price_for_sale',
                       'unit_price_for_rent', 'min_unit_price_for_rent', 'max_unit_price_for_rent',
                       'price_for_sale', 'price_for_rent']:
                if converted_record.get(key) and converted_record[key] != '–Ω/–¥':
                    converted_record[key] = convert_to_euro(converted_record[key], 'TRY', currency_rates)
            converted_data['house_type_data'] = converted_record
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    if market_data.get('age_data'):
        if isinstance(market_data['age_data'], list):
            converted_data['age_data'] = []
            for record in market_data['age_data']:
                converted_record = record.copy()
                for key in ['unit_price_for_sale', 'min_unit_price_for_sale', 'max_unit_price_for_sale',
                           'unit_price_for_rent', 'min_unit_price_for_rent', 'max_unit_price_for_rent',
                           'price_for_sale', 'price_for_rent']:
                    if converted_record.get(key) and converted_record[key] != '–Ω/–¥':
                        converted_record[key] = convert_to_euro(converted_record[key], 'TRY', currency_rates)
                converted_data['age_data'].append(converted_record)
        else:
            converted_record = market_data['age_data'].copy()
            for key in ['unit_price_for_sale', 'min_unit_price_for_sale', 'max_unit_price_for_sale',
                       'unit_price_for_rent', 'min_unit_price_for_rent', 'max_unit_price_for_rent',
                       'price_for_sale', 'price_for_rent']:
                if converted_record.get(key) and converted_record[key] != '–Ω/–¥':
                    converted_record[key] = convert_to_euro(converted_record[key], 'TRY', currency_rates)
            converted_data['age_data'] = converted_record
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–∞–∂–∞–º
    if market_data.get('floor_segment_data'):
        if isinstance(market_data['floor_segment_data'], list):
            converted_data['floor_segment_data'] = []
            for record in market_data['floor_segment_data']:
                converted_record = record.copy()
                for key in ['unit_price_for_sale', 'min_unit_price_for_sale', 'max_unit_price_for_sale',
                           'unit_price_for_rent', 'min_unit_price_for_rent', 'max_unit_price_for_rent',
                           'price_for_sale', 'price_for_rent']:
                    if converted_record.get(key) and converted_record[key] != '–Ω/–¥':
                        converted_record[key] = convert_to_euro(converted_record[key], 'TRY', currency_rates)
                converted_data['floor_segment_data'].append(converted_record)
        else:
            converted_record = market_data['floor_segment_data'].copy()
            for key in ['unit_price_for_sale', 'min_unit_price_for_sale', 'max_unit_price_for_sale',
                       'unit_price_for_rent', 'min_unit_price_for_rent', 'max_unit_price_for_rent',
                       'price_for_sale', 'price_for_rent']:
                if converted_record.get(key) and converted_record[key] != '–Ω/–¥':
                    converted_record[key] = convert_to_euro(converted_record[key], 'TRY', currency_rates)
            converted_data['floor_segment_data'] = converted_record
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–æ–ø–ª–µ–Ω–∏—é
    if market_data.get('heating_data'):
        if isinstance(market_data['heating_data'], list):
            converted_data['heating_data'] = []
            for record in market_data['heating_data']:
                converted_record = record.copy()
                for key in ['unit_price_for_sale', 'min_unit_price_for_sale', 'max_unit_price_for_sale',
                           'unit_price_for_rent', 'min_unit_price_for_rent', 'max_unit_price_for_rent',
                           'price_for_sale', 'price_for_rent']:
                    if converted_record.get(key) and converted_record[key] != '–Ω/–¥':
                        converted_record[key] = convert_to_euro(converted_record[key], 'TRY', currency_rates)
                converted_data['heating_data'].append(converted_record)
        else:
            converted_record = market_data['heating_data'].copy()
            for key in ['unit_price_for_sale', 'min_unit_price_for_sale', 'max_unit_price_for_sale',
                       'unit_price_for_rent', 'min_unit_price_for_rent', 'max_unit_price_for_rent',
                       'price_for_sale', 'price_for_rent']:
                if converted_record.get(key) and converted_record[key] != '–Ω/–¥':
                    converted_record[key] = convert_to_euro(converted_record[key], 'TRY', currency_rates)
            converted_data['heating_data'] = converted_record
    
    return converted_data
