import os
import logging
import requests
from datetime import datetime
from supabase import create_client, Client
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase_url = os.getenv("SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_ANON_KEY")
if not supabase_url or not supabase_key:
    raise RuntimeError("SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
supabase: Client = create_client(supabase_url, supabase_key)

# CurrencyLayer API –∫–ª—é—á
CURRENCYLAYER_API_KEY = "c61dddb55d93e77ce5a2c8b91fb22694"

def get_currency_rate_for_date(target_date=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã currency.
    –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ—Ç —Å currencylayer.com –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É.
    
    Args:
        target_date (datetime): –î–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        if target_date is None:
            target_date = datetime.now()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ
        date_str = target_date.strftime('%Y-%m-%d')
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ currency –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        currency_query = supabase.table('currency').select('*').gte('created_at', f'{date_str} 00:00:00').lt('created_at', f'{date_str} 23:59:59').order('created_at', desc=True).limit(1)
        currency_result = currency_query.execute()
        
        if currency_result.data and len(currency_result.data) > 0:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –¥–ª—è {date_str}: {currency_result.data[0]}")
            return currency_result.data[0]
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º —Å currencylayer.com
        logger.info(f"‚ùå –ó–∞–ø–∏—Å—å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –¥–ª—è {date_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Å currencylayer.com")
        return fetch_and_save_currency_rates(target_date)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: {e}")
        return None

def fetch_and_save_currency_rates(target_date=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å currencylayer.com –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        target_date (datetime): –î–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        if target_date is None:
            target_date = datetime.now()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
        date_str = target_date.strftime('%Y-%m-%d')
        
        # –ó–∞–ø—Ä–æ—Å –∫ currencylayer.com API
        url = "http://api.currencylayer.com/historical"
        params = {
            'access_key': CURRENCYLAYER_API_KEY,
            'date': date_str,
            'base': 'EUR',
            'currencies': 'RUB,USD,TRY,AED,THB'
        }
        
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å currencylayer.com –¥–ª—è {date_str}")
        response = requests.get(url, params=params)
        
        if response.status_code != 200:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API currencylayer.com: {response.status_code} - {response.text}")
            return None
        
        data = response.json()
        
        if not data.get('success'):
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ currencylayer.com API: {data.get('error', {}).get('info', 'Unknown error')}")
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        quotes = data.get('quotes', {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É
        currency_data = {
            'created_at': target_date.isoformat(),
            'rub': quotes.get('EURRUB', 1.0),
            'usd': quotes.get('EURUSD', 1.0),
            'euro': 1.0,  # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
            'try': quotes.get('EURTRY', 1.0),
            'aed': quotes.get('EURAED', 1.0),
            'thb': quotes.get('EURTHB', 1.0)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –±–∞–∑—É: {currency_data}")
        supabase.table('currency').insert(currency_data).execute()
        
        logger.info(f"‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {date_str}")
        return currency_data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å currencylayer.com: {e}")
        return None

def convert_turkish_data_to_eur(data, currency_rate):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç—É—Ä–µ—Ü–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –µ–≤—Ä–æ –∏—Å–ø–æ–ª—å–∑—É—è –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã.
    
    Args:
        data (dict): –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        currency_rate (dict): –ö—É—Ä—Å –≤–∞–ª—é—Ç—ã (TRY/EUR)
    
    Returns:
        dict: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –µ–≤—Ä–æ
    """
    if not currency_rate or 'try' not in currency_rate:
        logger.warning("‚ùå –ö—É—Ä—Å –≤–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return data
    
    try_rate = currency_rate['try']
    logger.info(f"üí± –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ EUR –∏—Å–ø–æ–ª—å–∑—É—è –∫—É—Ä—Å TRY/EUR: {try_rate}")
    
    def convert_price(price):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –∏–∑ TRY –≤ EUR"""
        if price is None or price == '–Ω/–¥':
            return price
        try:
            return float(price) / try_rate
        except (ValueError, TypeError):
            return price
    
    def convert_data_recursive(obj):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç–µ"""
        if isinstance(obj, dict):
            converted = {}
            for key, value in obj.items():
                if isinstance(value, (int, float)) and key in ['unit_price_for_sale', 'min_unit_price_for_sale', 
                                                             'max_unit_price_for_sale', 'unit_price_for_rent', 
                                                             'min_unit_price_for_rent', 'max_unit_price_for_rent',
                                                             'price_for_sale', 'price_for_rent']:
                    converted[key] = convert_price(value)
                elif isinstance(value, dict):
                    converted[key] = convert_data_recursive(value)
                elif isinstance(value, list):
                    converted[key] = [convert_data_recursive(item) for item in value]
                else:
                    converted[key] = value
            return converted
        elif isinstance(obj, list):
            return [convert_data_recursive(item) for item in obj]
        else:
            return obj
    
    return convert_data_recursive(data)

def is_turkish_location(location_components):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ª–æ–∫–∞—Ü–∏—è –≤ –¢—É—Ä—Ü–∏–∏.
    
    Args:
        location_components (dict): –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–æ–∫–∞—Ü–∏–∏
    
    Returns:
        bool: True –µ—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –≤ –¢—É—Ä—Ü–∏–∏
    """
    if not location_components:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–µ
    country = location_components.get('country', '').lower()
    country_code = location_components.get('country_code', '').lower()
    
    turkish_indicators = ['turkey', 't√ºrkiye', 'tr', 'tur']
    
    return country in turkish_indicators or country_code in turkish_indicators
