#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from currency_functions import fetch_and_save_currency_rates, get_currency_rate_for_date
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def fill_currency_today():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –≤–∞–ª—é—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É"""
    
    print("üí± –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    today = datetime.now()
    date_str = today.strftime('%Y-%m-%d')
    
    print(f"üìÖ –î–∞—Ç–∞: {date_str}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏:")
    existing_rate = get_currency_rate_for_date(today)
    
    if existing_rate:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å:")
        print(f"   ID: {existing_rate.get('id', '–Ω/–¥')}")
        print(f"   EUR (–±–∞–∑–æ–≤–∞—è): {existing_rate.get('euro', '–Ω/–¥')}")
        print(f"   TRY: {existing_rate.get('try', '–Ω/–¥')} (1 EUR = {existing_rate.get('try', '–Ω/–¥')} TRY)")
        print(f"   USD: {existing_rate.get('usd', '–Ω/–¥')} (1 EUR = {existing_rate.get('usd', '–Ω/–¥')} USD)")
        print(f"   RUB: {existing_rate.get('rub', '–Ω/–¥')} (1 EUR = {existing_rate.get('rub', '–Ω/d')} RUB)")
        print(f"   AED: {existing_rate.get('aed', '–Ω/–¥')} (1 EUR = {existing_rate.get('aed', '–Ω/d')} AED)")
        print(f"   THB: {existing_rate.get('thb', '–Ω/–¥')} (1 EUR = {existing_rate.get('thb', '–Ω/d')} THB)")
    else:
        print("‚ùå –ó–∞–ø–∏—Å—å –¥–ª—è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫—É—Ä—Å—ã
    print(f"\n2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å API:")
    fresh_rate = fetch_and_save_currency_rates(today)
    
    if fresh_rate:
        print(f"‚úÖ –°–≤–µ–∂–∏–µ –∫—É—Ä—Å—ã –ø–æ–ª—É—á–µ–Ω—ã:")
        print(f"   EUR (–±–∞–∑–æ–≤–∞—è): {fresh_rate.get('euro', '–Ω/–¥')}")
        print(f"   TRY: {fresh_rate.get('try', '–Ω/–¥')} (1 EUR = {fresh_rate.get('try', '–Ω/d')} TRY)")
        print(f"   USD: {fresh_rate.get('usd', '–Ω/d')} (1 EUR = {fresh_rate.get('usd', '–Ω/d')} USD)")
        print(f"   RUB: {fresh_rate.get('rub', '–Ω/d')} (1 EUR = {fresh_rate.get('rub', '–Ω/d')} RUB)")
        print(f"   AED: {fresh_rate.get('aed', '–Ω/d')} (1 EUR = {fresh_rate.get('aed', '–Ω/d')} AED)")
        print(f"   THB: {fresh_rate.get('thb', '–Ω/d')} (1 EUR = {fresh_rate.get('thb', '–Ω/d')} THB)")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –∫—É—Ä—Å—ã")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    final_rate = get_currency_rate_for_date(today)
    
    if final_rate:
        print(f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞:")
        print(f"   ID: {final_rate.get('id', '–Ω/d')}")
        print(f"   –î–∞—Ç–∞: {final_rate.get('created_at', '–Ω/d')}")
        print(f"   TRY: {final_rate.get('try', '–Ω/d')} (1 EUR = {final_rate.get('try', '–Ω/d')} TRY)")
        return True
    else:
        print("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = fill_currency_today()
    if success:
        print("\n" + "=" * 60)
        print("‚úÖ –í–∞–ª—é—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
    else:
        print("\n" + "=" * 60)
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–∞–ª—é—Ç!")
