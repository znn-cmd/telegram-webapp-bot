#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è API –ª–æ–∫–∞—Ü–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –ø–∞–º—è—Ç–∏
"""

import json
from functools import lru_cache
from datetime import datetime, timedelta

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –ª–æ–∫–∞—Ü–∏–π
locations_cache = {
    'countries': None,
    'cities': None,
    'counties': None,
    'districts': None,
    'last_update': None,
    'cache_duration': timedelta(hours=24)  # –ö—ç—à –Ω–∞ 24 —á–∞—Å–∞
}

def load_locations_to_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ –∫—ç—à –æ–¥–∏–Ω —Ä–∞–∑"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞—Ü–∏–π –≤ –∫—ç—à...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        all_records = []
        page = 0
        page_size = 1000
        
        while True:
            result = supabase.table('locations').select('*').range(page * page_size, (page + 1) * page_size - 1).execute()
            
            if not result.data:
                break
                
            all_records.extend(result.data)
            page += 1
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if page > 10:
                break
        
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à: {len(all_records)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        countries = set()
        cities = {}  # country_id -> [(city_id, city_name), ...]
        counties = {}  # city_id -> [(county_id, county_name), ...]
        districts = {}  # county_id -> [(district_id, district_name), ...]
        
        for item in all_records:
            # –°—Ç—Ä–∞–Ω—ã
            if item.get('country_id') and item.get('country_name'):
                countries.add((item['country_id'], item['country_name']))
            
            # –ì–æ—Ä–æ–¥–∞
            if item.get('country_id') and item.get('city_id') and item.get('city_name'):
                country_id = item['country_id']
                if country_id not in cities:
                    cities[country_id] = set()
                cities[country_id].add((item['city_id'], item['city_name']))
            
            # –û–∫—Ä—É–≥–∞
            if item.get('city_id') and item.get('county_id') and item.get('county_name'):
                city_id = item['city_id']
                if city_id not in counties:
                    counties[city_id] = set()
                counties[city_id].add((item['county_id'], item['county_name']))
            
            # –†–∞–π–æ–Ω—ã
            if item.get('county_id') and item.get('district_id') and item.get('district_name'):
                county_id = item['county_id']
                if county_id not in districts:
                    districts[county_id] = set()
                districts[county_id].add((item['district_id'], item['district_name']))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        locations_cache['countries'] = sorted(list(countries), key=lambda x: x[1])
        
        for country_id in cities:
            cities[country_id] = sorted(list(cities[country_id]), key=lambda x: x[1])
        locations_cache['cities'] = cities
        
        for city_id in counties:
            counties[city_id] = sorted(list(counties[city_id]), key=lambda x: x[1])
        locations_cache['counties'] = counties
        
        for county_id in districts:
            districts[county_id] = sorted(list(districts[county_id]), key=lambda x: x[1])
        locations_cache['districts'] = districts
        
        locations_cache['last_update'] = datetime.now()
        
        logger.info(f"‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω: {len(locations_cache['countries'])} —Å—Ç—Ä–∞–Ω, {sum(len(cities) for cities in locations_cache['cities'].values())} –≥–æ—Ä–æ–¥–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—ç—à–∞: {e}")

def is_cache_valid():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –∫—ç—à"""
    if not locations_cache['last_update']:
        return False
    
    return datetime.now() - locations_cache['last_update'] < locations_cache['cache_duration']

def get_cached_locations():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à"""
    if not is_cache_valid():
        load_locations_to_cache()
    
    return locations_cache

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ API —Ñ—É–Ω–∫—Ü–∏–∏
@app.route('/api/locations/countries', methods=['GET'])
def api_locations_countries():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω –∏–∑ –∫—ç—à–∞"""
    try:
        logger.info("üîç –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω (–∏–∑ –∫—ç—à–∞)")
        
        cache = get_cached_locations()
        countries = cache['countries']
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–∞–Ω: {len(countries)}")
        return jsonify({'success': True, 'countries': countries})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/cities', methods=['POST'])
def api_locations_cities():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ country_id –∏–∑ –∫—ç—à–∞"""
    data = request.json or {}
    country_id = data.get('country_id')
    
    if not country_id:
        return jsonify({'error': 'country_id required'}), 400
    
    try:
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è country_id: {country_id} (–∏–∑ –∫—ç—à–∞)")
        
        cache = get_cached_locations()
        cities = cache['cities'].get(country_id, [])
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {len(cities)}")
        return jsonify({'success': True, 'cities': cities})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/counties', methods=['POST'])
def api_locations_counties():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∫—Ä—É–≥–æ–≤ –ø–æ city_id –∏–∑ –∫—ç—à–∞"""
    data = request.json or {}
    city_id = data.get('city_id')
    
    if not city_id:
        return jsonify({'error': 'city_id required'}), 400
    
    try:
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –æ–∫—Ä—É–≥–æ–≤ –¥–ª—è city_id: {city_id} (–∏–∑ –∫—ç—à–∞)")
        
        cache = get_cached_locations()
        counties = cache['counties'].get(city_id, [])
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ–∫—Ä—É–≥–æ–≤: {len(counties)}")
        return jsonify({'success': True, 'counties': counties})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–∫—Ä—É–≥–æ–≤: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/districts', methods=['POST'])
def api_locations_districts():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–æ–≤ –ø–æ county_id –∏–∑ –∫—ç—à–∞"""
    data = request.json or {}
    county_id = data.get('county_id')
    
    if not county_id:
        return jsonify({'error': 'county_id required'}), 400
    
    try:
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å —Ä–∞–π–æ–Ω–æ–≤ –¥–ª—è county_id: {county_id} (–∏–∑ –∫—ç—à–∞)")
        
        cache = get_cached_locations()
        districts = cache['districts'].get(county_id, [])
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ä–∞–π–æ–Ω–æ–≤: {len(districts)}")
        return jsonify({'success': True, 'districts': districts})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–æ–≤: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

# API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º
@app.route('/api/locations/refresh_cache', methods=['POST'])
def api_refresh_locations_cache():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ª–æ–∫–∞—Ü–∏–π"""
    try:
        load_locations_to_cache()
        return jsonify({'success': True, 'message': 'Cache refreshed successfully'})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/cache_status', methods=['GET'])
def api_locations_cache_status():
    """–°—Ç–∞—Ç—É—Å –∫—ç—à–∞ –ª–æ–∫–∞—Ü–∏–π"""
    cache = get_cached_locations()
    return jsonify({
        'success': True,
        'cache_status': {
            'last_update': cache['last_update'].isoformat() if cache['last_update'] else None,
            'countries_count': len(cache['countries']) if cache['countries'] else 0,
            'cities_count': sum(len(cities) for cities in cache['cities'].values()) if cache['cities'] else 0,
            'counties_count': sum(len(counties) for counties in cache['counties'].values()) if cache['counties'] else 0,
            'districts_count': sum(len(districts) for districts in cache['districts'].values()) if cache['districts'] else 0,
            'is_valid': is_cache_valid()
        }
    })
