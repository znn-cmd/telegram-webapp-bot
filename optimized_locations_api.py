#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–æ–º –ª–æ–∫–∞—Ü–∏–π
"""

import json
import os
from datetime import datetime
from flask import Flask, jsonify, request

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å –¥–∞–Ω–Ω—ã–º–∏
locations_data = None
last_load_time = None

def load_static_locations():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ JSON —Ñ–∞–π–ª–∞"""
    global locations_data, last_load_time
    
    try:
        json_file = "static_locations.json"
        
        if not os.path.exists(json_file):
            print(f"‚ùå –§–∞–π–ª {json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç export_locations.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        file_mtime = os.path.getmtime(json_file)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        if (last_load_time is None or 
            file_mtime > last_load_time or 
            locations_data is None):
            
            with open(json_file, 'r', encoding='utf-8') as f:
                locations_data = json.load(f)
            
            last_load_time = file_mtime
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {locations_data['metadata']['total_countries']} —Å—Ç—Ä–∞–Ω, {locations_data['metadata']['total_cities']} –≥–æ—Ä–æ–¥–æ–≤")
            print(f"üìÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {locations_data['metadata']['exported_at']}")
        
        return locations_data
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª static_locations.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None

def get_locations_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–π, –∑–∞–≥—Ä—É–∂–∞—è –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    if locations_data is None:
        return load_static_locations()
    return locations_data

@app.route('/api/locations/countries', methods=['GET'])
def api_locations_countries():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞"""
    data = get_locations_data()
    if not data:
        return jsonify({'success': False, 'error': 'Data not loaded'}), 500
    
    try:
        countries = data['countries']
        return jsonify({
            'success': True, 
            'countries': countries,
            'metadata': {
                'total': len(countries),
                'source': data['metadata']['source'],
                'exported_at': data['metadata']['exported_at']
            }
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/cities', methods=['POST'])
def api_locations_cities():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ country_id –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞"""
    data = get_locations_data()
    if not data:
        return jsonify({'success': False, 'error': 'Data not loaded'}), 500
    
    request_data = request.json or {}
    country_id = request_data.get('country_id')
    
    if not country_id:
        return jsonify({'error': 'country_id required'}), 400
    
    try:
        cities = data['cities'].get(str(country_id), [])
        return jsonify({
            'success': True, 
            'cities': cities,
            'metadata': {
                'total': len(cities),
                'country_id': country_id,
                'source': data['metadata']['source'],
                'exported_at': data['metadata']['exported_at']
            }
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/counties', methods=['POST'])
def api_locations_counties():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∫—Ä—É–≥–æ–≤ –ø–æ city_id –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞"""
    data = get_locations_data()
    if not data:
        return jsonify({'success': False, 'error': 'Data not loaded'}), 500
    
    request_data = request.json or {}
    city_id = request_data.get('city_id')
    
    if not city_id:
        return jsonify({'error': 'city_id required'}), 400
    
    try:
        counties = data['counties'].get(str(city_id), [])
        return jsonify({
            'success': True, 
            'counties': counties,
            'metadata': {
                'total': len(counties),
                'city_id': city_id,
                'source': data['metadata']['source'],
                'exported_at': data['metadata']['exported_at']
            }
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/districts', methods=['POST'])
def api_locations_districts():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–æ–≤ –ø–æ county_id –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞"""
    data = get_locations_data()
    if not data:
        return jsonify({'success': False, 'error': 'Data not loaded'}), 500
    
    request_data = request.json or {}
    county_id = request_data.get('county_id')
    
    if not county_id:
        return jsonify({'error': 'county_id required'}), 400
    
    try:
        districts = data['districts'].get(str(county_id), [])
        return jsonify({
            'success': True, 
            'districts': districts,
            'metadata': {
                'total': len(districts),
                'county_id': county_id,
                'source': data['metadata']['source'],
                'exported_at': data['metadata']['exported_at']
            }
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/status', methods=['GET'])
def api_locations_status():
    """–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π"""
    data = get_locations_data()
    if not data:
        return jsonify({'success': False, 'error': 'Data not loaded'}), 500
    
    json_file = "static_locations.json"
    file_size = os.path.getsize(json_file) if os.path.exists(json_file) else 0
    
    return jsonify({
        'success': True,
        'status': {
            'loaded': True,
            'file_size': file_size,
            'file_size_mb': round(file_size / (1024 * 1024), 2),
            'metadata': data['metadata'],
            'last_load_time': last_load_time.isoformat() if last_load_time else None
        }
    })

@app.route('/api/locations/reload', methods=['POST'])
def api_locations_reload():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    global locations_data, last_load_time
    
    try:
        locations_data = None
        last_load_time = None
        
        data = load_static_locations()
        if data:
            return jsonify({
                'success': True, 
                'message': 'Data reloaded successfully',
                'metadata': data['metadata']
            })
        else:
            return jsonify({'success': False, 'error': 'Failed to reload data'}), 500
            
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/search', methods=['POST'])
def api_locations_search():
    """–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    data = get_locations_data()
    if not data:
        return jsonify({'success': False, 'error': 'Data not loaded'}), 500
    
    request_data = request.json or {}
    query = request_data.get('query', '').lower()
    limit = request_data.get('limit', 10)
    
    if not query or len(query) < 2:
        return jsonify({'error': 'Query must be at least 2 characters'}), 400
    
    try:
        results = []
        
        # –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        for country_id, country_name in data['countries']:
            if query in country_name.lower():
                results.append({
                    'type': 'country',
                    'id': country_id,
                    'name': country_name,
                    'country_id': country_id
                })
        
        # –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        for country_id, cities in data['cities'].items():
            for city_id, city_name in cities:
                if query in city_name.lower():
                    results.append({
                        'type': 'city',
                        'id': city_id,
                        'name': city_name,
                        'country_id': country_id,
                        'city_id': city_id
                    })
        
        # –ü–æ–∏—Å–∫ –ø–æ –æ–∫—Ä—É–≥–∞–º
        for city_id, counties in data['counties'].items():
            for county_id, county_name in counties:
                if query in county_name.lower():
                    results.append({
                        'type': 'county',
                        'id': county_id,
                        'name': county_name,
                        'city_id': city_id,
                        'county_id': county_id
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        results = sorted(results, key=lambda x: x['name'])[:limit]
        
        return jsonify({
            'success': True,
            'results': results,
            'total': len(results),
            'query': query
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API –ª–æ–∫–∞—Ü–∏–π...")
    print("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª static_locations.json")
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if load_static_locations():
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. API –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    app.run(host='0.0.0.0', port=8080, debug=True)
