#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Supabase
"""

import os
import sys
import logging
import httpx
from dotenv import load_dotenv
from supabase import create_client, Client
from supabase.client import ClientOptions
import ssl
import socket

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_basic_connection():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
    logger.info("=" * 50)
    logger.info("–¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    logger.info("=" * 50)
    
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_key = os.getenv("SUPABASE_ANON_KEY")
    
    if not supabase_url or not supabase_key:
        logger.error("‚ùå SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã!")
        return False
    
    logger.info(f"URL: {supabase_url}")
    logger.info(f"Key: {supabase_key[:10]}...")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–æ—Å—Ç –∏–∑ URL
        from urllib.parse import urlparse
        parsed = urlparse(supabase_url)
        host = parsed.hostname
        port = parsed.port or 443
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port}")
        
        # –¢–µ—Å—Ç TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        result = sock.connect_ex((host, port))
        sock.close()
        
        if result == 0:
            logger.info("‚úÖ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error(f"‚ùå TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {result}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    
    return True

def test_ssl_connection():
    """–¢–µ—Å—Ç SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    logger.info("=" * 50)
    logger.info("–¢–µ—Å—Ç 2: SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    logger.info("=" * 50)
    
    supabase_url = os.getenv("SUPABASE_URL")
    
    try:
        from urllib.parse import urlparse
        parsed = urlparse(supabase_url)
        host = parsed.hostname
        port = parsed.port or 443
        
        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = ssl.create_default_context()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º SSL handshake
        with socket.create_connection((host, port), timeout=10) as sock:
            with context.wrap_socket(sock, server_hostname=host) as ssock:
                logger.info(f"‚úÖ SSL –≤–µ—Ä—Å–∏—è: {ssock.version()}")
                logger.info(f"‚úÖ –®–∏—Ñ—Ä: {ssock.cipher()}")
                cert = ssock.getpeercert()
                logger.info(f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω –¥–ª—è: {cert.get('subject')}")
                
    except ssl.SSLError as e:
        logger.error(f"‚ùå SSL –æ—à–∏–±–∫–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    
    return True

def test_httpx_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ httpx"""
    logger.info("=" * 50)
    logger.info("–¢–µ—Å—Ç 3: HTTPX –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    logger.info("=" * 50)
    
    supabase_url = os.getenv("SUPABASE_URL")
    
    try:
        # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        configs = [
            {"verify": True, "http2": True, "timeout": 30.0},
            {"verify": True, "http2": False, "timeout": 30.0},
            {"verify": False, "http2": True, "timeout": 30.0},
        ]
        
        for i, config in enumerate(configs, 1):
            logger.info(f"\n–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i}: {config}")
            try:
                with httpx.Client(**config) as client:
                    response = client.get(f"{supabase_url}/rest/v1/")
                    logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π {i}: {e}")
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ HTTPX: {e}")
        return False
    
    return True

def test_supabase_client():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞"""
    logger.info("=" * 50)
    logger.info("–¢–µ—Å—Ç 4: Supabase –∫–ª–∏–µ–Ω—Ç")
    logger.info("=" * 50)
    
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_key = os.getenv("SUPABASE_ANON_KEY")
    
    # –ü–æ–ø—ã—Ç–∫–∞ 1: –° –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    logger.info("\n–ü–æ–ø—ã—Ç–∫–∞ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    try:
        client = create_client(supabase_url, supabase_key)
        logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        result = client.table('users').select('telegram_id').limit(1).execute()
        logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(result.data) if result.data else 0}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ 2: –° –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    logger.info("\n–ü–æ–ø—ã—Ç–∫–∞ 2: –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    try:
        client_options = ClientOptions(
            timeout=60,
            httpx_client=httpx.Client(
                timeout=httpx.Timeout(60.0, connect=20.0),
                verify=True,
                follow_redirects=True,
                limits=httpx.Limits(max_keepalive_connections=5, max_connections=10),
                http2=True,
            )
        )
        
        client = create_client(supabase_url, supabase_key, client_options)
        logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        result = client.table('users').select('telegram_id').limit(1).execute()
        logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(result.data) if result.data else 0}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_basic_connection,
        test_ssl_connection,
        test_httpx_connection,
        test_supabase_client
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "=" * 50)
    logger.info("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 50)
    
    if all(results):
        logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        logger.info("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        logger.info("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SUPABASE_URL –∏ SUPABASE_ANON_KEY")
        logger.info("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        logger.info("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞/–ø—Ä–æ–∫—Å–∏")
        logger.info("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å SSL –ø—Ä–æ–≤–µ—Ä–∫—É: export SUPABASE_SSL_VERIFY=false")
        logger.info("5. –û–±–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–∏—Å—Ç–µ–º—ã: apt-get update && apt-get install ca-certificates")

if __name__ == "__main__":
    main()