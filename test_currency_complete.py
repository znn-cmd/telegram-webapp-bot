#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≤–∞–ª—é—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤–∞–ª—é—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import logging
from datetime import datetime
from currency_functions_v2 import (
    get_currency_rate_for_date,
    fetch_and_save_currency_rates,
    get_latest_currency_rate
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def test_currency_complete():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤–∞–ª—é—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    print("üîç –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤–∞–ª—é—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –≤–∞–ª—é—Ç")
    print("-" * 30)
    
    latest_rate = get_latest_currency_rate()
    if latest_rate:
        print("‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        required_fields = ['rub', 'usd', 'euro', 'try', 'aed', 'thb']
        for field in required_fields:
            if field in latest_rate and latest_rate[field] is not None:
                print(f"   ‚úÖ {field}: {latest_rate[field]} ({type(latest_rate[field]).__name__})")
            else:
                print(f"   ‚ùå {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ NULL")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã")
    print("-" * 30)
    
    current_rate = get_currency_rate_for_date()
    if current_rate:
        print("‚úÖ –ö—É—Ä—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        required_fields = ['rub', 'usd', 'euro', 'try', 'aed', 'thb']
        for field in required_fields:
            if field in current_rate and current_rate[field] is not None:
                print(f"   ‚úÖ {field}: {current_rate[field]} ({type(current_rate[field]).__name__})")
            else:
                print(f"   ‚ùå {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ NULL")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤")
    print("-" * 30)
    
    new_rate = fetch_and_save_currency_rates()
    if new_rate:
        print("‚úÖ –ù–æ–≤—ã–µ –∫—É—Ä—Å—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        required_fields = ['rub', 'usd', 'euro', 'try', 'aed', 'thb']
        for field in required_fields:
            if field in new_rate and new_rate[field] is not None:
                print(f"   ‚úÖ {field}: {new_rate[field]} ({type(new_rate[field]).__name__})")
            else:
                print(f"   ‚ùå {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ NULL")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã")
    
    # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    print("-" * 30)
    
    test_data = new_rate if new_rate else current_rate if current_rate else latest_rate
    
    if test_data:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['rub', 'usd', 'euro', 'try', 'aed', 'thb']
        missing_fields = []
        null_fields = []
        invalid_fields = []
        
        for field in required_fields:
            if field not in test_data:
                missing_fields.append(field)
            elif test_data[field] is None:
                null_fields.append(field)
            elif not isinstance(test_data[field], (int, float)) or test_data[field] <= 0:
                invalid_fields.append(field)
        
        if missing_fields:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {missing_fields}")
        else:
            print("   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        if null_fields:
            print(f"   ‚ùå NULL –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª—è—Ö: {null_fields}")
        else:
            print("   ‚úÖ –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
        
        if invalid_fields:
            print(f"   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª—è—Ö: {invalid_fields}")
        else:
            print("   ‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        print("   üìã –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
        for field in required_fields:
            if field in test_data:
                value = test_data[field]
                value_type = type(value).__name__
                print(f"      {field}: {value_type} = {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        if all(field in test_data for field in ['euro', 'try', 'usd', 'rub', 'aed', 'thb']):
            euro = test_data['euro']
            if euro != 1.0:
                print(f"   ‚ö†Ô∏è EUR –Ω–µ —Ä–∞–≤–µ–Ω 1.0: {euro}")
            else:
                print(f"   ‚úÖ EUR = 1.0 (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)")
    else:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    test_currency_complete()
