#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Ç–∞–±–ª–∏—Ü—ã locations
"""

import os
import sys
from dotenv import load_dotenv
from supabase import create_client, Client

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase_url = os.getenv("SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_ANON_KEY")
if not supabase_url or not supabase_key:
    print("‚ùå SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

supabase: Client = create_client(supabase_url, supabase_key)

def debug_locations_table():
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Ç–∞–±–ª–∏—Ü—ã locations
    """
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –¢–ê–ë–õ–ò–¶–´ LOCATIONS")
    print("=" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã locations
        result = supabase.table('locations').select('*').execute()
        
        if result.data:
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ locations –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø–∏—Å–µ–π: {len(result.data)}")
            print(f"\nüìã –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•:")
            print("-" * 40)
            
            for i, record in enumerate(result.data):
                print(f"–ó–∞–ø–∏—Å—å {i+1}:")
                for key, value in record.items():
                    print(f"  {key}: {value}")
                print()
        else:
            print("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ locations –ø—É—Å—Ç–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã locations: {e}")

def test_specific_search():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    """
    print("\nüéØ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –ö–û–ù–ö–†–ï–¢–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    test_values = [
        {'city_name': 'Antalya', 'district_name': 'Avsallar', 'county_name': 'Alanya'},
        {'city_name': 'Alanya', 'district_name': 'Avsallar', 'county_name': 'Antalya'},
        {'city_name': 'Antalya', 'district_name': None, 'county_name': None},
        {'city_name': None, 'district_name': 'Avsallar', 'county_name': None},
        {'city_name': None, 'district_name': None, 'county_name': 'Alanya'},
    ]
    
    for i, test_case in enumerate(test_values):
        print(f"\nüîç –¢–µ—Å—Ç {i+1}: {test_case}")
        
        try:
            query = supabase.table('locations').select('*')
            
            if test_case['city_name']:
                query = query.eq('city_name', test_case['city_name'])
            if test_case['district_name']:
                query = query.eq('district_name', test_case['district_name'])
            if test_case['county_name']:
                query = query.eq('county_name', test_case['county_name'])
                
            result = query.execute()
            
            if result.data:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(result.data)}")
                for j, record in enumerate(result.data):
                    print(f"    –ó–∞–ø–∏—Å—å {j+1}: {record}")
            else:
                print(f"  ‚ùå –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

def test_partial_search():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫
    """
    print("\nüîç –¢–ï–°–¢ –ß–ê–°–¢–ò–ß–ù–û–ì–û –ü–û–ò–°–ö–ê")
    print("=" * 40)
    
    search_terms = ['Antalya', 'Alanya', 'Avsallar', 'Istanbul', 'Ankara']
    
    for term in search_terms:
        print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ—Ä–º–∏–Ω—É: '{term}'")
        
        try:
            # –ü–æ–∏—Å–∫ –ø–æ city_name
            city_result = supabase.table('locations').select('*').eq('city_name', term).execute()
            if city_result.data:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ city_name: {len(city_result.data)} –∑–∞–ø–∏—Å–µ–π")
                for record in city_result.data:
                    print(f"    {record}")
            
            # –ü–æ–∏—Å–∫ –ø–æ district_name
            district_result = supabase.table('locations').select('*').eq('district_name', term).execute()
            if district_result.data:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ district_name: {len(district_result.data)} –∑–∞–ø–∏—Å–µ–π")
                for record in district_result.data:
                    print(f"    {record}")
            
            # –ü–æ–∏—Å–∫ –ø–æ county_name
            county_result = supabase.table('locations').select('*').eq('county_name', term).execute()
            if county_result.data:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ county_name: {len(county_result.data)} –∑–∞–ø–∏—Å–µ–π")
                for record in county_result.data:
                    print(f"    {record}")
                    
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

def test_like_search():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ —Å LIKE (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    """
    print("\nüîç –¢–ï–°–¢ –ü–û–ò–°–ö–ê –° LIKE")
    print("=" * 40)
    
    search_terms = ['Antalya', 'Alanya', 'Avsallar']
    
    for term in search_terms:
        print(f"\nüîç –ü–æ–∏—Å–∫ LIKE –ø–æ —Ç–µ—Ä–º–∏–Ω—É: '{term}'")
        
        try:
            # –ü–æ–∏—Å–∫ —Å LIKE –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
            result = supabase.table('locations').select('*').or_(f'city_name.ilike.%{term}%,district_name.ilike.%{term}%,county_name.ilike.%{term}%').execute()
            
            if result.data:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(result.data)}")
                for record in result.data:
                    print(f"    {record}")
            else:
                print(f"  ‚ùå –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

if __name__ == "__main__":
    debug_locations_table()
    test_specific_search()
    test_partial_search()
    test_like_search() 