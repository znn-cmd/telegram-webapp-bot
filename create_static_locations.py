#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ JSON —Ñ–∞–π–ª–∞ —Å –ª–æ–∫–∞—Ü–∏—è–º–∏
"""

import json
import csv

def create_static_locations_file():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π JSON —Ñ–∞–π–ª —Å –ª–æ–∫–∞—Ü–∏—è–º–∏"""
    csv_file = "temp/locations_rows (1).csv"
    json_file = "static_locations.json"
    
    print("üìä –°–û–ó–î–ê–ù–ò–ï –°–¢–ê–¢–ò–ß–ï–°–ö–û–ì–û –§–ê–ô–õ–ê –õ–û–ö–ê–¶–ò–ô")
    print("=" * 50)
    
    try:
        with open(csv_file, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file, delimiter=';')
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            countries = set()
            cities = {}  # country_id -> [(city_id, city_name), ...]
            counties = {}  # city_id -> [(county_id, county_name), ...]
            districts = {}  # county_id -> [(district_id, district_name), ...]
            
            for row in reader:
                # –°—Ç—Ä–∞–Ω—ã
                if row.get('country_id') and row.get('country_name'):
                    countries.add((int(row['country_id']), row['country_name']))
                
                # –ì–æ—Ä–æ–¥–∞
                if row.get('country_id') and row.get('city_id') and row.get('city_name'):
                    country_id = int(row['country_id'])
                    city_id = int(row['city_id'])
                    if country_id not in cities:
                        cities[country_id] = set()
                    cities[country_id].add((city_id, row['city_name']))
                
                # –û–∫—Ä—É–≥–∞
                if row.get('city_id') and row.get('county_id') and row.get('county_name'):
                    city_id = int(row['city_id'])
                    county_id = int(row['county_id'])
                    if city_id not in counties:
                        counties[city_id] = set()
                    counties[city_id].add((county_id, row['county_name']))
                
                # –†–∞–π–æ–Ω—ã
                if row.get('county_id') and row.get('district_id') and row.get('district_name'):
                    county_id = int(row['county_id'])
                    district_id = int(row['district_id'])
                    if county_id not in districts:
                        districts[county_id] = set()
                    districts[county_id].add((district_id, row['district_name']))
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            countries_list = sorted(list(countries), key=lambda x: x[1])
            
            cities_dict = {}
            for country_id in cities:
                cities_dict[country_id] = sorted(list(cities[country_id]), key=lambda x: x[1])
            
            counties_dict = {}
            for city_id in counties:
                counties_dict[city_id] = sorted(list(counties[city_id]), key=lambda x: x[1])
            
            districts_dict = {}
            for county_id in districts:
                districts_dict[county_id] = sorted(list(districts[county_id]), key=lambda x: x[1])
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            locations_data = {
                'countries': countries_list,
                'cities': cities_dict,
                'counties': counties_dict,
                'districts': districts_dict,
                'metadata': {
                    'total_countries': len(countries_list),
                    'total_cities': sum(len(cities) for cities in cities_dict.values()),
                    'total_counties': sum(len(counties) for counties in counties_dict.values()),
                    'total_districts': sum(len(districts) for districts in districts_dict.values()),
                    'created_at': '2025-09-03T12:00:00Z'
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
            with open(json_file, 'w', encoding='utf-8') as f:
                json.dump(locations_data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {json_file}")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –°—Ç—Ä–∞–Ω—ã: {len(countries_list)}")
            print(f"   –ì–æ—Ä–æ–¥–∞: {sum(len(cities) for cities in cities_dict.values())}")
            print(f"   –û–∫—Ä—É–≥–∞: {sum(len(counties) for counties in counties_dict.values())}")
            print(f"   –†–∞–π–æ–Ω—ã: {sum(len(districts) for districts in districts_dict.values())}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   –°—Ç—Ä–∞–Ω—ã: {countries_list[:3]}")
            print(f"   –ì–æ—Ä–æ–¥–∞ –¢—É—Ä—Ü–∏–∏: {list(cities_dict.get(1, []))[:5]}")
            
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

if __name__ == "__main__":
    create_static_locations_file()
