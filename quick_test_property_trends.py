#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö property_trends –¥–ª—è district_id 2279
"""

import psycopg2
from psycopg2.extras import RealDictCursor

def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ property_trends –¥–ª—è district_id 2279")
    print("=" * 50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = psycopg2.connect(
            host="localhost",
            database="aaadviser",
            user="postgres",
            password="postgres",
            port="5432"
        )
        
        cursor = connection.cursor(cursor_factory=RealDictCursor)
        
        # 1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute("""
            SELECT COUNT(*) as total
            FROM property_trends 
            WHERE district_id = 2279
        """)
        
        total = cursor.fetchone()['total']
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è district_id 2279: {total}")
        
        if total == 0:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        # 2. –î–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç
        cursor.execute("""
            SELECT 
                MIN(property_year) as min_year,
                MAX(property_year) as max_year
            FROM property_trends 
            WHERE district_id = 2279
        """)
        
        years = cursor.fetchone()
        print(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç: {years['min_year']} - {years['max_year']}")
        
        # 3. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:")
        cursor.execute("""
            SELECT 
                property_year,
                property_month,
                unit_price_for_sale,
                price_change_sale,
                unit_price_for_rent,
                price_change_rent,
                yield
            FROM property_trends 
            WHERE district_id = 2279
            ORDER BY property_year DESC, property_month DESC
            LIMIT 10
        """)
        
        records = cursor.fetchall()
        month_names = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
        
        for record in records:
            month = month_names[record['property_month'] - 1]
            print(f"   {month} {record['property_year']} | "
                  f"–ü—Ä–æ–¥–∞–∂–∞: {record['unit_price_for_sale']:8.2f} ‚Ç∫/–º¬≤ "
                  f"(+{record['price_change_sale']:5.2f}%) | "
                  f"–ê—Ä–µ–Ω–¥–∞: {record['unit_price_for_rent']:6.2f} ‚Ç∫/–º¬≤ "
                  f"(+{record['price_change_rent']:5.2f}%) | "
                  f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {record['yield']:4.1f}%")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ NULL –∑–Ω–∞—á–µ–Ω–∏–π
        cursor.execute("""
            SELECT 
                COUNT(unit_price_for_sale) as sale_count,
                COUNT(price_change_sale) as change_sale_count,
                COUNT(unit_price_for_rent) as rent_count,
                COUNT(price_change_rent) as change_rent_count,
                COUNT(yield) as yield_count
            FROM property_trends 
            WHERE district_id = 2279
        """)
        
        null_check = cursor.fetchone()
        print(f"\n‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ NULL –∑–Ω–∞—á–µ–Ω–∏–π:")
        print(f"   –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {null_check['sale_count']}/{total}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {null_check['change_sale_count']}/{total}")
        print(f"   –¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: {null_check['rent_count']}/{total}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã: {null_check['change_rent_count']}/{total}")
        print(f"   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {null_check['yield_count']}/{total}")
        
        print("\n‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    finally:
        if 'connection' in locals():
            connection.close()

if __name__ == "__main__":
    quick_test()
