#!/usr/bin/env python3
"""
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏ —Ü–µ–Ω –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import math

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
if not logger.handlers:
    handler = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(logging.INFO)

def get_price_trends_data(supabase, location_codes: Dict, area: float) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–∏–Ω–∞–º–∏–∫–µ —Ü–µ–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã property_trends
    
    Args:
        supabase: –∫–ª–∏–µ–Ω—Ç Supabase
        location_codes: –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–∏ (country_id, city_id, county_id, district_id)
        area: –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ –≤ –º¬≤
    
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–µ–Ω–¥–∞—Ö —Ü–µ–Ω
    """
    try:
        logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–¥–∞—Ö —Ü–µ–Ω –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {location_codes}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–¥–æ–≤ –ª–æ–∫–∞—Ü–∏–∏
        required_codes = ['country_id', 'city_id', 'county_id', 'district_id']
        missing_codes = [code for code in required_codes if not location_codes.get(code)]
        
        if missing_codes:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–∏: {missing_codes}")
            return {
                'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–∏: {", ".join(missing_codes)}',
                'trend': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
                'change_3y': 0,
                'forecast_3m': 0,
                'analysis': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
                'recommendation': '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏',
                'chart_data': []
            }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = datetime.now()
        current_year = current_date.year
        current_month = current_date.month
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–∏–æ–¥: 12 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥ + —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü + 1 –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
        # –ù–∞—á–∏–Ω–∞–µ–º —Å 12 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥
        start_year = current_year
        start_month = current_month - 12
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥–æ–¥ –µ—Å–ª–∏ –º–µ—Å—è—Ü < 1
        if start_month < 1:
            start_year -= 1
            start_month += 12
        
        # –ö–æ–Ω–µ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥: —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü + 1 –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
        end_year = current_year
        end_month = current_month + 1
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥–æ–¥ –µ—Å–ª–∏ –º–µ—Å—è—Ü > 12
        if end_month > 12:
            end_year += 1
            end_month -= 12
        
        logger.info(f"üìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥: —Å {start_year}-{start_month:02d} –ø–æ {end_year}-{end_month:02d}")
        logger.info(f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_year}-{current_month:02d}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ property_trends
        logger.info(f"üîç –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ property_trends")
        logger.info(f"üîç –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: select * from property_trends")
        
        query = supabase.table('property_trends').select('*').eq('country_id', location_codes['country_id'])
        logger.info(f"üîç –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä: country_id = {location_codes['country_id']}")
        
        if location_codes.get('city_id'):
            query = query.eq('city_id', location_codes['city_id'])
            logger.info(f"üîç –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä: city_id = {location_codes['city_id']}")
        if location_codes.get('county_id'):
            query = query.eq('county_id', location_codes['county_id'])
            logger.info(f"üîç –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä: county_id = {location_codes['county_id']}")
        if location_codes.get('district_id'):
            query = query.eq('district_id', location_codes['district_id'])
            logger.info(f"üîç –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä: district_id = {location_codes['district_id']}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è property_year –∏ property_month
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤ + —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü + 1 –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤ + —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü + 1 –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ
        # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ...")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥–æ–¥–∞–º (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
        years_to_include = [start_year, end_year]
        if start_year != end_year:
            years_to_include = list(range(start_year, end_year + 1))
        
        logger.info(f"üîç –í–∫–ª—é—á–∞–µ–º –≥–æ–¥—ã: {years_to_include}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é: –≥–æ–¥ >= start_year –∏ –≥–æ–¥ <= end_year
        logger.info(f"üîç –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É: property_year >= {start_year}")
        query = query.gte('property_year', start_year)
        logger.info(f"üîç –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É: property_year <= {end_year}")
        query = query.lte('property_year', end_year)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info(f"üîç –§–∏–ª—å—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:")
        logger.info(f"  - country_id = {location_codes.get('country_id')}")
        logger.info(f"  - city_id = {location_codes.get('city_id')}")
        logger.info(f"  - county_id = {location_codes.get('county_id')}")
        logger.info(f"  - district_id = {location_codes.get('district_id')}")
        logger.info(f"  - –ø–µ—Ä–∏–æ–¥: —Å {start_year}-{start_month:02d} –ø–æ {end_year}-{end_month:02d}")
        logger.info(f"üîç –í–∫–ª—é—á–∞–µ–º –≥–æ–¥—ã: {years_to_include}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        query = query.order('property_year', desc=False).order('property_month', desc=False)
        
        logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        logger.info(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:")
        logger.info(f"  - country_id: {location_codes.get('country_id')}")
        logger.info(f"  - city_id: {location_codes.get('city_id')}")
        logger.info(f"  - county_id: {location_codes.get('county_id')}")
        logger.info(f"  - district_id: {location_codes.get('district_id')}")
        logger.info(f"  - –ø–µ—Ä–∏–æ–¥: —Å {start_year}-{start_month:02d} –ø–æ {end_year}-{end_month:02d}")
        logger.info(f"üîç SQL –∑–∞–ø—Ä–æ—Å: {query}")
        
        try:
            response = query.execute()
            logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üîç –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(response)}")
            logger.info(f"üîç –ê—Ç—Ä–∏–±—É—Ç—ã –æ—Ç–≤–µ—Ç–∞: {dir(response)}")
            if hasattr(response, 'data'):
                logger.info(f"üîç –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: {response.data}")
                logger.info(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(response.data) if response.data else 0}")
                if response.data:
                    logger.info(f"üîç –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {response.data[0]}")
                    logger.info(f"üîç –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {response.data[-1]}")
                    logger.info(f"üîç –í—Å–µ –∑–∞–ø–∏—Å–∏: {response.data}")
                else:
                    logger.warning(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π - –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
            else:
                logger.info(f"üîç –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ç—Ä–∏–±—É—Ç 'data'")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            logger.error(f"‚ùå SQL –∑–∞–ø—Ä–æ—Å: {query}")
            return {
                'error': f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {str(e)}',
                'trend': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
                'change_3y': 0,
                'forecast_3m': 0,
                'analysis': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
                'recommendation': '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
                'chart_data': []
            }
        
        if response.data is None:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–¥–∞—Ö —Ü–µ–Ω (response.data is None)")
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SQL –∑–∞–ø—Ä–æ—Å: {query}")
            return {
                'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–¥–∞—Ö —Ü–µ–Ω –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏',
                'trend': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
                'change_3y': 0,
                'forecast_3m': 0,
                'analysis': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
                'recommendation': '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏',
                'chart_data': []
            }
        
        trends_data = response.data
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(trends_data)} –∑–∞–ø–∏—Å–µ–π –æ —Ç—Ä–µ–Ω–¥–∞—Ö —Ü–µ–Ω")
        if trends_data:
            logger.info(f"üîç –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏: {trends_data[:3]}")
            logger.info(f"üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏: {trends_data[-3:]}")
        else:
            logger.warning(f"‚ö†Ô∏è trends_data –ø—É—Å—Ç–æ–π - –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SQL –∑–∞–ø—Ä–æ—Å: {query}")
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã: country_id={location_codes.get('country_id')}, city_id={location_codes.get('city_id')}, county_id={location_codes.get('county_id')}, district_id={location_codes.get('district_id')}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–æ–≤
        processed_data = []
        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(trends_data)} –∑–∞–ø–∏—Å–µ–π...")
        
        for i, record in enumerate(trends_data):
            try:
                unit_price = float(record.get('unit_price_for_sale', 0))
                total_price = unit_price * area
                
                processed_record = {
                    'year': record.get('property_year'),
                    'month': record.get('property_month'),
                    'unit_price': unit_price,
                    'total_price': total_price,
                    'date_key': f"{record.get('property_year')}-{record.get('property_month'):02d}"
                }
                processed_data.append(processed_record)
                
                if i < 3:  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
                    logger.info(f"üîç –ó–∞–ø–∏—Å—å {i+1}: –≥–æ–¥={record.get('property_year')}, –º–µ—Å—è—Ü={record.get('property_month')}, —Ü–µ–Ω–∞/–º¬≤={unit_price}, –æ–±—â–∞—è —Ü–µ–Ω–∞={total_price}")
                
            except (ValueError, TypeError) as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {i+1}: {e}, –¥–∞–Ω–Ω—ã–µ: {record}")
                continue
        
        if not processed_data:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            logger.warning(f"‚ö†Ô∏è trends_data: {trends_data}")
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SQL –∑–∞–ø—Ä–æ—Å: {query}")
            return {
                'error': '–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–¥–∞—Ö —Ü–µ–Ω',
                'trend': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
                'change_3y': 0,
                'forecast_3m': 0,
                'analysis': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
                'recommendation': '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏',
                'chart_data': []
            }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        processed_data.sort(key=lambda x: x['date_key'])
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥
        trend_analysis = analyze_price_trend(processed_data)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 3 –≥–æ–¥–∞
        change_3y = calculate_3year_change(processed_data)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –º–µ—Å—è—Ü–∞
        forecast_3m = calculate_3month_forecast(processed_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        chart_data = format_chart_data(processed_data)
        
        result = {
            'trend': trend_analysis['trend'],
            'change_3y': change_3y,
            'forecast_3m': forecast_3m,
            'analysis': trend_analysis['analysis'],
            'recommendation': trend_analysis['recommendation'],
            'chart_data': chart_data,
            'raw_data_count': len(processed_data)
        }
        
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: {result['trend']}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 3 –≥–æ–¥–∞: {change_3y:.1f}%")
        logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        logger.info(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(processed_data)}")
        logger.info(f"üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: {chart_data}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–¥–∞—Ö —Ü–µ–Ω: {e}")
        logger.error(f"‚ùå –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–∏: {location_codes}")
        logger.error(f"‚ùå –ü–ª–æ—â–∞–¥—å: {area}")
        logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        return {
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}',
            'trend': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
            'change_3y': 0,
            'forecast_3m': 0,
            'analysis': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            'recommendation': '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
            'chart_data': []
        }

def analyze_price_trend(data: List[Dict]) -> Dict:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ —Ü–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        data: —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å —Ü–µ–Ω–∞–º–∏
    
    Returns:
        Dict —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç—Ä–µ–Ω–¥–∞
    """
    try:
        if len(data) < 2:
            return {
                'trend': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö',
                'analysis': '–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞',
                'recommendation': '–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
            }
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        prices = [record['total_price'] for record in data]
        avg_price = sum(prices) / len(prices)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥ (–ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è)
        n = len(data)
        x_values = list(range(n))
        y_values = prices
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        sum_x = sum(x_values)
        sum_y = sum(y_values)
        sum_xy = sum(x * y for x, y in zip(x_values, y_values))
        sum_x2 = sum(x * x for x in x_values)
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–∫–ª–æ–Ω–∞ (slope)
        slope = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        if abs(slope) < avg_price * 0.01:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–Ω–µ–µ 1% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
            trend = '–°—Ç–∞–±–∏–ª—å–Ω—ã–π'
            analysis = '–¶–µ–Ω—ã –æ—Å—Ç–∞—é—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏'
            recommendation = '–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏'
        elif slope > 0:
            trend = '–†–∞—Å—Ç—É—â–∏–π'
            analysis = '–¶–µ–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–æ—Å—Ç'
            recommendation = '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
        else:
            trend = '–ü–∞–¥–∞—é—â–∏–π'
            analysis = '–¶–µ–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é –∫ —Å–Ω–∏–∂–µ–Ω–∏—é'
            recommendation = '–ú–æ–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å —Å –ø–æ–∫—É–ø–∫–æ–π'
        
        return {
            'trend': trend,
            'analysis': analysis,
            'recommendation': recommendation,
            'slope': slope,
            'avg_price': avg_price
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞: {e}")
        return {
            'trend': '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
            'analysis': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥',
            'recommendation': '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑'
        }

def calculate_3year_change(data: List[Dict]) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 3 –≥–æ–¥–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    
    Args:
        data: —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å —Ü–µ–Ω–∞–º–∏
    
    Returns:
        float: –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
    """
    try:
        if len(data) < 2:
            return 0.0
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
        first_price = data[0]['total_price']
        last_price = data[-1]['total_price']
        
        if first_price == 0:
            return 0.0
        
        change_percent = ((last_price - first_price) / first_price) * 100
        return round(change_percent, 1)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ 3 –≥–æ–¥–∞: {e}")
        return 0.0

def calculate_3month_forecast(data: List[Dict]) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥
    
    Args:
        data: —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å —Ü–µ–Ω–∞–º–∏
    
    Returns:
        float: –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
    """
    try:
        if len(data) < 3:
            return 0.0
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç–æ—á–∫–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        recent_prices = data[-3:]
        prices = [record['total_price'] for record in recent_prices]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        changes = []
        for i in range(1, len(prices)):
            if prices[i-1] != 0:
                change = ((prices[i] - prices[i-1]) / prices[i-1]) * 100
                changes.append(change)
        
        if not changes:
            return 0.0
        
        # –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
        avg_change = sum(changes) / len(changes)
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (—ç–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥)
        forecast_change = avg_change * 3
        
        return round(forecast_change, 1)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞: {e}")
        return 0.0

def format_chart_data(data: List[Dict]) -> List[Dict]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    
    Args:
        data: —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å —Ü–µ–Ω–∞–º–∏
    
    Returns:
        List[Dict]: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    """
    try:
        chart_data = []
        
        for record in data:
            chart_data.append({
                'year': record['year'],
                'month': record['month'],
                'unit_price': record['unit_price'],
                'total_price': round(record['total_price'], 2),
                'label': f"{record['month']:02d}/{record['year']}"
            })
        
        return chart_data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return []
