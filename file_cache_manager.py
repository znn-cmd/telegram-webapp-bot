"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
–ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Redis –¥–ª—è —Ä–µ–¥–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
"""

import json
import os
import logging
from typing import Optional, List, Tuple, Any
from datetime import datetime, timedelta
import threading

logger = logging.getLogger(__name__)

class FileCacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
    
    def __init__(self, cache_dir: str = "cache"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à-–º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.cache_dir = cache_dir
        self.lock = threading.Lock()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–µ—à–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(self.cache_dir):
            os.makedirs(self.cache_dir)
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–µ—à–∞: {self.cache_dir}")
        
        logger.info(f"‚úÖ –§–∞–π–ª–æ–≤—ã–π –∫–µ—à-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.cache_dir}")
    
    def _get_cache_file_path(self, key: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∫–µ—à–∞"""
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        safe_key = key.replace(":", "_").replace("/", "_").replace("\\", "_")
        return os.path.join(self.cache_dir, f"{safe_key}.json")
    
    def _is_cache_valid(self, cache_data: dict, ttl_hours: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–µ—à–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        if 'timestamp' not in cache_data:
            return False
        
        cache_time = datetime.fromisoformat(cache_data['timestamp'])
        expiry_time = cache_time + timedelta(hours=ttl_hours)
        
        return datetime.now() < expiry_time
    
    def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞"""
        try:
            cache_file = self._get_cache_file_path(key)
            
            if not os.path.exists(cache_file):
                logger.debug(f"‚ùå –§–∞–π–ª –∫–µ—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {key}")
                return None
            
            with self.lock:
                with open(cache_file, 'r', encoding='utf-8') as f:
                    cache_data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–µ—à–∞
            if 'ttl_hours' in cache_data and not self._is_cache_valid(cache_data, cache_data['ttl_hours']):
                logger.debug(f"‚è∞ –ö–µ—à –∏—Å—Ç–µ–∫ –¥–ª—è –∫–ª—é—á–∞: {key}")
                self.delete(key)
                return None
            
            logger.debug(f"üéØ –§–∞–π–ª–æ–≤—ã–π –∫–µ—à HIT –¥–ª—è –∫–ª—é—á–∞: {key}")
            return cache_data.get('data')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞ {key}: {e}")
            return None
    
    def set(self, key: str, data: Any, ttl_hours: int = 24) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–æ–≤—ã–π –∫–µ—à —Å TTL"""
        try:
            cache_file = self._get_cache_file_path(key)
            
            cache_data = {
                'data': data,
                'timestamp': datetime.now().isoformat(),
                'ttl_hours': ttl_hours
            }
            
            with self.lock:
                with open(cache_file, 'w', encoding='utf-8') as f:
                    json.dump(cache_data, f, ensure_ascii=False, indent=2)
            
            logger.debug(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–æ–≤—ã–π –∫–µ—à: {key} (TTL: {ttl_hours}h)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–æ–≤—ã–π –∫–µ—à {key}: {e}")
            return False
    
    def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–µ—à–∞"""
        try:
            cache_file = self._get_cache_file_path(key)
            
            if os.path.exists(cache_file):
                with self.lock:
                    os.remove(cache_file)
                logger.debug(f"üóëÔ∏è –§–∞–π–ª –∫–µ—à–∞ —É–¥–∞–ª–µ–Ω: {key}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞ {key}: {e}")
            return False
    
    def clear_pattern(self, pattern: str) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É (—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤)"""
        try:
            deleted_count = 0
            
            with self.lock:
                for filename in os.listdir(self.cache_dir):
                    if filename.endswith('.json'):
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤ –∏–º—è —Ñ–∞–π–ª–∞
                        file_pattern = pattern.replace(":", "_").replace("/", "_").replace("\\", "_")
                        
                        if file_pattern in filename:
                            file_path = os.path.join(self.cache_dir, filename)
                            os.remove(file_path)
                            deleted_count += 1
            
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–æ–≤ –∫–µ—à–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
            return deleted_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É {pattern}: {e}")
            return 0
    
    def clear_all(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫–µ—à–∞"""
        try:
            deleted_count = 0
            
            with self.lock:
                for filename in os.listdir(self.cache_dir):
                    if filename.endswith('.json'):
                        file_path = os.path.join(self.cache_dir, filename)
                        os.remove(file_path)
                        deleted_count += 1
            
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–æ–≤ –∫–µ—à–∞")
            return deleted_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞: {e}")
            return 0
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    
    def get_countries(self) -> Optional[List[Tuple[int, str]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞"""
        return self.get("locations_countries")
    
    def set_countries(self, countries: List[Tuple[int, str]], ttl_hours: int = 24) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω –≤ —Ñ–∞–π–ª–æ–≤—ã–π –∫–µ—à"""
        return self.set("locations_countries", countries, ttl_hours)
    
    def get_cities(self, country_id: int) -> Optional[List[Tuple[int, str]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ country_id –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞"""
        return self.get(f"locations_cities_{country_id}")
    
    def set_cities(self, country_id: int, cities: List[Tuple[int, str]], ttl_hours: int = 24) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤—ã–π –∫–µ—à"""
        return self.set(f"locations_cities_{country_id}", cities, ttl_hours)
    
    def get_counties(self, city_id: int) -> Optional[List[Tuple[int, str]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π –ø–æ city_id –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞"""
        return self.get(f"locations_counties_{city_id}")
    
    def set_counties(self, city_id: int, counties: List[Tuple[int, str]], ttl_hours: int = 24) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π –≤ —Ñ–∞–π–ª–æ–≤—ã–π –∫–µ—à"""
        return self.set(f"locations_counties_{city_id}", counties, ttl_hours)
    
    def get_districts(self, county_id: int) -> Optional[List[Tuple[int, str]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–æ–≤ –ø–æ county_id –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞"""
        return self.get(f"locations_districts_{county_id}")
    
    def set_districts(self, county_id: int, districts: List[Tuple[int, str]], ttl_hours: int = 24) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤—ã–π –∫–µ—à"""
        return self.set(f"locations_districts_{county_id}", districts, ttl_hours)
    
    def clear_locations_cache(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫–µ—à–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return self.clear_pattern("locations_")
    
    def get_cache_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞"""
        try:
            cache_files = [f for f in os.listdir(self.cache_dir) if f.endswith('.json')]
            
            total_size = 0
            valid_files = 0
            expired_files = 0
            
            for filename in cache_files:
                file_path = os.path.join(self.cache_dir, filename)
                total_size += os.path.getsize(file_path)
                
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        cache_data = json.load(f)
                    
                    if 'ttl_hours' in cache_data and self._is_cache_valid(cache_data, cache_data['ttl_hours']):
                        valid_files += 1
                    else:
                        expired_files += 1
                        
                except:
                    expired_files += 1
            
            return {
                "status": "available",
                "cache_dir": self.cache_dir,
                "total_files": len(cache_files),
                "valid_files": valid_files,
                "expired_files": expired_files,
                "total_size_bytes": total_size,
                "total_size_mb": round(total_size / (1024 * 1024), 2)
            }
            
        except Exception as e:
            return {"status": "error", "message": str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–µ—à–∞
file_cache_manager = FileCacheManager()
