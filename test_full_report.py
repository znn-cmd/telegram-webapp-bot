#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import os
import sys
import datetime
from supabase import create_client, Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase
SUPABASE_URL = "https://dzllnnohurlzjyabgsft.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImR6bGxubm9odXJsemp5YWJnc2Z0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA5NDgwMjcsImV4cCI6MjA2NjUyNDAyN30.sJCIeeIm0Ye1JbAdw5HzfAMe8QLgQomArK8yoppuevQ"

def get_economic_data_simple(country_code='TUR', years_back=10):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ª–µ—Ç
        current_year = datetime.datetime.now().year
        start_year = current_year - years_back
        
        # –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ imf_economic_data –¥–ª—è –í–í–ü (NGDP_RPCH)
        gdp_query = supabase.table('imf_economic_data').select('*').eq('country_code', country_code).eq('indicator_code', 'NGDP_RPCH').gte('year', start_year).order('year', desc=True)
        gdp_result = gdp_query.execute()
        
        # –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ imf_economic_data –¥–ª—è –∏–Ω—Ñ–ª—è—Ü–∏–∏ (PCPIPCH)
        inflation_query = supabase.table('imf_economic_data').select('*').eq('country_code', country_code).eq('indicator_code', 'PCPIPCH').gte('year', start_year).order('year', desc=True)
        inflation_result = inflation_query.execute()
        
        if not gdp_result.data and not inflation_result.data:
            return {
                'gdp_data': [],
                'inflation_data': [],
                'country_code': country_code,
                'country_name': 'Unknown',
                'error': 'No data available'
            }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –í–í–ü
        gdp_data = []
        for record in gdp_result.data:
            year = record.get('year')
            value = record.get('value')
            if year and value is not None:
                gdp_data.append({
                    'year': year,
                    'value': float(value),
                    'indicator_code': record.get('indicator_code'),
                    'indicator_name': record.get('indicator_name')
                })
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏
        inflation_data = []
        for record in inflation_result.data:
            year = record.get('year')
            value = record.get('value')
            if year and value is not None:
                inflation_data.append({
                    'year': year,
                    'value': float(value),
                    'indicator_code': record.get('indicator_code'),
                    'indicator_name': record.get('indicator_name')
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–æ–¥—É (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)
        gdp_data.sort(key=lambda x: x['year'])
        inflation_data.sort(key=lambda x: x['year'])
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã
        gdp_values = [d['value'] for d in gdp_data]
        inflation_values = [d['value'] for d in inflation_data]
        
        gdp_trend = calculate_trend(gdp_values) if gdp_values else 0
        inflation_trend = calculate_trend(inflation_values) if inflation_values else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
        country_name = gdp_result.data[0].get('country_name') if gdp_result.data else 'Unknown'
        
        return {
            'gdp_data': gdp_data,
            'inflation_data': inflation_data,
            'country_code': country_code,
            'country_name': country_name,
            'gdp_trend': gdp_trend,
            'inflation_trend': inflation_trend,
            'latest_gdp': gdp_data[-1] if gdp_data else None,
            'latest_inflation': inflation_data[-1] if inflation_data else None,
            'data_years': f"{start_year}-{current_year}"
        }
        
    except Exception as e:
        return {
            'gdp_data': [],
            'inflation_data': [],
            'country_code': country_code,
            'country_name': 'Unknown',
            'error': str(e)
        }

def calculate_trend(values):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è —Ä—è–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π"""
    if len(values) < 2:
        return 0
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
    n = len(values)
    x_sum = sum(range(n))
    y_sum = sum(values)
    xy_sum = sum(i * val for i, val in enumerate(values))
    x2_sum = sum(i * i for i in range(n))
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–∫–ª–æ–Ω–∞
    slope = (n * xy_sum - x_sum * y_sum) / (n * x2_sum - x_sum * x_sum)
    
    return slope

def create_economic_chart_data(economic_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    gdp_data = economic_data.get('gdp_data', [])
    inflation_data = economic_data.get('inflation_data', [])
    country_name = economic_data.get('country_name', 'Unknown')
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –í–í–ü (—Ä–æ—Å—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
    gdp_chart = {
        'labels': [str(d['year']) for d in gdp_data],
        'datasets': [
            {
                'label': f'–†–æ—Å—Ç –í–í–ü (%) - {country_name}',
                'data': [d['value'] for d in gdp_data],
                'borderColor': '#667eea',
                'backgroundColor': 'rgba(102, 126, 234, 0.1)',
                'tension': 0.4,
                'fill': False
            }
        ]
    }
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–Ω—Ñ–ª—è—Ü–∏–∏
    inflation_chart = {
        'labels': [str(d['year']) for d in inflation_data],
        'datasets': [
            {
                'label': f'–ò–Ω—Ñ–ª—è—Ü–∏—è (%) - {country_name}',
                'data': [d['value'] for d in inflation_data],
                'borderColor': '#dc3545',
                'backgroundColor': 'rgba(220, 53, 69, 0.1)',
                'tension': 0.4,
                'fill': False
            }
        ]
    }
    
    return {
        'gdp_chart': gdp_chart,
        'inflation_chart': inflation_chart,
        'trends': {
            'gdp_trend': economic_data.get('gdp_trend', 0),
            'inflation_trend': economic_data.get('inflation_trend', 0)
        },
        'latest': {
            'gdp': economic_data.get('latest_gdp'),
            'inflation': economic_data.get('latest_inflation')
        },
        'country_name': country_name,
        'country_code': economic_data.get('country_code', 'Unknown')
    }

def test_full_report():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    economic_data = get_economic_data_simple('TUR', 10)
    
    if 'error' in economic_data:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {economic_data['error']}")
        return
    
    print(f"‚úÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
    print(f"   - –°—Ç—Ä–∞–Ω–∞: {economic_data.get('country_name', 'Unknown')}")
    print(f"   - –î–∞–Ω–Ω—ã–µ –í–í–ü: {len(economic_data.get('gdp_data', []))} –∑–∞–ø–∏—Å–µ–π")
    print(f"   - –î–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏: {len(economic_data.get('inflation_data', []))} –∑–∞–ø–∏—Å–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    chart_data = create_economic_chart_data(economic_data)
    
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω—ã:")
    print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: {chart_data.get('country_name', 'Unknown')}")
    print(f"   - –î–∞–Ω–Ω—ã–µ –í–í–ü: {len(chart_data.get('gdp_chart', {}).get('labels', []))} —Ç–æ—á–µ–∫")
    print(f"   - –î–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏: {len(chart_data.get('inflation_chart', {}).get('labels', []))} —Ç–æ—á–µ–∫")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    full_report_data = {
        'object': {
            'address': 'Test Address, Istanbul',
            'bedrooms': 2,
            'purchase_price': 150000,
            'avg_price_per_sqm': 2500
        },
        'roi': {
            'short_term': {
                'monthly_income': 1200,
                'net_income': 800,
                'five_year_income': 93600,
                'final_value': 180000,
                'roi': 81.5
            },
            'long_term': {
                'annual_income': 14400,
                'net_income': 9600,
                'five_year_income': 172000,
                'final_value': 180000,
                'roi': 130.5
            },
            'no_rent': {
                'final_value': 180000,
                'roi': 23
            },
            'price_growth': 0.20
        },
        'alternatives': [
            {'name': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –¥–µ–ø–æ–∑–∏—Ç', 'yield': 0.25, 'source': 'TCMB API'},
            {'name': '–û–±–ª–∏–≥–∞—Ü–∏–∏ –¢—É—Ä—Ü–∏–∏', 'yield': 0.35, 'source': 'Investing.com API'},
            {'name': '–ê–∫—Ü–∏–∏ (BIST30)', 'yield': 0.45, 'source': 'Alpha Vantage API'},
            {'name': 'REITs (—Ñ–æ–Ω–¥—ã)', 'yield': 0.55, 'source': 'Financial Modeling Prep'},
            {'name': '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', 'yield': 0.815, 'source': '–í–∞—à –æ–±—ä–µ–∫—Ç'}
        ],
        'macro': {
            'inflation': economic_data.get('latest_inflation', {}).get('value', 0) if economic_data.get('latest_inflation') else 0,
            'eur_try': 35.2,
            'eur_try_growth': 0.14,
            'refi_rate': 45,
            'gdp_growth': economic_data.get('latest_gdp', {}).get('value', 0) if economic_data.get('latest_gdp') else 0
        },
        'economic_charts': chart_data,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        'taxes': {
            'transfer_tax': 0.04,
            'stamp_duty': 0.01,
            'notary': 500
        },
        'risks': [
            '–í–∞–ª—é—Ç–Ω—ã–µ —Ä–∏—Å–∫–∏',
            '–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏',
            '–†–∏—Å–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'
        ],
        'liquidity': '–°—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å',
        'district': '–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è —Ä–∞–π–æ–Ω',
        'yield': 0.081,
        'price_index': 1.23,
        'mortgage_rate': 0.32,
        'global_house_price_index': 1.12,
        'summary': '–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ IMF.'
    }
    
    print(f"\nüìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω:")
    print(f"   - –ò–Ω—Ñ–ª—è—Ü–∏—è: {full_report_data['macro']['inflation']}%")
    print(f"   - –†–æ—Å—Ç –í–í–ü: {full_report_data['macro']['gdp_growth']}%")
    print(f"   - –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏: {'–î–∞' if 'economic_charts' in full_report_data else '–ù–µ—Ç'}")
    
    if full_report_data.get('economic_charts'):
        charts = full_report_data['economic_charts']
        print(f"   - –°—Ç—Ä–∞–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {charts.get('country_name', 'Unknown')}")
        print(f"   - –¢—Ä–µ–Ω–¥ –í–í–ü: {charts.get('trends', {}).get('gdp_trend', 0):.3f}")
        print(f"   - –¢—Ä–µ–Ω–¥ –∏–Ω—Ñ–ª—è—Ü–∏–∏: {charts.get('trends', {}).get('inflation_trend', 0):.3f}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_full_report() 