#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import requests
import json

def test_language_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        {
            "name": "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º",
            "telegram_id": 123456789,
            "telegram_language": "ru",
            "expected_language": "ru"
        },
        {
            "name": "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º",
            "telegram_id": 987654321,
            "telegram_language": "en",
            "expected_language": "en"
        },
        {
            "name": "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —è–∑—ã–∫–æ–º",
            "telegram_id": 555666777,
            "telegram_language": "zh",
            "expected_language": "en"
        },
        {
            "name": "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "telegram_id": 999888777,
            "telegram_language": "de",
            "expected_language": "de"
        }
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...")
    print("=" * 50)
    
    for test_case in test_cases:
        print(f"\nüìã –¢–µ—Å—Ç: {test_case['name']}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.post(
                'http://localhost:5000/api/get_user_language',
                json={
                    'telegram_id': test_case['telegram_id'],
                    'telegram_language': test_case['telegram_language']
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    actual_language = data.get('language')
                    is_admin = data.get('is_admin', False)
                    
                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —è–∑—ã–∫: {actual_language}")
                    print(f"   üìä –ê–¥–º–∏–Ω —Å—Ç–∞—Ç—É—Å: {is_admin}")
                    
                    if actual_language == test_case['expected_language']:
                        print(f"   ‚úÖ –Ø–∑—ã–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É: {test_case['expected_language']}")
                    else:
                        print(f"   ‚ö†Ô∏è  –Ø–∑—ã–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É. –û–∂–∏–¥–∞–ª—Å—è: {test_case['expected_language']}")
                else:
                    print(f"   ‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data.get('error', 'Unknown error')}")
            else:
                print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                
        except requests.exceptions.ConnectionError:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.")
        except requests.exceptions.Timeout:
            print("   ‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
        except Exception as e:
            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def test_translations_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    
    languages = ['ru', 'en', 'de', 'fr', 'tr']
    
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")
    print("=" * 50)
    
    for lang in languages:
        print(f"\nüìã –¢–µ—Å—Ç —è–∑—ã–∫–∞: {lang}")
        
        try:
            response = requests.post(
                'http://localhost:5000/api/translations',
                json={'language': lang},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict) and len(data) > 0:
                    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞ {lang}")
                    print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: {len(data)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª—é—á–µ–π
                    required_keys = ['common', 'profile', 'main', 'admin']
                    missing_keys = [key for key in required_keys if key not in data]
                    
                    if missing_keys:
                        print(f"   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: {missing_keys}")
                    else:
                        print(f"   ‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                else:
                    print(f"   ‚ùå –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            else:
                print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —è–∑—ã–∫–∞
    test_language_api()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    test_translations_api()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python app.py")
    print("   2. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:5000/webapp")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤")
    print("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

if __name__ == "__main__":
    main()
