#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π –∏–∑ Supabase –≤ JSON —Ñ–∞–π–ª
"""

import os
import json
import csv
from datetime import datetime
from supabase import create_client, Client

def load_supabase_credentials():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Supabase –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    supabase_url = os.getenv('SUPABASE_URL')
    supabase_key = os.getenv('SUPABASE_KEY')
    
    if not supabase_url or not supabase_key:
        print("‚ùå –û—à–∏–±–∫–∞: SUPABASE_URL –∏–ª–∏ SUPABASE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env")
        return None, None
    
    return supabase_url, supabase_key

def export_locations_from_supabase():
    """–í—ã–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ Supabase –≤ JSON —Ñ–∞–π–ª"""
    
    print("üìä –í–´–ì–†–£–ó–ö–ê –õ–û–ö–ê–¶–ò–ô –ò–ó SUPABASE")
    print("=" * 50)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    supabase_url, supabase_key = load_supabase_credentials()
    if not supabase_url or not supabase_key:
        return False
    
    try:
        supabase: Client = create_client(supabase_url, supabase_key)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        all_records = []
        page = 0
        page_size = 1000
        
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã locations...")
        
        while True:
            result = supabase.table('locations').select('*').range(page * page_size, (page + 1) * page_size - 1).execute()
            
            if not result.data:
                break
                
            all_records.extend(result.data)
            page += 1
            
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {page}, –∑–∞–ø–∏—Å–µ–π: {len(all_records)}")
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if page > 20:  # –ú–∞–∫—Å–∏–º—É–º 20 —Å—Ç—Ä–∞–Ω–∏—Ü
                print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (20)")
                break
        
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_records)}")
        
        if not all_records:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏")
            return False
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        countries = set()
        cities = {}  # country_id -> [(city_id, city_name), ...]
        counties = {}  # city_id -> [(county_id, county_name), ...]
        districts = {}  # county_id -> [(district_id, district_name), ...]
        
        for item in all_records:
            # –°—Ç—Ä–∞–Ω—ã
            if item.get('country_id') and item.get('country_name'):
                countries.add((item['country_id'], item['country_name']))
            
            # –ì–æ—Ä–æ–¥–∞
            if item.get('country_id') and item.get('city_id') and item.get('city_name'):
                country_id = item['country_id']
                if country_id not in cities:
                    cities[country_id] = set()
                cities[country_id].add((item['city_id'], item['city_name']))
            
            # –û–∫—Ä—É–≥–∞
            if item.get('city_id') and item.get('county_id') and item.get('county_name'):
                city_id = item['city_id']
                if city_id not in counties:
                    counties[city_id] = set()
                counties[city_id].add((item['county_id'], item['county_name']))
            
            # –†–∞–π–æ–Ω—ã
            if item.get('county_id') and item.get('district_id') and item.get('district_name'):
                county_id = item['county_id']
                if county_id not in districts:
                    districts[county_id] = set()
                districts[county_id].add((item['district_id'], item['district_name']))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        countries_list = sorted(list(countries), key=lambda x: x[1])
        
        cities_dict = {}
        for country_id in cities:
            cities_dict[country_id] = sorted(list(cities[country_id]), key=lambda x: x[1])
        
        counties_dict = {}
        for city_id in counties:
            counties_dict[city_id] = sorted(list(counties[city_id]), key=lambda x: x[1])
        
        districts_dict = {}
        for county_id in districts:
            districts_dict[county_id] = sorted(list(districts[county_id]), key=lambda x: x[1])
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        locations_data = {
            'countries': countries_list,
            'cities': cities_dict,
            'counties': counties_dict,
            'districts': districts_dict,
            'metadata': {
                'total_countries': len(countries_list),
                'total_cities': sum(len(cities) for cities in cities_dict.values()),
                'total_counties': sum(len(counties) for counties in counties_dict.values()),
                'total_districts': sum(len(districts) for districts in districts_dict.values()),
                'total_raw_records': len(all_records),
                'exported_at': datetime.now().isoformat(),
                'source': 'supabase'
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
        json_file = "static_locations.json"
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(locations_data, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_file = f"locations_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(backup_file, 'w', encoding='utf-8') as f:
            json.dump({
                'raw_data': all_records,
                'processed_data': locations_data,
                'exported_at': datetime.now().isoformat()
            }, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {json_file}")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_file}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –°—Ç—Ä–∞–Ω—ã: {len(countries_list)}")
        print(f"   –ì–æ—Ä–æ–¥–∞: {sum(len(cities) for cities in cities_dict.values())}")
        print(f"   –û–∫—Ä—É–≥–∞: {sum(len(counties) for counties in counties_dict.values())}")
        print(f"   –†–∞–π–æ–Ω—ã: {sum(len(districts) for districts in districts_dict.values())}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   –°—Ç—Ä–∞–Ω—ã: {countries_list[:3]}")
        if cities_dict:
            first_country = list(cities_dict.keys())[0]
            print(f"   –ì–æ—Ä–æ–¥–∞ (—Å—Ç—Ä–∞–Ω–∞ {first_country}): {list(cities_dict[first_country])[:5]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def export_from_csv_fallback():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –∏–∑ CSV —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    csv_file = "temp/locations_rows (1).csv"
    
    if not os.path.exists(csv_file):
        print(f"‚ùå CSV —Ñ–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –≤—ã–≥—Ä—É–∑–∫–∞ –∏–∑ CSV —Ñ–∞–π–ª–∞")
    
    try:
        with open(csv_file, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file, delimiter=';')
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            countries = set()
            cities = {}  # country_id -> [(city_id, city_name), ...]
            counties = {}  # city_id -> [(county_id, county_name), ...]
            districts = {}  # county_id -> [(district_id, district_name), ...]
            
            for row in reader:
                # –°—Ç—Ä–∞–Ω—ã
                if row.get('country_id') and row.get('country_name'):
                    countries.add((int(row['country_id']), row['country_name']))
                
                # –ì–æ—Ä–æ–¥–∞
                if row.get('country_id') and row.get('city_id') and row.get('city_name'):
                    country_id = int(row['country_id'])
                    city_id = int(row['city_id'])
                    if country_id not in cities:
                        cities[country_id] = set()
                    cities[country_id].add((city_id, row['city_name']))
                
                # –û–∫—Ä—É–≥–∞
                if row.get('city_id') and row.get('county_id') and row.get('county_name'):
                    city_id = int(row['city_id'])
                    county_id = int(row['county_id'])
                    if city_id not in counties:
                        counties[city_id] = set()
                    counties[city_id].add((county_id, row['county_name']))
                
                # –†–∞–π–æ–Ω—ã
                if row.get('county_id') and row.get('district_id') and row.get('district_name'):
                    county_id = int(row['county_id'])
                    district_id = int(row['district_id'])
                    if county_id not in districts:
                        districts[county_id] = set()
                    districts[county_id].add((district_id, row['district_name']))
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            countries_list = sorted(list(countries), key=lambda x: x[1])
            
            cities_dict = {}
            for country_id in cities:
                cities_dict[country_id] = sorted(list(cities[country_id]), key=lambda x: x[1])
            
            counties_dict = {}
            for city_id in counties:
                counties_dict[city_id] = sorted(list(counties[city_id]), key=lambda x: x[1])
            
            districts_dict = {}
            for county_id in districts:
                districts_dict[county_id] = sorted(list(districts[county_id]), key=lambda x: x[1])
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            locations_data = {
                'countries': countries_list,
                'cities': cities_dict,
                'counties': counties_dict,
                'districts': districts_dict,
                'metadata': {
                    'total_countries': len(countries_list),
                    'total_cities': sum(len(cities) for cities in cities_dict.values()),
                    'total_counties': sum(len(counties) for counties in counties_dict.values()),
                    'total_districts': sum(len(districts) for districts in districts_dict.values()),
                    'exported_at': datetime.now().isoformat(),
                    'source': 'csv_backup'
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
            json_file = "static_locations.json"
            with open(json_file, 'w', encoding='utf-8') as f:
                json.dump(locations_data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {json_file} (–∏–∑ CSV)")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –°—Ç—Ä–∞–Ω—ã: {len(countries_list)}")
            print(f"   –ì–æ—Ä–æ–¥–∞: {sum(len(cities) for cities in cities_dict.values())}")
            print(f"   –û–∫—Ä—É–≥–∞: {sum(len(counties) for counties in counties_dict.values())}")
            print(f"   –†–∞–π–æ–Ω—ã: {sum(len(districts) for districts in districts_dict.values())}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–∞–π–ª–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê –í–´–ì–†–£–ó–ö–ò –õ–û–ö–ê–¶–ò–ô")
    print("=" * 50)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–≥—Ä—É–∑–∏—Ç—å –∏–∑ Supabase
    success = export_locations_from_supabase()
    
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º CSV –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    if not success:
        print("\nüîÑ –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
        success = export_from_csv_fallback()
    
    if success:
        print("\n‚úÖ –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìÅ –§–∞–π–ª static_locations.json –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üîÑ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("\n‚ùå –í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ CSV —Ñ–∞–π–ª–∞")

if __name__ == "__main__":
    main()
