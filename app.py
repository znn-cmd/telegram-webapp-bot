import os
import logging
from flask import Flask, request, jsonify
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from supabase import create_client, Client
from dotenv import load_dotenv
import threading
import asyncio
from locales import translations

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase_url = os.getenv("SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_KEY")
supabase: Client = create_client(supabase_url, supabase_key)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# URL –≤–∞—à–µ–≥–æ WebApp (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è)
WEBAPP_URL = "https://aaadvisor-zaicevn.amvera.io/webapp"

LANGUAGE, MENU = range(2)

SUPPORTED_LANGS = ['en', 'de', 'fr', 'tr', 'ru']

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    if not user or not update.message:
        return
    user_lang = getattr(user, 'language_code', 'en')
    if user_lang not in SUPPORTED_LANGS:
        user_lang = 'en'
    try:
        result = supabase.table('users').select('*').eq('telegram_id', user.id).execute()
        user_data = result.data[0] if result.data else None
        if user_data and user_data.get('language'):
            lang = user_data['language']
            welcome_message = translations[lang]['welcome_back']
            await show_menu(update, context, lang)
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω —è–∑—ã–∫
            welcome_message = translations[user_lang]['welcome_new']
            await update.message.reply_text(welcome_message)
            await ask_language(update, context, user_lang)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–æ–≤—ã–π
            if not user_data:
                supabase.table('users').insert({
                    'telegram_id': user.id,
                    'username': user.username,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                    'language': None
                }).execute()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text(translations[user_lang]['welcome_new'])
        await ask_language(update, context, user_lang)

async def ask_language(update: Update, context: ContextTypes.DEFAULT_TYPE, user_lang: str):
    if not update.message:
        return
    lang_buttons = [[translations[user_lang]['language_names'][code]] for code in SUPPORTED_LANGS if code != user_lang]
    lang_buttons.insert(0, [translations[user_lang]['language_names'][user_lang]])
    reply_markup = ReplyKeyboardMarkup(lang_buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(translations[user_lang]['choose_language'], reply_markup=reply_markup)
    context.user_data['awaiting_language'] = True

async def language_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.user_data.get('awaiting_language') or not update.message or not update.effective_user:
        return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –∂–¥–µ–º –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    user = update.effective_user
    text = update.message.text
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    lang = None
    for code in SUPPORTED_LANGS:
        if text.lower() == translations[code]['language_names'][code].lower():
            lang = code
            break
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö
        for name in translations[code]['language_names'].values():
            if text.lower() == name.lower():
                lang = code
                break
    if not lang:
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        user_lang = getattr(user, 'language_code', 'en')
        if user_lang not in SUPPORTED_LANGS:
            user_lang = 'en'
        await ask_language(update, context, user_lang)
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑–µ
    supabase.table('users').update({'language': lang}).eq('telegram_id', user.id).execute()
    await update.message.reply_text(translations[lang]['welcome_new'], reply_markup=ReplyKeyboardRemove())
    await show_menu(update, context, lang)
    context.user_data['awaiting_language'] = False

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, lang: str):
    if not update.message:
        return
    menu_items = translations[lang]['menu_items']
    reply_markup = ReplyKeyboardMarkup([[item] for item in menu_items], resize_keyboard=True)
    await update.message.reply_text(translations[lang]['menu'], reply_markup=reply_markup)

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('awaiting_language') or not update.message or not update.effective_user:
        return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–Ω—é, –µ—Å–ª–∏ –∂–¥–µ–º –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    user = update.effective_user
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    result = supabase.table('users').select('language').eq('telegram_id', user.id).execute()
    lang = 'en'
    if result.data and result.data[0].get('language') in SUPPORTED_LANGS:
        lang = result.data[0]['language']
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
    await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {update.message.text}", reply_markup=ReplyKeyboardMarkup([[item] for item in translations[lang]['menu_items']], resize_keyboard=True))

async def webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp"""
    data = update.effective_message.web_app_data.data
    user = update.effective_user
    
    await update.message.reply_text(
        f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp: {data}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É WebApp –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webapp_data))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, language_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

# Flask –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è WebApp
@app.route('/webapp')
def webapp():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ WebApp"""
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Telegram WebApp Test</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script src="https://telegram.org/js/telegram-web-app.js"></script>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .container {
                background: white;
                border-radius: 20px;
                padding: 30px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                text-align: center;
                max-width: 400px;
                width: 100%;
            }
            .user-info {
                margin: 20px 0;
                padding: 15px;
                background: #f8f9fa;
                border-radius: 10px;
            }
            .btn {
                background: #007bff;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                cursor: pointer;
                font-size: 16px;
                margin: 10px;
                transition: background 0.3s;
            }
            .btn:hover {
                background: #0056b3;
            }
            .btn-success {
                background: #28a745;
            }
            .btn-success:hover {
                background: #1e7e34;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü§ñ Telegram WebApp Test</h1>
            <div class="user-info" id="userInfo">
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...</p>
            </div>
            <button class="btn" onclick="sendData()">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
            <button class="btn btn-success" onclick="closeWebApp()">‚úÖ –ó–∞–∫—Ä—ã—Ç—å WebApp</button>
        </div>

        <script>
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
            let tg = window.Telegram.WebApp;
            tg.expand();
            tg.ready();

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const userInfo = document.getElementById('userInfo');
            if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
                const user = tg.initDataUnsafe.user;
                userInfo.innerHTML = `
                    <h3>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h3>
                    <p><strong>ID:</strong> ${user.id}</p>
                    <p><strong>–ò–º—è:</strong> ${user.first_name}</p>
                    <p><strong>–§–∞–º–∏–ª–∏—è:</strong> ${user.last_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
                    <p><strong>Username:</strong> ${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                    <p><strong>–Ø–∑—ã–∫:</strong> ${user.language_code || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                `;
            } else {
                userInfo.innerHTML = '<p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
            }

            function sendData() {
                const data = {
                    action: 'test',
                    timestamp: new Date().toISOString(),
                    user: tg.initDataUnsafe.user
                };
                
                tg.sendData(JSON.stringify(data));
                alert('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç!');
            }

            function closeWebApp() {
                tg.close();
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            tg.onEvent('mainButtonClicked', function() {
                sendData();
            });
        </script>
    </body>
    </html>
    '''

@app.route('/health')
def health():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return jsonify({"status": "ok", "message": "Telegram WebApp Bot is running"})

import threading

def run_flask():
    app.run(host='0.0.0.0', port=8080, debug=False)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ-–¥–µ–º–æ–Ω–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    main() 