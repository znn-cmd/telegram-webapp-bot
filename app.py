import os
import logging
from flask import Flask, request, jsonify, send_file, send_from_directory
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, Bot
from supabase import create_client, Client
from dotenv import load_dotenv
import threading
import asyncio
from locales import locales
import requests
from datetime import datetime, timedelta
from fpdf import FPDF
from fpdf.enums import XPos, YPos
import tempfile
import os
from dateutil.relativedelta import relativedelta
import random
import string
import json
import math
import re
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±—ç–∫–µ–Ω–¥
import io
import base64
from PIL import Image
import numpy as np

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç openai
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    logger.warning("OpenAI library not available. ChatGPT features will use fallback mode.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase_url = os.getenv("SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_ANON_KEY")
if not supabase_url or not supabase_key:
    raise RuntimeError("SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
supabase: Client = create_client(supabase_url, supabase_key)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# URL –≤–∞—à–µ–≥–æ WebApp (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è)
WEBAPP_URL = "https://aaadvisor-zaicevn.amvera.io/webapp"

# Google Maps API –∫–ª—é—á
GOOGLE_MAPS_API_KEY = "AIzaSyBrDkDpNKNAIyY147MQ78hchBkeyCAxhEw"

# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
#     user = update.effective_user
#     if not user or not hasattr(user, 'id'):
#         await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
#         return
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     try:
#         result = supabase.table('users').select('*').eq('telegram_id', user.id).execute()
        
#         if result.data:
#             # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
#             welcome_message = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {getattr(user, 'first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}! üëã"
#         else:
#             # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
#             welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {getattr(user, 'first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ"
            
#             # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#             supabase.table('users').insert({
#                 'telegram_id': user.id,
#                 'username': getattr(user, 'username', None),
#                 'tg_name': getattr(user, 'first_name', None),
#                 'last_name': getattr(user, 'last_name', None)
#             }).execute()
            
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
#         welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {getattr(user, 'first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ"
    
#     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WebApp
#     keyboard = [
#         [KeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å WebApp", web_app=WebAppInfo(url=WEBAPP_URL))]
#     ]
#     reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
#     await update.message.reply_text(
#         welcome_message,
#         reply_markup=reply_markup
#     )

# async def webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp"""
#     data = update.message.web_app_data.data
#     user = update.effective_user
    
#     await update.message.reply_text(
#         f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp: {data}\n"
#         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {getattr(user, 'first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}"
#     )

# async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
#     user = update.effective_user
#     await update.message.reply_text(
#         f"–ü—Ä–∏–≤–µ—Ç, {getattr(user, 'first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É WebApp –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
#     )

# def main() -> None:
#     """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
#     logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
#     # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
#     application = Application.builder().token(TOKEN).build()

#     # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
#     application.add_handler(CommandHandler("start", start))
#     application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webapp_data))
#     application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

#     # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è WebApp)
#     # application.run_polling(allowed_updates=Update.ALL_TYPES)

# Flask –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è WebApp
@app.route('/webapp')
def webapp():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é WebApp"""
    with open('webapp_main.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_report')
def webapp_report():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    with open('webapp_real_data.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_saved')
def webapp_saved():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    with open('webapp_saved.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_help')
def webapp_help():
    with open('webapp_help.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_profile')
def webapp_profile():
    with open('webapp_profile.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_stats')
def webapp_stats():
    with open('webapp_stats.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_profile_data')
def webapp_profile_data():
    with open('webapp_profile_data.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_balance')
def webapp_balance():
    with open('webapp_balance.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/health')
def health():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return jsonify({"status": "ok", "message": "Telegram WebApp Bot is running"})

@app.route('/logo-sqv.png')
def serve_logo():
    return send_from_directory('.', 'logo-sqv.png')

@app.route('/logo-flt.png')
def serve_logo_flt():
    return send_from_directory('.', 'logo-flt.png')

@app.route('/api/user', methods=['POST'])
def api_user():
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    username = data.get('username')
    first_name = data.get('tg_name')
    last_name = data.get('last_name')
    language_code = data.get('language_code', 'en')
    referal = data.get('referal')  # invite_code –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if not telegram_id:
        return jsonify({'error': 'telegram_id required'}), 400
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    user_result = supabase.table('users').select('*').eq('telegram_id', telegram_id).execute()
    user = user_result.data[0] if user_result.data else None
    if user is not None:
        lang = user.get('language') or (language_code[:2] if language_code[:2] in locales else 'en')
        return jsonify({
            'exists': True,
            'is_new_user': False,
            'language': user.get('language') or lang,
            'language_code': lang,
            'welcome': locales[lang]['welcome_back'],
            'menu': locales[lang]['menu'],
            'name': user.get('name'),
            'tg_name': user.get('tg_name'),
            'last_name': user.get('last_name'),
            'username': user.get('username'),
            'balance': user.get('balance', 0),
            'telegram_id': user.get('telegram_id'),
            'user_status': user.get('user_status', None),
        })
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        lang = language_code[:2] if language_code[:2] in locales else 'en'
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ invite_code
        def generate_invite_code():
            return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ invite_code
        while True:
            invite_code = generate_invite_code()
            code_check = supabase.table('users').select('invite_code').eq('invite_code', invite_code).execute()
            if not code_check.data:
                break
        user_data = {
            'telegram_id': telegram_id,
            'username': username,
            'tg_name': first_name,
            'last_name': last_name,
            'language': lang,
            'balance': 0,
            'invite_code': invite_code
        }
        if referal:
            user_data['referal'] = referal
        supabase.table('users').insert(user_data).execute()
        return jsonify({
            'exists': False,
            'is_new_user': True,
            'language': lang,
            'language_code': lang,
            'welcome': locales[lang]['welcome_new'],
            'choose_language': locales[lang]['choose_language'],
            'languages': locales[lang]['language_names'],
            'balance': 0,
            'telegram_id': telegram_id,
            'invite_code': invite_code
        })

@app.route('/api/user_profile', methods=['POST'])
def api_user_profile():
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    if not telegram_id:
        return jsonify({'error': 'telegram_id required'}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_data = {}
    for field in ['first_name', 'last_name', 'phone', 'email', 'website', 'company', 'position', 'about_me']:
        if field in data:
            update_data[field] = data[field]
    
    try:
        if update_data:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            supabase.table('users').update(update_data).eq('telegram_id', telegram_id).execute()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        result = supabase.table('users').select('first_name, last_name, photo_url, phone, email, website, company, position, about_me').eq('telegram_id', telegram_id).execute()
        if result.data and len(result.data) > 0:
            return jsonify({'success': True, 'profile': result.data[0]})
        else:
            return jsonify({'error': 'User not found'}), 404
    except Exception as e:
        logger.error(f"Error updating/fetching user profile: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/set_language', methods=['POST'])
def api_set_language():
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    language = data.get('language')
    if not language:
        return jsonify({'error': 'language required'}), 400
    if not telegram_id or not language:
        return jsonify({'error': 'telegram_id and language required'}), 400
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    supabase.table('users').update({'language': language}).eq('telegram_id', telegram_id).execute()
    return jsonify({'ok': True})

@app.route('/api/menu', methods=['POST'])
def api_menu():
    data = request.json or {}
    language = data.get('language', 'en')
    if language not in locales:
        language = 'en'
    return jsonify({'menu': locales[language]['menu']})

@app.route('/api/check_admin_status', methods=['POST'])
def api_check_admin_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è telegram_id: {telegram_id_raw}")
    
    if telegram_id_raw is None:
        logger.error("‚ùå telegram_id –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç telegram_id: {telegram_id_raw}")
        return jsonify({'error': 'Invalid telegram_id'}), 400
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–ª—è telegram_id: {telegram_id}")
        user_result = supabase.table('users').select('user_status').eq('telegram_id', telegram_id).execute()
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {len(user_result.data) if user_result.data else 0} –∑–∞–ø–∏—Å–µ–π")
        
        if user_result.data and len(user_result.data) > 0:
            user_status = user_result.data[0].get('user_status')
            is_admin = user_status == 'admin' if user_status else False
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: user_status={user_status}, is_admin={is_admin}")
            logger.info(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º user_status='{user_status}' == 'admin' = {user_status == 'admin'}")
            return jsonify({
                'success': True,
                'is_admin': is_admin,
                'user_status': user_status
            })
        else:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è telegram_id: {telegram_id}")
            return jsonify({'error': 'User not found'}), 404
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/geocode', methods=['POST'])
def api_geocode():
    """–ì–µ–æ–∫–æ–¥–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Google Maps API —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    data = request.json or {}
    address = data.get('address')
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info("=" * 60)
    logger.info("üîç –ù–ê–ß–ê–õ–û –ì–ï–û–ö–û–î–ò–ù–ì–ê –ê–î–†–ï–°–ê")
    logger.info("=" * 60)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å: '{address}'")
    
    if not address:
        logger.error("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        return jsonify({'error': 'Address required'}), 400
    
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ Google Maps Geocoding API
        url = f"https://maps.googleapis.com/maps/api/geocode/json"
        params = {
            'address': address,
            'key': GOOGLE_MAPS_API_KEY
        }
        
        logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Google Maps API: {url}")
        logger.info(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: address='{address}', key='{GOOGLE_MAPS_API_KEY[:10]}...'")
        
        try:
            response = requests.get(url, params=params, timeout=30)
            logger.info(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Google Maps API: {response.status_code}")
        except requests.exceptions.Timeout:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google Maps API (30 —Å–µ–∫—É–Ω–¥)")
            return jsonify({'error': 'Google Maps API timeout'}), 500
        except requests.exceptions.ConnectionError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google Maps API: {e}")
            return jsonify({'error': 'Google Maps API connection error'}), 500
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Google Maps API: {e}")
            return jsonify({'error': 'Google Maps API request error'}), 500
        
        if response.status_code != 200:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –æ—Ç Google Maps API: {response.status_code}")
            logger.error(f"üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return jsonify({'error': 'Google Maps API error'}), 500
        
        result = response.json()
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Google Maps: {result.get('status')}")
        
        if result['status'] == 'OK' and result['results']:
            location = result['results'][0]['geometry']['location']
            formatted_address = result['results'][0]['formatted_address']
            
            logger.info("‚úÖ Google Maps API –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç")
            logger.info(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lat={location['lat']}, lng={location['lng']}")
            logger.info(f"üè† –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {formatted_address}")
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ Google Places API
            logger.info("=" * 60)
            logger.info("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–ê GOOGLE PLACES API")
            logger.info("=" * 60)
            logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: {address}")
            logger.info(f"Formatted address: {formatted_address}")
            logger.info(f"Lat: {location['lat']}, Lng: {location['lng']}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞ –æ—Ç Google
            logger.info("\nüìã –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞ –æ—Ç Google:")
            for i, component in enumerate(result['results'][0]['address_components']):
                logger.info(f"  {i+1}. {component.get('long_name', '')} ({component.get('short_name', '')}) - Types: {component.get('types', [])}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ Google –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª
            google_components = [comp.get('long_name', '') for comp in result['results'][0]['address_components']]
            address_parts = address.split(',')
            first_part = address_parts[0].strip() if address_parts else ""
            
            logger.info(f"\nüîç –ê–ù–ê–õ–ò–ó:")
            logger.info(f"–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞: '{first_part}'")
            logger.info(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Google: {google_components}")
            if first_part not in google_components:
                logger.info(f"‚ö†Ô∏è  '{first_part}' –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö Google!")
            else:
                logger.info(f"‚úÖ '{first_part}' –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö Google")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Places API
            logger.info("üîß –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            location_components = extract_location_components(result['results'][0]['address_components'], address)
            logger.info(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {location_components}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Nominatim
            logger.info("üåê –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Nominatim...")
            nominatim_data = get_nominatim_location(address)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Google –∏ Nominatim
            if nominatim_data:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Nominatim: {nominatim_data}")
                # –ï—Å–ª–∏ Google –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª district, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ Nominatim
                if not location_components.get('district') and nominatim_data.get('district'):
                    location_components['district'] = nominatim_data['district']
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω district –∏–∑ Nominatim: {nominatim_data['district']}")
                
                # –ï—Å–ª–∏ Google –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª county, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ Nominatim
                if not location_components.get('county') and nominatim_data.get('county'):
                    location_components['county'] = nominatim_data['county']
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω county –∏–∑ Nominatim: {nominatim_data['county']}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Nominatim –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                location_components['nominatim_data'] = nominatim_data
            else:
                logger.info("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ Nominatim –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            logger.info("üîç –ò—â–µ–º –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            location_codes = find_location_codes_from_components(location_components)
            
            if location_codes:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π: {location_codes}")
            else:
                logger.warning("‚ö†Ô∏è –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            logger.info("=" * 60)
            logger.info("‚úÖ –ì–ï–û–ö–û–î–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
            logger.info("=" * 60)
            
            return jsonify({
                'success': True,
                'lat': location['lat'],
                'lng': location['lng'],
                'formatted_address': formatted_address,
                'location_components': location_components,
                'location_codes': location_codes
            })
        else:
            logger.error(f"‚ùå Google Maps API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.get('status')}")
            logger.error(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
            if result.get('error_message'):
                logger.error(f"üö® –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {result['error_message']}")
            
            return jsonify({
                'success': False,
                'error': f"Address not found. Status: {result.get('status')}"
            })
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–µ: {e}")
        logger.error(f"üìÑ Traceback: ", exc_info=True)
        return jsonify({'error': 'Geocoding service error'}), 500

@app.route('/api/validate_bedrooms', methods=['POST'])
def api_validate_bedrooms():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω"""
    data = request.json or {}
    bedrooms = data.get('bedrooms')
    if bedrooms is None:
        return jsonify({'valid': False, 'error': 'Bedrooms must be a number'})
    try:
        bedrooms_int = int(bedrooms)
        if 1 <= bedrooms_int <= 10:
            return jsonify({'valid': True})
        else:
            return jsonify({'valid': False, 'error': 'Bedrooms must be between 1 and 10'})
    except (ValueError, TypeError):
        return jsonify({'valid': False, 'error': 'Bedrooms must be a number'})

@app.route('/api/validate_price', methods=['POST'])
def api_validate_price():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã"""
    data = request.json or {}
    price = data.get('price')
    if price is None:
        return jsonify({'valid': False, 'error': 'Price must be a number'})
    try:
        price_float = float(price)
        if price_float > 0:
            return jsonify({'valid': True})
        else:
            return jsonify({'valid': False, 'error': 'Price must be positive'})
    except (ValueError, TypeError):
        return jsonify({'valid': False, 'error': 'Price must be a number'})

@app.route('/api/generate_report', methods=['POST'])
def api_generate_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    data = request.json or {}
    address = data.get('address')
    bedrooms = data.get('bedrooms')
    price = data.get('price')
    language = data.get('language', 'en')
    lat = data.get('lat')
    lng = data.get('lng')
    telegram_id = data.get('telegram_id')
    location_codes = data.get('location_codes')  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    
    if not all([address, bedrooms, price]):
        return jsonify({'error': 'Missing required data'}), 400
    
    try:
        logger.info(f"üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address}")
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π: {location_codes}")
        
        # –ï—Å–ª–∏ –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –∏–∑ –∞–¥—Ä–µ—Å–∞
        if not location_codes:
            logger.info("üîç –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∞–¥—Ä–µ—Å–∞")
            location_codes = get_location_codes_from_address(address)
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –∏–∑ –∞–¥—Ä–µ—Å–∞: {location_codes}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        market_data = None
        if location_codes:
            logger.info(f"üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –∫–æ–¥–æ–≤: {location_codes}")
            market_data = get_market_data_by_location_ids(location_codes)
            if market_data:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞: {len(market_data)} —Å–µ–∫—Ü–∏–π")
            else:
                logger.warning("‚ùå –î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            logger.warning("‚ùå –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –Ω–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç–µ
        location_components = data.get('location_components')
        if location_components:
            format_simple_report.last_location_components = location_components
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–æ–∫–∞—Ü–∏—è —Ç—É—Ä–µ—Ü–∫–æ–π
        is_turkish = False
        currency_rate = None
        currency_info = ""
        
        if location_components:
            from currency_functions import is_turkish_location, get_current_currency_rate, convert_turkish_data_to_eur, format_currency_info
            
            is_turkish = is_turkish_location(location_components)
            logger.info(f"üåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞—Ü–∏–∏: {'–¢—É—Ä—Ü–∏—è' if is_turkish else '–î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞'}")
            
            if is_turkish:
                logger.info("üáπüá∑ –õ–æ–∫–∞—Ü–∏—è –≤ –¢—É—Ä—Ü–∏–∏, –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ")
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç
                currency_rate = get_current_currency_rate()
                if currency_rate:
                    logger.info(f"üí± –ü–æ–ª—É—á–µ–Ω –∫—É—Ä—Å –≤–∞–ª—é—Ç: {currency_rate}")
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –≤ –µ–≤—Ä–æ
                    if market_data:
                        market_data = convert_turkish_data_to_eur(market_data, currency_rate)
                        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –µ–≤—Ä–æ")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç
                    currency_info = format_currency_info(currency_rate, language)
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin = False
        if telegram_id:
            try:
                user_result = supabase.table('users').select('user_status').eq('telegram_id', telegram_id).execute()
                if user_result.data and user_result.data[0].get('user_status') == 'admin':
                    is_admin = True
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        format_simple_report.is_admin = is_admin
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        report_text = format_simple_report(address, bedrooms, price, location_codes, language, market_data, currency_info)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å telegram_id)
        if telegram_id:
            try:
                report_data = {
                    'user_id': telegram_id,
                    'report_type': 'market_analysis',
                    'title': f'–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {address}',
                    'description': f'–û—Ç—á–µ—Ç –ø–æ –∞–¥—Ä–µ—Å—É {address}, {bedrooms} —Å–ø–∞–ª–µ–Ω, —Ü–µ–Ω–∞ {price}',
                    'parameters': {
                        'address': address,
                        'bedrooms': bedrooms,
                        'price': price,
                        'lat': lat,
                        'lng': lng,
                        'location_codes': location_codes,
                        'is_turkish': is_turkish,
                        'currency_rate': currency_rate
                    },
                    'address': address,
                    'latitude': lat,
                    'longitude': lng,
                    'bedrooms': bedrooms,
                    'price_range_min': float(price) * 0.8 if price is not None else None,
                    'price_range_max': float(price) * 1.2 if price is not None else None
                }
                
                # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ telegram_id
                user_result = supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
                if user_result.data:
                    report_data['user_id'] = user_result.data[0]['id']
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
                    supabase.table('user_reports').insert(report_data).execute()
            except Exception as e:
                logger.error(f"Error saving report to database: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        
        return jsonify({
            'success': True,
            'report': {
                'location_codes': location_codes,
                'property_details': {
                    'address': address,
                    'bedrooms': bedrooms,
                    'price': price
                },
                'is_turkish': is_turkish,
                'currency_info': currency_info
            },
            'report_text': report_text
        })
        
    except Exception as e:
        logger.error(f"Error generating report: {e}")
        return jsonify({'error': 'Internal error'}), 500

def get_location_codes_from_address(address):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã locations –ø–æ –∞–¥—Ä–µ—Å—É"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞
        location_info = extract_location_from_address(address)
        if not location_info:
            return None
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if location_info.get('country_name') == 'Turkey':
            location_info['country_name'] = 'T√ºrkiye'
        
        logger.info(f"–ò—â–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ –±–∞–∑–µ: {location_info}")
        
        # –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ locations - —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        query = supabase.table('locations').select('*')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
        if location_info.get('city_name'):
            query = query.eq('city_name', location_info['city_name'])
        if location_info.get('county_name'):
            query = query.eq('county_name', location_info['county_name'])
        if location_info.get('district_name'):
            query = query.eq('district_name', location_info['district_name'])
        if location_info.get('country_name'):
            query = query.eq('country_name', location_info['country_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ district_name –∏ city_name
        logger.info("–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ district_name –∏ city_name")
        query = supabase.table('locations').select('*')
        if location_info.get('district_name'):
            query = query.eq('district_name', location_info['district_name'])
        if location_info.get('city_name'):
            query = query.eq('city_name', location_info['city_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –ø–æ district_name –∏ city_name: {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ district_name
        logger.info("–ò—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ district_name")
        query = supabase.table('locations').select('*')
        if location_info.get('district_name'):
            query = query.eq('district_name', location_info['district_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –ø–æ district_name: {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        logger.warning(f"–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è: {location_info}")
        return None
            
    except Exception as e:
        logger.error(f"Error getting location codes: {e}")
        return None

def format_simple_report(address, bedrooms, price, location_codes, language='en', market_data=None, currency_info=""):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç—á—ë—Ç–∞ —Å –∫–æ–¥–∞–º–∏ –ª–æ–∫–∞—Ü–∏–π –∏ –¥–∞–Ω–Ω—ã–º–∏ —Ä—ã–Ω–∫–∞"""
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
    def format_price(price):
        return f"‚Ç¨{price:.2f}".replace('.00', '').replace('.', ',')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report_lines = [
        f"–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤ —Ä–∞–¥–∏—É—Å–µ 5 –∫–º:",
        "",
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    if currency_info:
        report_lines.extend([
            "=== –ö–£–†–° –í–ê–õ–Æ–¢ ===",
            currency_info,
            "",
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    logger.info(f"üìã –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤ –ª–æ–∫–∞—Ü–∏–π: {location_codes}")
    if location_codes:
        logger.info(f"‚úÖ –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç")
        report_lines.extend([
            "=== –ö–û–î–´ –õ–û–ö–ê–¶–ò–ô (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) ===",
            f"–°—Ç—Ä–∞–Ω–∞: {location_codes.get('country_name', '–Ω/–¥')} (ID: {location_codes.get('country_id', '–Ω/–¥')})",
            f"–ì–æ—Ä–æ–¥: {location_codes.get('city_name', '–Ω/–¥')} (ID: {location_codes.get('city_id', '–Ω/–¥')})",
            f"–†–∞–π–æ–Ω: {location_codes.get('district_name', '–Ω/–¥')} (ID: {location_codes.get('district_id', '–Ω/–¥')})",
            f"–û–∫—Ä—É–≥: {location_codes.get('county_name', '–Ω/–¥')} (ID: {location_codes.get('county_id', '–Ω/–¥')})",
            "",
        ])
    else:
        logger.warning(f"‚ùå –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É")
        report_lines.extend([
            "=== –ö–û–î–´ –õ–û–ö–ê–¶–ò–ô (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) ===",
            "–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            "",
        ])
    
    report_lines.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Google Places API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    report_lines.extend([
        "=== –î–ê–ù–ù–´–ï GOOGLE PLACES API (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) ===",
        f"Formatted Address: {address}",
    ])
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–æ–∫–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
    if hasattr(format_simple_report, 'last_location_components'):
        components = format_simple_report.last_location_components
        if components:
            report_lines.extend([
                f"Country: {components.get('country', '–Ω/–¥')}",
                f"Country Code: {components.get('country_code', '–Ω/–¥')}",
                f"City: {components.get('city', '–Ω/–¥')}",
                f"District: {components.get('district', '–Ω/–¥')}",
                f"County: {components.get('county', '–Ω/–¥')}",
                f"Postal Code: {components.get('postal_code', '–Ω/–¥')}",
            ])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ Nominatim, –µ—Å–ª–∏ –µ—Å—Ç—å
            if components.get('nominatim_data'):
                nominatim = components['nominatim_data']
                report_lines.extend([
                    "",
                    "=== –î–ê–ù–ù–´–ï NOMINATIM (OpenStreetMap) (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) ===",
                    f"Display Name: {nominatim.get('display_name', '–Ω/–¥')}",
                    f"Country: {nominatim.get('country', '–Ω/–¥')}",
                    f"Country Code: {nominatim.get('country_code', '–Ω/–¥')}",
                    f"City: {nominatim.get('city', '–Ω/–¥')}",
                    f"District: {nominatim.get('district', '–Ω/–¥')}",
                    f"County: {nominatim.get('county', '–Ω/–¥')}",
                    f"Postal Code: {nominatim.get('postal_code', '–Ω/–¥')}",
                    f"Road: {nominatim.get('road', '–Ω/–¥')}",
                    f"House Number: {nominatim.get('house_number', '–Ω/–¥')}",
                ])
    
    report_lines.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –æ—Ç—á–µ—Ç–∞
    if market_data:
        # –û–±—â–∏–π —Ç—Ä–µ–Ω–¥ (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã general_data)
        if market_data.get('general_data'):
            general = market_data['general_data']
            report_lines.extend([
                "=== –û–ë–©–ò–ô –¢–†–ï–ù–î ===",
                f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏, –º¬≤: ‚Ç¨{general.get('unit_price_for_sale', '–Ω/–¥')}",
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏, –º¬≤: ‚Ç¨{general.get('min_unit_price_for_sale', '–Ω/–¥')}",
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{general.get('max_unit_price_for_sale', '–Ω/–¥')}",
                f"–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å –ø—Ä–æ–¥–∞–∂–∏: {general.get('comparable_area_for_sale', '–Ω/–¥')} –º¬≤",
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {general.get('count_for_sale', '–Ω/–¥')}",
                f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{general.get('unit_price_for_rent', '–Ω/–¥')}",
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{general.get('min_unit_price_for_rent', '–Ω/–¥')}",
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{general.get('max_unit_price_for_rent', '–Ω/–¥')}",
                f"–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å –∞—Ä–µ–Ω–¥—ã: {general.get('comparable_area_for_rent', '–Ω/–¥')} –º¬≤",
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É: {general.get('count_for_rent', '–Ω/–¥')}",
                f"–¶–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{general.get('price_for_sale', '–Ω/–¥')}",
                f"–¶–µ–Ω–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{general.get('price_for_rent', '–Ω/–¥')}",
                f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {general.get('average_age_for_sale', '–Ω/–¥')} –ª–µ—Ç",
                f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {general.get('average_age_for_rent', '–Ω/–¥')} –ª–µ—Ç",
                f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {general.get('listing_period_for_sale', '–Ω/–¥')} –¥–Ω–µ–π",
                f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {general.get('listing_period_for_rent', '–Ω/–¥')} –¥–Ω–µ–π",
                f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {general.get('yield', '–Ω/–¥')}%",
                "",
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Ç—Ä–µ–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if hasattr(format_simple_report, 'is_admin') and format_simple_report.is_admin:
                report_lines.append(f"–î–∞—Ç–∞ —Ç—Ä–µ–Ω–¥–∞: {general.get('trend_date', '–Ω/–¥')}")
                report_lines.append("")
    
        # –¢—Ä–µ–Ω–¥ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ø–∞–ª–µ–Ω (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã house_type_data)
        if market_data.get('house_type_data'):
            house_type_data = market_data['house_type_data']
            report_lines.extend([
                "=== –¢–†–ï–ù–î –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –°–ü–ê–õ–ï–ù ===",
            ])
            
            # –ï—Å–ª–∏ house_type_data —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ listing_type)
            if isinstance(house_type_data, list):
                for record in house_type_data:
                    listing_type = record.get('listing_type', '–Ω/–¥')
                    report_lines.extend([
                        f"--- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω: {listing_type} ---",
                        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{record.get('unit_price_for_sale', '–Ω/–¥')}",
                        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{record.get('min_unit_price_for_sale', '–Ω/–¥')}",
                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{record.get('max_unit_price_for_sale', '–Ω/–¥')}",
                        f"–°–æ–ø–æ—Å—Ç–∞–≤–∏–º–∞—è –ø–ª–æ—â–∞–¥—å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {record.get('comparable_area_for_sale', '–Ω/–¥')} –º¬≤",
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {record.get('count_for_sale', '–Ω/–¥')}",
                        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{record.get('unit_price_for_rent', '–Ω/–¥')}",
                        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{record.get('min_unit_price_for_rent', '–Ω/–¥')}",
                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{record.get('max_unit_price_for_rent', '–Ω/–¥')}",
                        f"–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å –∞—Ä–µ–Ω–¥—ã: {record.get('comparable_area_for_rent', '–Ω/–¥')} –º¬≤",
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É: {record.get('count_for_rent', '–Ω/–¥')}",
                        f"–¶–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{record.get('price_for_sale', '–Ω/–¥')}",
                        f"–¶–µ–Ω–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{record.get('price_for_rent', '–Ω/–¥')}",
                        f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {record.get('average_age_for_sale', '–Ω/–¥')} –ª–µ—Ç",
                        f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {record.get('average_age_for_rent', '–Ω/–¥')} –ª–µ—Ç",
                        f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {record.get('listing_period_for_sale', '–Ω/–¥')} –¥–Ω–µ–π",
                        f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {record.get('listing_period_for_rent', '–Ω/–¥')} –¥–Ω–µ–π",
                        f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {record.get('yield', '–Ω/–¥')}%",
                        "",
                    ])
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å
                listing_type = house_type_data.get('listing_type', '–Ω/–¥')
                report_lines.extend([
                    f"--- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω: {listing_type} ---",
                    f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{house_type_data.get('unit_price_for_sale', '–Ω/–¥')}",
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{house_type_data.get('min_unit_price_for_sale', '–Ω/–¥')}",
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{house_type_data.get('max_unit_price_for_sale', '–Ω/–¥')}",
                    f"–°–æ–ø–æ—Å—Ç–∞–≤–∏–º–∞—è –ø–ª–æ—â–∞–¥—å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {house_type_data.get('comparable_area_for_sale', '–Ω/–¥')} –º¬≤",
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {house_type_data.get('count_for_sale', '–Ω/–¥')}",
                    f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{house_type_data.get('unit_price_for_rent', '–Ω/–¥')}",
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{house_type_data.get('min_unit_price_for_rent', '–Ω/–¥')}",
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{house_type_data.get('max_unit_price_for_rent', '–Ω/–¥')}",
                    f"–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å –∞—Ä–µ–Ω–¥—ã: {house_type_data.get('comparable_area_for_rent', '–Ω/–¥')} –º¬≤",
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É: {house_type_data.get('count_for_rent', '–Ω/–¥')}",
                    f"–¶–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{house_type_data.get('price_for_sale', '–Ω/–¥')}",
                    f"–¶–µ–Ω–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{house_type_data.get('price_for_rent', '–Ω/–¥')}",
                    f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {house_type_data.get('average_age_for_sale', '–Ω/–¥')} –ª–µ—Ç",
                    f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {house_type_data.get('average_age_for_rent', '–Ω/–¥')} –ª–µ—Ç",
                    f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {house_type_data.get('listing_period_for_sale', '–Ω/–¥')} –¥–Ω–µ–π",
                    f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {house_type_data.get('listing_period_for_rent', '–Ω/–¥')} –¥–Ω–µ–π",
                    f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {house_type_data.get('yield', '–Ω/–¥')}%",
                "",
            ])
        
        # –¢—Ä–µ–Ω–¥ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –æ–±—ä–µ–∫—Ç–∞ (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã age_data)
        if market_data.get('age_data'):
            age_data = market_data['age_data']
            report_lines.extend([
                "=== –¢–†–ï–ù–î –ü–û –í–û–ó–†–ê–°–¢–£ –û–ë–™–ï–ö–¢–ê ===",
            ])
            
            # –ï—Å–ª–∏ age_data —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ listing_type)
            if isinstance(age_data, list):
                for record in age_data:
                    listing_type = record.get('listing_type', '–Ω/–¥')
                    report_lines.extend([
                        f"--- –í–æ–∑—Ä–∞—Å—Ç –∑–¥–∞–Ω–∏—è: {listing_type} ---",
                        f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {record.get('average_age_for_sale', '–Ω/–¥')} –ª–µ—Ç",
                        f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É: {record.get('average_age_for_rent', '–Ω/–¥')} –ª–µ—Ç",
                        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{record.get('unit_price_for_sale', '–Ω/–¥')}",
                        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{record.get('min_unit_price_for_sale', '–Ω/–¥')}",
                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{record.get('max_unit_price_for_sale', '–Ω/–¥')}",
                        f"–°–æ–ø–æ—Å—Ç–∞–≤–∏–º–∞—è –ø–ª–æ—â–∞–¥—å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {record.get('comparable_area_for_sale', '–Ω/–¥')} –º¬≤",
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {record.get('count_for_sale', '–Ω/–¥')}",
                        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: ‚Ç¨{record.get('unit_price_for_rent', '–Ω/–¥')}",
                        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: ‚Ç¨{record.get('min_unit_price_for_rent', '–Ω/–¥')}",
                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: ‚Ç¨{record.get('max_unit_price_for_rent', '–Ω/–¥')}",
                        f"–°–æ–ø–æ—Å—Ç–∞–≤–∏–º–∞—è –ø–ª–æ—â–∞–¥—å –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {record.get('comparable_area_for_rent', '–Ω/–¥')} –º¬≤",
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É: {record.get('count_for_rent', '–Ω/–¥')}",
                        f"–¶–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{record.get('price_for_sale', '–Ω/–¥')}",
                        f"–¶–µ–Ω–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: ‚Ç¨{record.get('price_for_rent', '–Ω/–¥')}",
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏: {record.get('price_change_sale', '–Ω/–¥')}%",
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞—Ä–µ–Ω–¥—ã: {record.get('price_change_rent', '–Ω/–¥')}%",
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤ –ø—Ä–æ–¥–∞–∂–∏: {record.get('stock_change_sale', '–Ω/–¥')}%",
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤ –∞—Ä–µ–Ω–¥—ã: {record.get('stock_change_rent', '–Ω/–¥')}%",
                        f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–æ–≤ –ø—Ä–æ–¥–∞–∂–∏: {record.get('stock_ratio_sale', '–Ω/–¥')}",
                        f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–æ–≤ –∞—Ä–µ–Ω–¥—ã: {record.get('stock_ratio_rent', '–Ω/–¥')}",
                        f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {record.get('listing_period_for_sale', '–Ω/–¥')} –¥–Ω–µ–π",
                        f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {record.get('listing_period_for_rent', '–Ω/–¥')} –¥–Ω–µ–π",
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤: {record.get('property_count', '–Ω/–¥')}",
                        f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {record.get('yield', '–Ω/–¥')}%",
                        f"–î–∞—Ç–∞ —Ç—Ä–µ–Ω–¥–∞: {record.get('trend_date', '–Ω/–¥')}",
                        "",
                    ])
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å
                listing_type = age_data.get('listing_type', '–Ω/–¥')
                report_lines.extend([
                    f"--- –í–æ–∑—Ä–∞—Å—Ç –∑–¥–∞–Ω–∏—è: {listing_type} ---",
                    f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {age_data.get('average_age_for_sale', '–Ω/–¥')} –ª–µ—Ç",
                    f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É: {age_data.get('average_age_for_rent', '–Ω/–¥')} –ª–µ—Ç",
                    f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{age_data.get('unit_price_for_sale', '–Ω/–¥')}",
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{age_data.get('min_unit_price_for_sale', '–Ω/–¥')}",
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{age_data.get('max_unit_price_for_sale', '–Ω/–¥')}",
                    f"–°–æ–ø–æ—Å—Ç–∞–≤–∏–º–∞—è –ø–ª–æ—â–∞–¥—å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {age_data.get('comparable_area_for_sale', '–Ω/–¥')} –º¬≤",
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {age_data.get('count_for_sale', '–Ω/–¥')}",
                    f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{age_data.get('unit_price_for_rent', '–Ω/–¥')}",
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{age_data.get('min_unit_price_for_rent', '–Ω/–¥')}",
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{age_data.get('max_unit_price_for_rent', '–Ω/–¥')}",
                    f"–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å –∞—Ä–µ–Ω–¥—ã: {age_data.get('comparable_area_for_rent', '–Ω/–¥')} –º¬≤",
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É: {age_data.get('count_for_rent', '–Ω/–¥')}",
                    f"–¶–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{age_data.get('price_for_sale', '–Ω/–¥')}",
                    f"–¶–µ–Ω–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{age_data.get('price_for_rent', '–Ω/–¥')}",
                    f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {age_data.get('listing_period_for_sale', '–Ω/–¥')} –¥–Ω–µ–π",
                    f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {age_data.get('listing_period_for_rent', '–Ω/–¥')} –¥–Ω–µ–π",
                    f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {age_data.get('yield', '–Ω/–¥')}%",
                "",
            ])
        
        # –¢—Ä–µ–Ω–¥ –ø–æ —ç—Ç–∞–∂—É –æ–±—ä–µ–∫—Ç–∞ (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã floor_segment_data)
        if market_data.get('floor_segment_data'):
            floor_data = market_data['floor_segment_data']
            report_lines.extend([
                "=== –¢–†–ï–ù–î –ü–û –≠–¢–ê–ñ–£ –û–ë–™–ï–ö–¢–ê ===",
            ])
            
            # –ï—Å–ª–∏ floor_data —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ listing_type)
            if isinstance(floor_data, list):
                for record in floor_data:
                    listing_type = record.get('listing_type', '–Ω/–¥')
                    report_lines.extend([
                        f"--- –≠—Ç–∞–∂ –æ–±—ä–µ–∫—Ç–∞: {listing_type} ---",
                        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{record.get('unit_price_for_sale', '–Ω/–¥')}",
                        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{record.get('min_unit_price_for_sale', '–Ω/–¥')}",
                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{record.get('max_unit_price_for_sale', '–Ω/–¥')}",
                        f"–°–æ–ø–æ—Å—Ç–∞–≤–∏–º–∞—è –ø–ª–æ—â–∞–¥—å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {record.get('comparable_area_for_sale', '–Ω/–¥')} –º¬≤",
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {record.get('count_for_sale', '–Ω/–¥')}",
                        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{record.get('unit_price_for_rent', '–Ω/–¥')}",
                        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{record.get('min_unit_price_for_rent', '–Ω/–¥')}",
                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{record.get('max_unit_price_for_rent', '–Ω/–¥')}",
                        f"–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å –∞—Ä–µ–Ω–¥—ã: {record.get('comparable_area_for_rent', '–Ω/–¥')} –º¬≤",
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É: {record.get('count_for_rent', '–Ω/–¥')}",
                        f"–¶–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{record.get('price_for_sale', '–Ω/–¥')}",
                        f"–¶–µ–Ω–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{record.get('price_for_rent', '–Ω/–¥')}",
                        f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {record.get('average_age_for_sale', '–Ω/–¥')} –ª–µ—Ç",
                        f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {record.get('average_age_for_rent', '–Ω/–¥')} –ª–µ—Ç",
                        f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {record.get('listing_period_for_sale', '–Ω/–¥')} –¥–Ω–µ–π",
                        f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {record.get('listing_period_for_rent', '–Ω/–¥')} –¥–Ω–µ–π",
                        f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {record.get('yield', '–Ω/–¥')}%",
                        "",
                    ])
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å
                listing_type = floor_data.get('listing_type', '–Ω/–¥')
                report_lines.extend([
                    f"--- –≠—Ç–∞–∂ –æ–±—ä–µ–∫—Ç–∞: {listing_type} ---",
                    f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{floor_data.get('unit_price_for_sale', '–Ω/–¥')}",
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{floor_data.get('min_unit_price_for_sale', '–Ω/–¥')}",
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{floor_data.get('max_unit_price_for_sale', '–Ω/–¥')}",
                    f"–°–æ–ø–æ—Å—Ç–∞–≤–∏–º–∞—è –ø–ª–æ—â–∞–¥—å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {floor_data.get('comparable_area_for_sale', '–Ω/–¥')} –º¬≤",
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {floor_data.get('count_for_sale', '–Ω/–¥')}",
                    f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{floor_data.get('unit_price_for_rent', '–Ω/–¥')}",
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{floor_data.get('min_unit_price_for_rent', '–Ω/–¥')}",
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{floor_data.get('max_unit_price_for_rent', '–Ω/–¥')}",
                    f"–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å –∞—Ä–µ–Ω–¥—ã: {floor_data.get('comparable_area_for_rent', '–Ω/–¥')} –º¬≤",
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É: {floor_data.get('count_for_rent', '–Ω/–¥')}",
                    f"–¶–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{floor_data.get('price_for_sale', '–Ω/–¥')}",
                    f"–¶–µ–Ω–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{floor_data.get('price_for_rent', '–Ω/–¥')}",
                    f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {floor_data.get('average_age_for_sale', '–Ω/–¥')} –ª–µ—Ç",
                    f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {floor_data.get('average_age_for_rent', '–Ω/–¥')} –ª–µ—Ç",
                    f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {floor_data.get('listing_period_for_sale', '–Ω/–¥')} –¥–Ω–µ–π",
                    f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {floor_data.get('listing_period_for_rent', '–Ω/–¥')} –¥–Ω–µ–π",
                    f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {floor_data.get('yield', '–Ω/–¥')}%",
                    "",
                ])
        
        # –¢—Ä–µ–Ω–¥ –ø–æ —Ç–∏–ø—É –æ—Ç–æ–ø–ª–µ–Ω–∏—è (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã heating_data)
        if market_data.get('heating_data'):
            heating_data = market_data['heating_data']
            report_lines.extend([
                "=== –¢–†–ï–ù–î –ü–û –¢–ò–ü–£ –û–¢–û–ü–õ–ï–ù–ò–Ø ===",
            ])
            
            # –ï—Å–ª–∏ heating_data —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ listing_type)
            if isinstance(heating_data, list):
                for record in heating_data:
                    listing_type = record.get('listing_type', '–Ω/–¥')
                    report_lines.extend([
                        f"--- –°–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è: {listing_type} ---",
                        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{record.get('unit_price_for_sale', '–Ω/–¥')}",
                        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{record.get('min_unit_price_for_sale', '–Ω/–¥')}",
                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{record.get('max_unit_price_for_sale', '–Ω/–¥')}",
                        f"–°–æ–ø–æ—Å—Ç–∞–≤–∏–º–∞—è –ø–ª–æ—â–∞–¥—å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {record.get('comparable_area_for_sale', '–Ω/–¥')} –º¬≤",
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {record.get('count_for_sale', '–Ω/–¥')}",
                        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{record.get('unit_price_for_rent', '–Ω/–¥')}",
                        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{record.get('min_unit_price_for_rent', '–Ω/–¥')}",
                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{record.get('max_unit_price_for_rent', '–Ω/–¥')}",
                        f"–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å –∞—Ä–µ–Ω–¥—ã: {record.get('comparable_area_for_rent', '–Ω/–¥')} –º¬≤",
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É: {record.get('count_for_rent', '–Ω/–¥')}",
                        f"–¶–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{record.get('price_for_sale', '–Ω/–¥')}",
                        f"–¶–µ–Ω–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{record.get('price_for_rent', '–Ω/–¥')}",
                        f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {record.get('average_age_for_sale', '–Ω/–¥')} –ª–µ—Ç",
                        f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {record.get('average_age_for_rent', '–Ω/–¥')} –ª–µ—Ç",
                        f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {record.get('listing_period_for_sale', '–Ω/–¥')} –¥–Ω–µ–π",
                        f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {record.get('listing_period_for_rent', '–Ω/–¥')} –¥–Ω–µ–π",
                        f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {record.get('yield', '–Ω/–¥')}%",
                        "",
                    ])
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å
                listing_type = heating_data.get('listing_type', '–Ω/–¥')
                report_lines.extend([
                    f"--- –°–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è: {listing_type} ---",
                    f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{heating_data.get('unit_price_for_sale', '–Ω/–¥')}",
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{heating_data.get('min_unit_price_for_sale', '–Ω/–¥')}",
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{heating_data.get('max_unit_price_for_sale', '–Ω/–¥')}",
                    f"–°–æ–ø–æ—Å—Ç–∞–≤–∏–º–∞—è –ø–ª–æ—â–∞–¥—å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {heating_data.get('comparable_area_for_sale', '–Ω/–¥')} –º¬≤",
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {heating_data.get('count_for_sale', '–Ω/–¥')}",
                    f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{heating_data.get('unit_price_for_rent', '–Ω/–¥')}",
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{heating_data.get('min_unit_price_for_rent', '–Ω/–¥')}",
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{heating_data.get('max_unit_price_for_rent', '–Ω/–¥')}",
                    f"–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å –∞—Ä–µ–Ω–¥—ã: {heating_data.get('comparable_area_for_rent', '–Ω/–¥')} –º¬≤",
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É: {heating_data.get('count_for_rent', '–Ω/–¥')}",
                    f"–¶–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{heating_data.get('price_for_sale', '–Ω/–¥')}",
                    f"–¶–µ–Ω–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{heating_data.get('price_for_rent', '–Ω/–¥')}",
                    f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {heating_data.get('average_age_for_sale', '–Ω/–¥')} –ª–µ—Ç",
                    f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {heating_data.get('average_age_for_rent', '–Ω/–¥')} –ª–µ—Ç",
                    f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {heating_data.get('listing_period_for_sale', '–Ω/–¥')} –¥–Ω–µ–π",
                    f"–ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {heating_data.get('listing_period_for_rent', '–Ω/–¥')} –¥–Ω–µ–π",
                    f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {heating_data.get('yield', '–Ω/–¥')}%",
                    "",
                ])
    else:
        report_lines.extend([
            "=== –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê ===",
            "–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏",
                    "",
                ])
        
    return "\n".join(report_lines)

@app.route('/api/search_properties', methods=['POST'])
def api_search_properties():
    """–ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    data = request.json or {}
    property_type = data.get('property_type')
    bedrooms = data.get('bedrooms')
    price_min = data.get('price_min')
    price_max = data.get('price_max')
    city = data.get('city')
    district = data.get('district')
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        
        properties = [
            {
                'id': 1,
                'address': '—É–ª. –ê—Ç–∞—Ç—é—Ä–∫–∞, 123, –ê–Ω—Ç–∞–ª—å—è',
                'bedrooms': bedrooms or 3,
                'price': 250000,
                'property_type': property_type or 'sale',
                'latitude': 36.8969,
                'longitude': 30.7133
            }
        ]
        
        return jsonify({
            'success': True,
            'properties': properties,
            'total': len(properties)
        })
        
    except Exception as e:
        logger.error(f"Error searching properties: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/market_statistics', methods=['POST'])
def api_market_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä—ã–Ω–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É –∏ —Ä–∞–π–æ–Ω—É –∏–∑ Supabase"""
    data = request.json or {}
    city = data.get('city')
    district = data.get('district')
    try:
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É –∏ —Ä–∞–π–æ–Ω—É (case-insensitive)
        filters = []
        if city:
            filters.append(('city', city.lower()))
        if district:
            filters.append(('district', district.lower()))
        # Property sales
        sales_query = supabase.table('property_sales').select('*')
        if city:
            sales_query = sales_query.ilike('city', f'%{city}%')
        if district:
            sales_query = sales_query.ilike('district', f'%{district}%')
        sales = sales_query.execute().data or []
        # Long term rentals
        long_term_query = supabase.table('long_term_rentals').select('*')
        if city:
            long_term_query = long_term_query.ilike('city', f'%{city}%')
        if district:
            long_term_query = long_term_query.ilike('district', f'%{district}%')
        long_term = long_term_query.execute().data or []
        # Short term rentals
        short_term_query = supabase.table('short_term_rentals').select('*')
        if city:
            short_term_query = short_term_query.ilike('city', f'%{city}%')
        if district:
            short_term_query = short_term_query.ilike('district', f'%{district}%')
        short_term = short_term_query.execute().data or []
        # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤
        sqm_prices = [x for x in (s.get('price_per_sqm') for s in sales) if isinstance(x, (int, float))]
        avg_price_per_sqm = sum(sqm_prices) / len(sqm_prices) if sqm_prices else 0
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
        total_properties = len(sales)
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏
        days_on_market = [x for x in (s.get('days_on_market') for s in sales) if isinstance(x, (int, float))]
        avg_days_on_market = sum(days_on_market) / len(days_on_market) if days_on_market else 0
        # –ì–æ–¥–æ–≤–æ–π —Ä–æ—Å—Ç —Ü–µ–Ω (–ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 2 –≥–æ–¥–∞–º, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç—ã)
        price_growth_yoy = 0
        try:
            sales_with_dates = [s for s in sales if s.get('sale_date') and isinstance(s.get('asking_price'), (int, float))]
            if len(sales_with_dates) > 5:
                sales_with_dates.sort(key=lambda x: x['sale_date'])
                first_year = sales_with_dates[0]['sale_date'][:4]
                last_year = sales_with_dates[-1]['sale_date'][:4]
                first_prices = [s['asking_price'] for s in sales_with_dates if s['sale_date'][:4] == first_year and isinstance(s.get('asking_price'), (int, float))]
                last_prices = [s['asking_price'] for s in sales_with_dates if s['sale_date'][:4] == last_year and isinstance(s.get('asking_price'), (int, float))]
                if first_prices and last_prices:
                    price_growth_yoy = (sum(last_prices)/len(last_prices) - sum(first_prices)/len(first_prices)) / (sum(first_prices)/len(first_prices)) * 100
        except Exception:
            price_growth_yoy = 0
        # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã (long_term)
        rental_yield = 0
        try:
            if avg_price_per_sqm > 0 and long_term:
                rents = [x for x in (r.get('monthly_rent') for r in long_term) if isinstance(x, (int, float))]
                avg_rent = sum(rents) / len(rents) if rents else 0
                prices = [x for x in (s.get('asking_price') for s in sales) if isinstance(x, (int, float))]
                avg_price = sum(prices) / len(prices) if prices else 0
                if avg_price > 0:
                    rental_yield = (avg_rent * 12) / avg_price * 100
        except Exception:
            rental_yield = 0
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–∂)
        market_activity = 'high' if total_properties > 100 else 'medium' if total_properties > 20 else 'low'
        # –¢—Ä–µ–Ω–¥ —Ü–µ–Ω (–ø–æ price_growth_yoy)
        price_trend = 'up' if price_growth_yoy > 5 else 'stable' if price_growth_yoy > -2 else 'down'
        stats = {
            'avg_price_per_sqm': round(avg_price_per_sqm, 2),
            'price_growth_yoy': round(price_growth_yoy, 2),
            'total_properties': total_properties,
            'avg_days_on_market': round(avg_days_on_market, 1),
            'rental_yield': round(rental_yield, 2),
            'price_trend': price_trend,
            'market_activity': market_activity
        }
        return jsonify({
            'success': True,
            'statistics': stats
        })
    except Exception as e:
        logger.error(f"Error getting market statistics: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/calculate_roi', methods=['POST'])
def api_calculate_roi():
    data = request.json or {}
    property_type = data.get('property_type')
    purchase_price = data.get('purchase_price')
    purchase_costs = data.get('purchase_costs', 0)
    try:
        purchase_price = float(purchase_price) if purchase_price is not None else 0
        purchase_costs = float(purchase_costs) if purchase_costs is not None else 0
    except (ValueError, TypeError):
        return jsonify({'error': 'Invalid purchase_price or purchase_costs'}), 400

    if property_type == 'short_term':
        avg_nightly_rate = data.get('avg_nightly_rate')
        occupancy_rate = data.get('occupancy_rate', 75)
        try:
            avg_nightly_rate = float(avg_nightly_rate) if avg_nightly_rate is not None else 0
            occupancy_rate = float(occupancy_rate) if occupancy_rate is not None else 75
        except (ValueError, TypeError):
            return jsonify({'error': 'Invalid avg_nightly_rate or occupancy_rate'}), 400
        # –†–∞—Å—á–µ—Ç ROI –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã
        monthly_income = avg_nightly_rate * (occupancy_rate / 100) * 30
        annual_income = monthly_income * 12
        total_investment = purchase_price + purchase_costs
        roi = (annual_income / total_investment) * 100 if total_investment else 0
    elif property_type == 'long_term':
        monthly_rent = data.get('monthly_rent')
        try:
            monthly_rent = float(monthly_rent) if monthly_rent is not None else 0
        except (ValueError, TypeError):
            return jsonify({'error': 'Invalid monthly_rent'}), 400
        # –†–∞—Å—á–µ—Ç ROI –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã
        annual_income = monthly_rent * 12
        total_investment = purchase_price + purchase_costs
        roi = (annual_income / total_investment) * 100 if total_investment else 0
    else:
        return jsonify({'error': 'Invalid property type'}), 400
    
    return jsonify({
        'success': True,
        'roi': round(roi, 2),
        'annual_income': annual_income,
        'total_investment': total_investment
    })

@app.route('/api/similar_properties', methods=['POST'])
def api_similar_properties():
    """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    data = request.json or {}
    address = data.get('address')
    bedrooms = data.get('bedrooms')
    price = data.get('price')
    try:
        price = float(price) if price is not None else 0
    except (ValueError, TypeError):
        price = 0
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        
        similar_properties = [
            {
                'id': 1,
                'address': '—É–ª. –ê—Ç–∞—Ç—é—Ä–∫–∞, 125, –ê–Ω—Ç–∞–ª—å—è',
                'bedrooms': bedrooms,
                'price': price * 0.95,
                'similarity_score': 0.95
            },
            {
                'id': 2,
                'address': '—É–ª. –ê—Ç–∞—Ç—é—Ä–∫–∞, 127, –ê–Ω—Ç–∞–ª—å—è',
                'bedrooms': bedrooms,
                'price': price * 1.05,
                'similarity_score': 0.92
            }
        ]
        
        return jsonify({
            'success': True,
            'properties': similar_properties
        })
        
    except Exception as e:
        logger.error(f"Error finding similar properties: {e}")
        return jsonify({'error': 'Internal error'}), 500

def get_economic_data(country_code='TUR', years_back=10):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–í–í–ü –∏ –∏–Ω—Ñ–ª—è—Ü–∏—è) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã imf_economic_data
    
    Args:
        country_code (str): –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é TUR –¥–ª—è –¢—É—Ä—Ü–∏–∏)
        years_back (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –í–í–ü –∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ª–µ—Ç
        current_year = datetime.now().year
        start_year = current_year - years_back
        
        # –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ imf_economic_data –¥–ª—è –í–í–ü (NGDP_RPCH)
        gdp_query = supabase.table('imf_economic_data').select('*').eq('country_code', country_code).eq('indicator_code', 'NGDP_RPCH').gte('year', start_year).order('year', desc=True)
        gdp_result = gdp_query.execute()
        
        # –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ imf_economic_data –¥–ª—è –∏–Ω—Ñ–ª—è—Ü–∏–∏ (PCPIPCH)
        inflation_query = supabase.table('imf_economic_data').select('*').eq('country_code', country_code).eq('indicator_code', 'PCPIPCH').gte('year', start_year).order('year', desc=True)
        inflation_result = inflation_query.execute()
        
        if not gdp_result.data and not inflation_result.data:
            logger.warning(f"No economic data found for country {country_code}, using fallback data")
            # Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¢—É—Ä—Ü–∏–∏
            fallback_gdp_data = [
                {'year': 2020, 'value': -1.2, 'indicator_code': 'NGDP_RPCH', 'indicator_name': 'GDP growth'},
                {'year': 2021, 'value': 11.4, 'indicator_code': 'NGDP_RPCH', 'indicator_name': 'GDP growth'},
                {'year': 2022, 'value': 5.6, 'indicator_code': 'NGDP_RPCH', 'indicator_name': 'GDP growth'},
                {'year': 2023, 'value': 4.5, 'indicator_code': 'NGDP_RPCH', 'indicator_name': 'GDP growth'},
                {'year': 2024, 'value': 4.1, 'indicator_code': 'NGDP_RPCH', 'indicator_name': 'GDP growth'}
            ]
            
            fallback_inflation_data = [
                {'year': 2020, 'value': 12.3, 'indicator_code': 'PCPIPCH', 'indicator_name': 'Inflation'},
                {'year': 2021, 'value': 19.6, 'indicator_code': 'PCPIPCH', 'indicator_name': 'Inflation'},
                {'year': 2022, 'value': 72.3, 'indicator_code': 'PCPIPCH', 'indicator_name': 'Inflation'},
                {'year': 2023, 'value': 64.8, 'indicator_code': 'PCPIPCH', 'indicator_name': 'Inflation'},
                {'year': 2024, 'value': 58.2, 'indicator_code': 'PCPIPCH', 'indicator_name': 'Inflation'}
            ]
            
            gdp_data = fallback_gdp_data
            inflation_data = fallback_inflation_data
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –í–í–ü
            gdp_data = []
            for record in gdp_result.data:
                year = record.get('year')
                value = record.get('value')
                if year and value is not None:
                    gdp_data.append({
                        'year': year,
                        'value': float(value),  # –†–æ—Å—Ç –í–í–ü –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                        'indicator_code': record.get('indicator_code'),
                        'indicator_name': record.get('indicator_name')
                    })
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏
            inflation_data = []
            for record in inflation_result.data:
                year = record.get('year')
                value = record.get('value')
                if year and value is not None:
                    inflation_data.append({
                        'year': year,
                        'value': float(value),  # –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                        'indicator_code': record.get('indicator_code'),
                        'indicator_name': record.get('indicator_name')
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–æ–¥—É (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)
        gdp_data.sort(key=lambda x: x['year'])
        inflation_data.sort(key=lambda x: x['year'])
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã
        gdp_values = [d['value'] for d in gdp_data]
        inflation_values = [d['value'] for d in inflation_data]
        
        gdp_trend = calculate_trend(gdp_values) if gdp_values else 0
        inflation_trend = calculate_trend(inflation_values) if inflation_values else 0
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        detailed_calculations = generate_detailed_calculations(gdp_data, inflation_data)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        saved_interpretations, saved_calculations = load_interpretations_from_database(country_code)
        
        if saved_interpretations and saved_calculations:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            interpretations = saved_interpretations
            detailed_calculations.update(saved_calculations)
            logger.info(f"Using cached interpretations for {country_code}")
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ChatGPT
            interpretations = {}
            for lang in ['en', 'ru', 'tr', 'fr', 'de']:
                interpretations[lang] = generate_trend_interpretation_with_chatgpt(
                    gdp_trend, inflation_trend, gdp_data, inflation_data, lang
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                save_interpretations_to_database(country_code, interpretations, detailed_calculations)
            except Exception as e:
                logger.warning(f"Could not save interpretations to database: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
        country_name = gdp_result.data[0].get('country_name') if gdp_result.data else 'Turkey'
        
        return {
            'gdp_data': gdp_data,
            'inflation_data': inflation_data,
            'country_code': country_code,
            'country_name': country_name,
            'gdp_trend': gdp_trend,
            'inflation_trend': inflation_trend,
            'latest_gdp': gdp_data[-1] if gdp_data else None,
            'latest_inflation': inflation_data[-1] if inflation_data else None,
            'data_years': f"{start_year}-{current_year}",
            'detailed_calculations': detailed_calculations,
            'interpretations': interpretations
        }
        
    except Exception as e:
        logger.error(f"Error fetching economic data: {e}")
        return {
            'gdp_data': [],
            'inflation_data': [],
            'country_code': country_code,
            'country_name': 'Unknown',
            'error': str(e)
        }

def calculate_trend(values):
    """
    –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ (—Ä–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ) –¥–ª—è —Ä—è–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    
    Args:
        values (list): –°–ø–∏—Å–æ–∫ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        
    Returns:
        float: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–¥–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π = —Ä–æ—Å—Ç, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π = –ø–∞–¥–µ–Ω–∏–µ)
    """
    if len(values) < 2:
        return 0
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        changes = []
        for i in range(1, len(values)):
            if values[i-1] != 0:
                change = (values[i] - values[i-1]) / values[i-1]
                changes.append(change)
        
        return sum(changes) / len(changes) if changes else 0
    except Exception:
        return 0

def create_economic_chart_data(economic_data):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –í–í–ü –∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏
    
    Args:
        economic_data (dict): –î–∞–Ω–Ω—ã–µ –∏–∑ get_economic_data()
        
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    """
    gdp_data = economic_data.get('gdp_data', [])
    inflation_data = economic_data.get('inflation_data', [])
    country_name = economic_data.get('country_name', 'Unknown')
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –í–í–ü (—Ä–æ—Å—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
    gdp_chart = {
        'labels': [str(d['year']) for d in gdp_data],
        'datasets': [
            {
                'label': f'–†–æ—Å—Ç –í–í–ü (%) - {country_name}',
                'data': [d['value'] for d in gdp_data],  # –†–æ—Å—Ç –í–í–ü –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                'borderColor': '#667eea',
                'backgroundColor': 'rgba(102, 126, 234, 0.1)',
                'tension': 0.4,
                'fill': False
            }
        ]
    }
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–Ω—Ñ–ª—è—Ü–∏–∏
    inflation_chart = {
        'labels': [str(d['year']) for d in inflation_data],
        'datasets': [
            {
                'label': f'–ò–Ω—Ñ–ª—è—Ü–∏—è (%) - {country_name}',
                'data': [d['value'] for d in inflation_data],  # –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                'borderColor': '#dc3545',
                'backgroundColor': 'rgba(220, 53, 69, 0.1)',
                'tension': 0.4,
                'fill': False
            }
        ]
    }
    
    return {
        'gdp_chart': gdp_chart,
        'inflation_chart': inflation_chart,
        'trends': {
            'gdp_trend': economic_data.get('gdp_trend', 0),
            'inflation_trend': economic_data.get('inflation_trend', 0)
        },
        'latest': {
            'gdp': economic_data.get('latest_gdp'),
            'inflation': economic_data.get('latest_inflation')
        },
        'country_name': country_name,
        'country_code': economic_data.get('country_code', 'Unknown'),
        'detailed_calculations': economic_data.get('detailed_calculations', {}),
        'interpretations': economic_data.get('interpretations', {})
    }

@app.route('/api/full_report', methods=['POST'])
def api_full_report():
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    address = data.get('address')
    lat = data.get('lat')
    lng = data.get('lng')
    bedrooms = data.get('bedrooms')
    price = data.get('price')
    try:
        price = float(price) if price is not None else 0
    except (ValueError, TypeError):
        price = 0
    try:
        # --- MOCK/DEMO DATA ---
        avg_sqm = 15451.29
        price_growth = 0.042
        short_term_income = 1950
        short_term_net = 1560
        long_term_income = 43000
        long_term_net = 34400
        five_year_growth = 0.23
        alt_deposit = 0.128
        alt_bonds = 0.245
        alt_stocks = 0.382
        alt_reits = 0.427
        inflation = 64.8
        eur_try = 35.2
        eur_try_growth = 0.14
        refi_rate = 45
        gdp_growth = 4.1
        taxes = {
            'transfer_tax': 0.04,
            'stamp_duty': 0.015,
            'notary': 1200,
            'annual_property_tax': 0.001,
            'annual_property_tax_max': 0.006,
            'rental_income_tax': '15-35%',
            'capital_gains_tax': '15-40%'
        }
        risks = [
            '–í–∞–ª—é—Ç–Ω—ã–π: TRY/EUR ‚ñ≤23% –∑–∞ 3 –≥–æ–¥–∞',
            '–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π: –í—ã–±–æ—Ä—ã 2028',
            '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π: –ö–∞—Ä—Ç–∞ –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–π (NASA Earth Data)'
        ]
        liquidity = '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏: 68 –¥–Ω–µ–π'
        district = '–ù–æ–≤—ã–π —Ç—Ä–∞–º–≤–∞–π –¥–æ –ø–ª—è–∂–∞ (2026), –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —à–∫–æ–ª—ã (2027)'
        
        # --- –ü–û–õ–£–ß–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ï –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï ---
        economic_data = get_economic_data('TUR', 10)  # –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–µ—Ç
        chart_data = create_economic_chart_data(economic_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        if economic_data.get('latest_inflation'):
            inflation = economic_data['latest_inflation']['value']
        
        if economic_data.get('latest_gdp'):
            gdp_growth = economic_data['latest_gdp']['value']  # –†–æ—Å—Ç –í–í–ü –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        
        # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ ---
        full_report_data = {
            'object': {
                'address': address,
                'bedrooms': bedrooms,
                'purchase_price': price,
                'avg_price_per_sqm': avg_sqm
            },
            'roi': {
                'short_term': {
                    'monthly_income': short_term_income,
                    'net_income': short_term_net,
                    'five_year_income': 93600,
                    'final_value': price * (1 + five_year_growth),
                    'roi': 81.5
                },
                'long_term': {
                    'annual_income': long_term_income,
                    'net_income': long_term_net,
                    'five_year_income': 172000,
                    'final_value': price * (1 + five_year_growth),
                    'roi': 130.5
                },
                'no_rent': {
                    'final_value': price * (1 + five_year_growth),
                    'roi': 23
                },
                'price_growth': price_growth
            },
            'alternatives': [
                {'name': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –¥–µ–ø–æ–∑–∏—Ç', 'yield': alt_deposit, 'source': 'TCMB API'},
                {'name': '–û–±–ª–∏–≥–∞—Ü–∏–∏ –¢—É—Ä—Ü–∏–∏', 'yield': alt_bonds, 'source': 'Investing.com API'},
                {'name': '–ê–∫—Ü–∏–∏ (BIST30)', 'yield': alt_stocks, 'source': 'Alpha Vantage API'},
                {'name': 'REITs (—Ñ–æ–Ω–¥—ã)', 'yield': alt_reits, 'source': 'Financial Modeling Prep'},
                {'name': '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', 'yield': 0.815, 'source': '–í–∞—à –æ–±—ä–µ–∫—Ç'}
            ],
            'macro': {
                'inflation': inflation,
                'eur_try': eur_try,
                'eur_try_growth': eur_try_growth,
                'refi_rate': refi_rate,
                'gdp_growth': gdp_growth
            },
            'economic_charts': chart_data,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            'taxes': taxes,
            'risks': risks,
            'liquidity': liquidity,
            'district': district,
            'yield': 0.081,
            'price_index': 1.23,
            'mortgage_rate': 0.32,
            'global_house_price_index': 1.12,
            'summary': '–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ IMF.'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        user_result = supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
        user_id = user_result.data[0]['id'] if user_result.data else telegram_id
        
        created_at = datetime.now().isoformat()
        
        report_data = {
            'user_id': user_id,
            'report_type': 'full',
            'title': f'–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: {address}',
            'description': f'–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–¥—Ä–µ—Å—É {address}, {bedrooms} —Å–ø–∞–ª–µ–Ω, —Ü–µ–Ω–∞ {price}',
            'parameters': {
                'address': address,
                'bedrooms': bedrooms,
                'price': price,
                'lat': lat,
                'lng': lng
            },
            'address': address,
            'latitude': lat,
            'longitude': lng,
            'bedrooms': bedrooms,
            'price': price,
            'created_at': created_at,
            'full_report': full_report_data
        }
        result = supabase.table('user_reports').insert(report_data).execute()
        report_id = result.data[0]['id'] if hasattr(result, 'data') and result.data else None
        return jsonify({
            'success': True, 
            'full_report': full_report_data, 
            'created_at': created_at, 
            'from_cache': False,
            'report_id': report_id
        })
    except Exception as e:
        logger.error(f"Error in full_report: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/user_reports', methods=['POST'])
def api_user_reports():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    if not telegram_id:
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        user_result = supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
        if not user_result.data:
            return jsonify({'error': 'User not found'}), 404
        user_id = user_result.data[0]['id']
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        result = supabase.table('user_reports').select('*').eq('user_id', user_id).is_('deleted_at', None).order('created_at', desc=True).execute()
        reports = result.data if hasattr(result, 'data') else result
        return jsonify({'success': True, 'reports': reports})
    except Exception as e:
        logger.error(f"Error fetching user reports: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/delete_user_report', methods=['POST'])
@app.route('/api/delete_report', methods=['POST'])
def api_delete_user_report():
    """Soft delete –æ—Ç—á–µ—Ç–∞: –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç deleted_at"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    report_id = data.get('report_id')
    if not telegram_id or not report_id:
        return jsonify({'error': 'Missing required data'}), 400
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id
        user_result = supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
        if not user_result.data:
            logger.error(f"User with telegram_id {telegram_id} not found for report deletion")
            return jsonify({'error': 'User not found'}), 404
        user_id = user_result.data[0]['id']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –Ω–µ —É–¥–∞–ª—ë–Ω
        report_result = supabase.table('user_reports').select('id').eq('id', report_id).eq('user_id', user_id).is_('deleted_at', None).execute()
        if not report_result.data:
            logger.error(f"Report {report_id} not found or not owned by user_id {user_id} or already deleted")
            return jsonify({'error': 'Report not found or not owned by user'}), 404
        # Soft delete: –≤—ã—Å—Ç–∞–≤–ª—è–µ–º deleted_at
        now = datetime.utcnow().isoformat()
        supabase.table('user_reports').update({'deleted_at': now}).eq('id', report_id).execute()
        return jsonify({'success': True})
    except Exception as e:
        logger.error(f"Error deleting user report: {e}")
        return jsonify({'error': f'Internal error: {str(e)}'}), 500

@app.route('/api/save_object', methods=['POST'])
def api_save_object():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    object_data = data.get('object_data')
    
    if not telegram_id or not object_data:
        return jsonify({'error': 'Missing required data'}), 400
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        user_result = supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
        user_id = user_result.data[0]['id'] if user_result.data else telegram_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        saved_object = {
            'user_id': user_id,
            'object_data': object_data,
            'saved_at': datetime.now().isoformat()
        }
        
        supabase.table('saved_objects').insert(saved_object).execute()
        
        return jsonify({'success': True})
        
    except Exception as e:
        logger.error(f"Error saving object: {e}")
        return jsonify({'error': 'Internal error'}), 500

def send_pdf_to_telegram(pdf_path, telegram_id, bot_token=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF-—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    import requests
    import os
    logger = logging.getLogger(__name__)
    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω
    bot_token = '7215676549:AAFS86JbRCqwzTKQG-dF96JX-C1aWNvBoLo'
    send_url = f'https://api.telegram.org/bot{bot_token}/sendDocument'
    try:
        with open(pdf_path, 'rb') as pdf_file:
            files = {'document': pdf_file}
            data_send = {'chat_id': telegram_id}
            resp = requests.post(send_url, data=data_send, files=files)
            if resp.status_code == 200 and resp.json().get('ok'):
                return 'sent'
            else:
                logger.error(f"Telegram sendDocument error: {resp.text}")
                return f'error: {resp.text}'
    except Exception as e:
        logger.error(f"Error sending PDF via Telegram bot: {e}")
        return f'error: {e}'

@app.route('/api/generate_pdf_report', methods=['POST'])
def api_generate_pdf_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode (DejaVu) –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞"""
    data = request.json or {}
    logger.info(f"PDF request data: {data}")
    report = data.get('report')
    profile = data.get('profile') or {}
    client_name = data.get('client_name')
    report_id = data.get('report_id')
    telegram_id = data.get('telegram_id')
    if not report_id:
        logger.error(f"PDF generation error: report_id not provided. Incoming data: {data}")
        return jsonify({'error': 'report_id required for PDF generation', 'details': data}), 400
    try:
        pdf = FPDF()
        pdf.add_page()
        # –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç—ã DejaVu
        pdf.add_font('DejaVu', '', 'fonts/DejaVuSans.ttf')
        pdf.add_font('DejaVu', 'B', 'fonts/DejaVuSans-Bold.ttf')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–≤–µ—Ä—Ö—É)
        try:
            pdf.image('logo-sqv.png', x=85, y=10, w=40)  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø
            pdf.ln(35)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –ª–æ–≥–æ—Ç–∏–ø–∞
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}")
            pdf.ln(35)  # –û—Ç—Å—Ç—É–ø –¥–∞–∂–µ –µ—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        
        pdf.set_font('DejaVu', 'B', 16)
        if client_name:
            pdf.cell(0, 10, f'–ö–ª–∏–µ–Ω—Ç: {client_name}', new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C')
        pdf.ln(2)
        pdf.cell(0, 10, '–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C')
        pdf.ln(10)
        if report.get('object'):
            pdf.set_font('DejaVu', 'B', 12)
            pdf.cell(0, 10, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ:', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 10)
            obj = report['object']
            pdf.cell(0, 8, f'–ê–¥—Ä–µ—Å: {obj.get("address", "–ù–µ —É–∫–∞–∑–∞–Ω")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f'–°–ø–∞–ª–µ–Ω: {obj.get("bedrooms", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f'–¶–µ–Ω–∞: ‚Ç¨{obj.get("purchase_price", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ü–µ—á–∞—Ç–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –æ—Ç—á—ë—Ç–∞ (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏)
        # ROI –∞–Ω–∞–ª–∏–∑
        if 'roi' in report:
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(200, 10, text="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (ROI):", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            pdf.cell(200, 8, text=f"–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞: ROI {report['roi']['short_term']['roi']}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 8, text=f"–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞: ROI {report['roi']['long_term']['roi']}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 8, text=f"–ë–µ–∑ –∞—Ä–µ–Ω–¥—ã: ROI {report['roi']['no_rent']['roi']}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –±–ª–æ–∫)
        if 'macro' in report or 'economic_charts' in report:
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(200, 10, text="–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            
            # –ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –∏–∑ macro
        if 'macro' in report:
            pdf.cell(200, 8, text=f"–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {report['macro']['refi_rate']}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ economic_charts
            if 'economic_charts' in report:
                economic_charts = report['economic_charts']
                country_name = economic_charts.get('country_name', 'Unknown')
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                latest = economic_charts.get('latest', {})
                if latest.get('gdp'):
                    gdp_data = latest['gdp']
                    pdf.cell(200, 8, text=f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–æ—Å—Ç –í–í–ü ({gdp_data['year']}): {gdp_data['value']}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                if latest.get('inflation'):
                    inflation_data = latest['inflation']
                    pdf.cell(200, 8, text=f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–Ω—Ñ–ª—è—Ü–∏—è ({inflation_data['year']}): {inflation_data['value']}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä–µ–Ω–¥—ã
                trends = economic_charts.get('trends', {})
                if trends.get('gdp_trend') is not None:
                    gdp_trend = trends['gdp_trend'] * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    trend_text = f"–¢—Ä–µ–Ω–¥ —Ä–æ—Å—Ç–∞ –í–í–ü: {gdp_trend:.1f}%"
                    pdf.cell(200, 8, text=trend_text, new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                if trends.get('inflation_trend') is not None:
                    inflation_trend = trends['inflation_trend'] * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    trend_text = f"–¢—Ä–µ–Ω–¥ –∏–Ω—Ñ–ª—è—Ü–∏–∏: {inflation_trend:.1f}%"
                    pdf.cell(200, 8, text=trend_text, new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
                detailed_calculations = economic_charts.get('detailed_calculations', {})
                if detailed_calculations:
                    pdf.ln(5)
                    pdf.set_font("DejaVu", 'B', 12)
                    pdf.cell(200, 8, text="–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ç—Ä–µ–Ω–¥–æ–≤:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.set_font("DejaVu", size=8)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ 3 —Å—Ç–æ–ª–±—Ü–∞
                    gdp_calcs = detailed_calculations.get('gdp_calculations', [])
                    inflation_calcs = detailed_calculations.get('inflation_calculations', [])
                    
                    if gdp_calcs or inflation_calcs:
                        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                        pdf.set_font("DejaVu", 'B', 9)
                        pdf.cell(60, 6, text="–ü–µ—Ä–∏–æ–¥", new_x=XPos.RIGHT, new_y=YPos.TOP)
                        pdf.cell(60, 6, text="–†–∞—Å—á–µ—Ç", new_x=XPos.RIGHT, new_y=YPos.TOP)
                        pdf.cell(60, 6, text="–†–µ–∑—É–ª—å—Ç–∞—Ç", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                        pdf.set_font("DejaVu", size=8)
                        
                        # –í–í–ü —Ä–∞—Å—á–µ—Ç—ã
                        if gdp_calcs:
                            pdf.cell(200, 4, text="", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                            pdf.set_font("DejaVu", 'B', 8)
                            pdf.cell(200, 5, text="–í–í–ü:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                            pdf.set_font("DejaVu", size=7)
                            
                            for calc in gdp_calcs:
                                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                                pdf.cell(60, 4, text=calc['years'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                                pdf.cell(60, 4, text=calc['calculation'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                                pdf.cell(60, 4, text=calc['result'], new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                        
                        # –ò–Ω—Ñ–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç—ã
                        if inflation_calcs:
                            pdf.cell(200, 4, text="", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                            pdf.set_font("DejaVu", 'B', 8)
                            pdf.cell(200, 5, text="–ò–Ω—Ñ–ª—è—Ü–∏—è:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                            pdf.set_font("DejaVu", size=7)
                            
                            for calc in inflation_calcs:
                                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                                pdf.cell(60, 4, text=calc['years'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                                pdf.cell(60, 4, text=calc['calculation'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                                pdf.cell(60, 4, text=calc['result'], new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
                interpretations = economic_charts.get('interpretations', {})
                if interpretations and 'ru' in interpretations:
                    pdf.ln(5)
                    pdf.set_font("DejaVu", 'B', 12)
                    pdf.cell(200, 8, text="–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.set_font("DejaVu", size=10)
                    
                    ru_interp = interpretations['ru']
                    if 'gdp_interpretation' in ru_interp:
                        pdf.cell(200, 6, text=f"–í–í–ü: {ru_interp['gdp_interpretation']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    if 'inflation_interpretation' in ru_interp:
                        pdf.cell(200, 6, text=f"–ò–Ω—Ñ–ª—è—Ü–∏—è: {ru_interp['inflation_interpretation']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    if 'recent_comparison' in ru_interp:
                        pdf.cell(200, 6, text=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: {ru_interp['recent_comparison']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            try:
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                chart_data = {
                    'labels': economic_charts.get('gdp_chart', {}).get('labels', []),
                    'gdp_chart': economic_charts.get('gdp_chart', {}),
                    'inflation_chart': economic_charts.get('inflation_chart', {})
                }
                
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è PDF: {len(chart_data.get('labels', []))} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
                
                chart_buffer = create_chart_image_for_pdf(chart_data, f"–î–∏–Ω–∞–º–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π ({country_name})")
                if chart_buffer:
                    logger.info("–ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ PDF")
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ PDF
                    pdf.ln(5)
                    pdf.image(chart_buffer, x=10, y=pdf.get_y(), w=190)
                    pdf.ln(85)  # –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –≥—Ä–∞—Ñ–∏–∫–∞
                    chart_buffer.close()
                else:
                    logger.warning("–ì—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    # –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    pdf.ln(3)
                    pdf.set_font("DejaVu", 'B', 12)
                    pdf.cell(200, 8, text=f"–î–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞ –í–í–ü ({country_name}):", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.set_font("DejaVu", size=10)
                    
                    gdp_chart = economic_charts.get('gdp_chart', {})
                    if gdp_chart.get('labels') and gdp_chart.get('datasets'):
                        labels = gdp_chart['labels']
                        data = gdp_chart['datasets'][0]['data'] if gdp_chart['datasets'] else []
                        
                        for i, (year, value) in enumerate(zip(labels, data)):
                            if i < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç
                                pdf.cell(200, 6, text=f"{year}: {value}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    inflation_chart = economic_charts.get('inflation_chart', {})
                    if inflation_chart.get('labels') and inflation_chart.get('datasets'):
                        pdf.ln(3)
                        pdf.set_font("DejaVu", 'B', 12)
                        pdf.cell(200, 8, text=f"–î–∏–Ω–∞–º–∏–∫–∞ –∏–Ω—Ñ–ª—è—Ü–∏–∏ ({country_name}):", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                        pdf.set_font("DejaVu", size=10)
                        
                        labels = inflation_chart['labels']
                        data = inflation_chart['datasets'][0]['data'] if inflation_chart['datasets'] else []
                        
                        for i, (year, value) in enumerate(zip(labels, data)):
                            if i < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç
                                pdf.cell(200, 6, text=f"{year}: {value}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ PDF: {e}")
                # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
                pdf.ln(3)
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(200, 8, text=f"–î–∏–Ω–∞–º–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π ({country_name}):", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=10)
                
                gdp_chart = economic_charts.get('gdp_chart', {})
                if gdp_chart.get('labels') and gdp_chart.get('datasets'):
                    labels = gdp_chart['labels']
                    data = gdp_chart['datasets'][0]['data'] if gdp_chart['datasets'] else []
                    
                    for i, (year, value) in enumerate(zip(labels, data)):
                        if i < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç
                            pdf.cell(200, 6, text=f"{year}: {value}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            pdf.ln(5)
        
        # –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if report.get('object') and report['object'].get('address'):
            address = report['object']['address']
            location_data = extract_location_from_address(address)
            
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(200, 10, text="–¢—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            
            if location_data['city_name']:
                trends_data, trends_message = get_property_trends_data(
                    location_data['city_name'],
                    location_data['district_name'],
                    location_data['county_name']
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                historical_data = get_historical_property_trends(
                    location_data['city_name'],
                    location_data['district_name'],
                    location_data['county_name']
                )
                
                # –î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–µ
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(200, 8, text="–î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=10)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                if trends_message:
                    pdf.cell(200, 6, text=f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {trends_message}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                if trends_data:
                    if trends_data.get('unit_price_for_sale'):
                        pdf.cell(200, 6, text=f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): ‚Ç¨{trends_data['unit_price_for_sale']:,.2f}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('price_change_sale'):
                        change_percent = trends_data['price_change_sale'] * 100
                        pdf.cell(200, 6, text=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): {change_percent:+.2f}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('listing_period_for_sale'):
                        pdf.cell(200, 6, text=f"–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: {trends_data['listing_period_for_sale']} –¥–Ω–µ–π", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('count_for_sale'):
                        pdf.cell(200, 6, text=f"–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {trends_data['count_for_sale']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                else:
                    pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(200, 6, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(200, 6, text="–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                # –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                if historical_data:
                    sale_chart_buffer = create_property_trends_chart(historical_data, 'sale', 180, 80)
                    if sale_chart_buffer:
                        pdf.ln(3)
                        pdf.image(sale_chart_buffer, x=15, w=180)
                        pdf.ln(3)
                
            pdf.ln(5)
            
            # –î–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä–µ–Ω–¥–µ (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è)
            pdf.set_font("DejaVu", 'B', 12)
            pdf.cell(200, 8, text="–î–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=10)
            
            if trends_data:
                    if trends_data.get('unit_price_for_rent'):
                        pdf.cell(200, 6, text=f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): ‚Ç¨{trends_data['unit_price_for_rent']:,.2f}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('price_change_rent'):
                        change_percent = trends_data['price_change_rent'] * 100
                        pdf.cell(200, 6, text=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): {change_percent:+.2f}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('listing_period_for_rent'):
                        pdf.cell(200, 6, text=f"–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: {trends_data['listing_period_for_rent']} –¥–Ω–µ–π", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('count_for_rent'):
                        pdf.cell(200, 6, text=f"–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: {trends_data['count_for_rent']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                    if trends_data.get('yield'):
                        yield_percent = trends_data['yield'] * 100
                        pdf.cell(200, 6, text=f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {yield_percent:.2f}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            else:
                pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(200, 6, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(200, 6, text="–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(200, 6, text="–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            # –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞—Ä–µ–Ω–¥—É
            if historical_data:
                rent_chart_buffer = create_property_trends_chart(historical_data, 'rent', 180, 80)
                if rent_chart_buffer:
                    pdf.ln(3)
                    pdf.image(rent_chart_buffer, x=15, w=180)
                    pdf.ln(3)
        else:
            # –ê–¥—Ä–µ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–Ω/–¥" –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
            pdf.set_font("DejaVu", 'B', 12)
            pdf.cell(200, 8, text="–î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=10)
            pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 6, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 6, text="–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            pdf.ln(5)
                
            pdf.set_font("DejaVu", 'B', 12)
            pdf.cell(200, 8, text="–î–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=10)
            pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 6, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 6, text="–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 6, text="–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            pdf.ln(5)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤
        if 'taxes' in report:
            pdf.add_page()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
            try:
                pdf.image('logo-flt.png', x=170, y=10, w=30)  # –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–ª–æ–≥–æ–≤: {e}")
            
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(200, 10, text="–ù–∞–ª–æ–≥–∏ –∏ —Å–±–æ—Ä—ã:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            pdf.cell(200, 8, text=f"–ù–∞–ª–æ–≥ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: {report['taxes']['transfer_tax']*100}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 8, text=f"–ì–µ—Ä–±–æ–≤—ã–π —Å–±–æ—Ä: {report['taxes']['stamp_duty']*100}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 8, text=f"–ù–æ—Ç–∞—Ä–∏—É—Å: ‚Ç¨{report['taxes']['notary']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ë–ª–æ–∫: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        if 'alternatives' in report and isinstance(report['alternatives'], list):
            pdf.set_font('DejaVu', 'B', 14)
            pdf.cell(0, 10, '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏ (5 –ª–µ—Ç):', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 12)
            for alt in report['alternatives']:
                name = alt.get('name', '-')
                yld = alt.get('yield', 0)
                pdf.cell(0, 8, f'{name}: {round(yld*100, 1)}%', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ë–ª–æ–∫: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if 'yield' in report or 'price_index' in report or 'mortgage_rate' in report or 'global_house_price_index' in report:
            pdf.set_font('DejaVu', 'B', 14)
            pdf.cell(0, 10, '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 12)
            if 'yield' in report:
                pdf.cell(0, 8, f'Yield: {round(report["yield"]*100, 1)}%', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'price_index' in report:
                pdf.cell(0, 8, f'–ò–Ω–¥–µ–∫—Å —Ü–µ–Ω: {report["price_index"]}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'mortgage_rate' in report:
                pdf.cell(0, 8, f'–ò–ø–æ—Ç–µ—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {round(report["mortgage_rate"]*100, 1)}%', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'global_house_price_index' in report:
                pdf.cell(0, 8, f'–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ü–µ–Ω: {report["global_house_price_index"]}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ë–ª–æ–∫: –†–∏—Å–∫–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–π–æ–Ω–∞
        if 'risks' in report or 'liquidity' in report or 'district' in report:
            pdf.set_font('DejaVu', 'B', 14)
            pdf.cell(0, 10, '–†–∏—Å–∫–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–π–æ–Ω–∞:', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 12)
            if 'risks' in report and isinstance(report['risks'], list):
                for idx, risk in enumerate(report['risks']):
                    pdf.cell(0, 8, f'–†–∏—Å–∫ {idx+1}: {risk}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'liquidity' in report:
                pdf.cell(0, 8, f'–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {report["liquidity"]}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'district' in report:
                pdf.cell(0, 8, f'–†–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–π–æ–Ω–∞: {report["district"]}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ summary/–∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        # if 'summary' in report:
        #     pdf.set_font("DejaVu", 'B', 14)
        #     pdf.cell(200, 10, txt="–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:", ln=True)
        #     pdf.set_font("DejaVu", size=12)
        #     pdf.multi_cell(200, 8, txt=report.get('summary', '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω'))
        # –ü–æ–¥–≤–∞–ª: –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if profile:
            pdf.set_y(-60)
            pdf.set_font('DejaVu', 'B', 11)
            pdf.cell(0, 8, '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∏–µ–ª—Ç–æ—Ä–∞:', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 10)
            if profile.get('tg_name') or profile.get('last_name'):
                pdf.cell(0, 8, f"–ò–º—è: {profile.get('tg_name','')} {profile.get('last_name','')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if profile.get('company'):
                pdf.cell(0, 8, f"–ö–æ–º–ø–∞–Ω–∏—è: {profile.get('company')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if profile.get('position'):
                pdf.cell(0, 8, f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {profile.get('position')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if profile.get('phone'):
                pdf.cell(0, 8, f"–¢–µ–ª–µ—Ñ–æ–Ω: {profile.get('phone')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if profile.get('email'):
                pdf.cell(0, 8, f"Email: {profile.get('email')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if profile.get('website'):
                pdf.cell(0, 8, f"–°–∞–π—Ç: {profile.get('website')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if profile.get('about_me'):
                pdf.multi_cell(0, 8, f"–û —Å–µ–±–µ: {profile.get('about_me')}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
        pdf.output(temp_file.name)
        temp_file.close()
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º PDF –≤ static/reports/
        reports_dir = os.path.join(app.root_path, 'static', 'reports')
        os.makedirs(reports_dir, exist_ok=True)
        final_pdf_name = f'report_{report_id}.pdf'
        final_pdf_path = os.path.join(reports_dir, final_pdf_name)
        import shutil
        shutil.move(temp_file.name, final_pdf_path)
        pdf_url = f'/static/reports/{final_pdf_name}'
        supabase.table('user_reports').update({'pdf_path': pdf_url}).eq('id', report_id).execute()
        # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞
        send_status = None
        if telegram_id:
            send_status = send_pdf_to_telegram(final_pdf_path, telegram_id)
        return jsonify({
            'success': True,
            'pdf_path': pdf_url,
            'telegram_send_status': send_status,
            'message': 'PDF —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!'
        })
    except Exception as e:
        logger.error(f"Error generating PDF: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/download_pdf', methods=['POST'])
def api_download_pdf():
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF –æ—Ç—á–µ—Ç–∞"""
    data = request.json or {}
    pdf_path = data.get('pdf_path')
    
    if not pdf_path or not os.path.exists(pdf_path):
        return jsonify({'error': 'PDF file not found'}), 404
    
    try:
        return send_file(pdf_path, as_attachment=True, download_name='full_report.pdf')
    except Exception as e:
        logger.error(f"Error downloading PDF: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/user_balance', methods=['POST'])
def api_user_balance():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    deduct = data.get('deduct', False)
    if not telegram_id:
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        result = supabase.table('users').select('balance').eq('telegram_id', telegram_id).execute()
        if result.data:
            balance = result.data[0].get('balance', 0)
        else:
            balance = 0
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å $1
        if deduct:
            if balance >= 1:
                new_balance = balance - 1
                update_result = supabase.table('users').update({'balance': new_balance}).eq('telegram_id', telegram_id).execute()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                if hasattr(update_result, 'data') or update_result:
                    return jsonify({'success': True, 'balance': new_balance})
                else:
                    return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å'}), 500
            else:
                return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'balance': balance}), 400
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å
        return jsonify({'balance': balance})
    except Exception as e:
        logger.error(f"Error getting/updating user balance: {e}")
        return jsonify({'error': 'Internal error'}), 500

# === –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ã –≤—ã—à–µ –∑–∞–ø—É—Å–∫–∞ Flask ===
@app.route('/api/full_report_access', methods=['POST'])
def api_full_report_access():
    data = request.json or {}
    logger.info(f"/api/full_report_access incoming data: {data}")
    telegram_id = data.get('telegram_id')
    if telegram_id is None or str(telegram_id).strip() == '':
        logger.warning("/api/full_report_access: telegram_id missing or empty in request")
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        telegram_id = int(telegram_id)
    except (TypeError, ValueError):
        logger.warning(f"/api/full_report_access: telegram_id not convertible to int: {telegram_id}")
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        user_result = supabase.table('users').select('period_start, period_end, balance').eq('telegram_id', telegram_id).execute()
        logger.info(f"/api/full_report_access user_result: {user_result.data}")
        user = user_result.data[0] if user_result.data else None
        if not user:
            logger.warning(f"/api/full_report_access: User not found for telegram_id {telegram_id}")
            return jsonify({'error': 'User not found'}), 404
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        tariff_result = supabase.table('tariffs').select('price').eq('name', 'full report').execute()
        tariff = tariff_result.data[0] if tariff_result.data else None
        full_report_price = float(tariff['price']) if tariff and 'price' in tariff else 3.0
        return jsonify({
            'period_start': user.get('period_start'),
            'period_end': user.get('period_end'),
            'balance': user.get('balance', 0),
            'full_report_price': full_report_price
        })
    except Exception as e:
        logger.error(f"Error in full_report_access: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/deduct_balance', methods=['POST'])
def api_deduct_balance():
    data = request.json or {}
    telegram_id = data.get('telegram_id')
    amount = data.get('amount')
    logger.info(f"/api/deduct_balance incoming data: {data}")
    if telegram_id is None or str(telegram_id).strip() == '' or amount is None:
        logger.warning("/api/deduct_balance: telegram_id or amount missing in request")
        return jsonify({'error': 'telegram_id and amount required'}), 400
    try:
        telegram_id = int(telegram_id)
        amount = float(amount)
    except (TypeError, ValueError):
        logger.warning(f"/api/deduct_balance: telegram_id or amount not convertible: {telegram_id}, {amount}")
        return jsonify({'error': 'Invalid telegram_id or amount'}), 400
    try:
        user_result = supabase.table('users').select('balance').eq('telegram_id', telegram_id).execute()
        user = user_result.data[0] if user_result.data else None
        if not user:
            logger.warning(f"/api/deduct_balance: user not found for telegram_id {telegram_id}")
            return jsonify({'error': 'User not found'}), 404
        old_balance = user['balance']
        new_balance = old_balance - amount
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ int –¥–ª—è smallint
        new_balance_int = int(new_balance)
        logger.info(f"/api/deduct_balance: old_balance={old_balance}, amount={amount}, new_balance_int={new_balance_int}")
        update_result = supabase.table('users').update({'balance': new_balance_int}).eq('telegram_id', telegram_id).execute()
        logger.info(f"/api/deduct_balance: update_result={update_result}")
        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è ‚Äî —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
        return jsonify({'success': True, 'new_balance': new_balance_int})
    except Exception as e:
        logger.error(f"Error in deduct_balance: {e}")
        return jsonify({'error': 'Internal server error', 'details': str(e)}), 500
@app.route('/api/update_user_report', methods=['POST'])
def api_update_user_report():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ø–∏—Å–∞–Ω–∏–µ $1, –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    report_id = data.get('report_id')
    if not telegram_id or not report_id:
        return jsonify({'error': 'Missing required data'}), 400
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id
        user_result = supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
        user_id = user_result.data[0]['id'] if user_result.data else telegram_id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        report_result = supabase.table('user_reports').select('*').eq('id', report_id).eq('user_id', user_id).execute()
        if not report_result.data:
            return jsonify({'error': 'Report not found or not owned by user'}), 404
        report = report_result.data[0]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance_result = supabase.table('users').select('balance').eq('telegram_id', telegram_id).execute()
        balance = balance_result.data[0].get('balance', 0) if balance_result.data else 0
        if balance < 1:
            return jsonify({'error': 'Insufficient balance', 'balance': balance}), 400
        # –°–ø–∏—Å—ã–≤–∞–µ–º $1
        new_balance = balance - 1
        supabase.table('users').update({'balance': new_balance}).eq('telegram_id', telegram_id).execute()
        # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
        # TODO: –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
        supabase.table('user_reports').update({
            'updated_at': datetime.now().isoformat()
        }).eq('id', report_id).execute()
        return jsonify({'success': True, 'balance': new_balance})
    except Exception as e:
        logger.error(f"Error updating user report: {e}")
        return jsonify({'error': 'Internal error'}), 500 

@app.route('/api/user_reports/save', methods=['POST'])
def api_save_user_report():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç report_id"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    full_report = data.get('full_report')
    address = data.get('address')
    report_type = data.get('report_type', 'full')
    if not telegram_id or not full_report:
        return jsonify({'error': 'Missing required data'}), 400
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id
        user_result = supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
        user_id = user_result.data[0]['id'] if user_result.data else telegram_id
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_data = {
            'user_id': user_id,
            'report_type': report_type,
            'address': address,
            'full_report': full_report,
            'created_at': datetime.now().isoformat(),
            'updated_at': datetime.now().isoformat()
        }
        result = supabase.table('user_reports').insert(report_data).execute()
        new_id = result.data[0]['id'] if hasattr(result, 'data') and result.data else None
        return jsonify({'success': True, 'report_id': new_id})
    except Exception as e:
        logger.error(f"Error saving user report: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/send_saved_report_pdf', methods=['POST'])
def api_send_saved_report_pdf():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram (–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤)"""
    data = request.json or {}
    report_id = data.get('report_id')
    telegram_id = data.get('telegram_id')
    if not report_id or not telegram_id:
        return jsonify({'error': 'report_id and telegram_id required'}), 400
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç –∏–∑ –±–∞–∑—ã
        report_result = supabase.table('user_reports').select('full_report').eq('id', report_id).execute()
        if not report_result.data or not report_result.data[0].get('full_report'):
            return jsonify({'error': 'Report not found'}), 404
        report = report_result.data[0]['full_report']
        if not isinstance(report, dict):
            return jsonify({'error': 'Invalid report data'}), 500
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF (–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤)
        from fpdf import FPDF
        import tempfile, shutil
        pdf = FPDF()
        pdf.add_page()
        pdf.add_font('DejaVu', '', 'fonts/DejaVuSans.ttf')
        pdf.add_font('DejaVu', 'B', 'fonts/DejaVuSans-Bold.ttf')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–≤–µ—Ä—Ö—É)
        try:
            pdf.image('logo-sqv.png', x=85, y=10, w=40)  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø
            pdf.ln(35)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –ª–æ–≥–æ—Ç–∏–ø–∞
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}")
            pdf.ln(35)  # –û—Ç—Å—Ç—É–ø –¥–∞–∂–µ –µ—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        
        pdf.set_font('DejaVu', 'B', 16)
        pdf.cell(0, 10, '–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C')
        pdf.ln(10)
        obj = report.get('object') or {}
        pdf.set_font('DejaVu', 'B', 12)
        pdf.cell(0, 10, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ:', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.set_font('DejaVu', '', 10)
        pdf.cell(0, 8, f'–ê–¥—Ä–µ—Å: {obj.get("address", "–ù–µ —É–∫–∞–∑–∞–Ω")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, f'–°–ø–∞–ª–µ–Ω: {obj.get("bedrooms", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, f'–¶–µ–Ω–∞: ‚Ç¨{obj.get("purchase_price", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.ln(5)
        # ROI –∞–Ω–∞–ª–∏–∑
        roi = report.get('roi')
        if roi:
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(0, 10, "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (ROI):", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            st = roi.get('short_term', {})
            lt = roi.get('long_term', {})
            nr = roi.get('no_rent', {})
            pdf.cell(0, 8, f"–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞: ROI {st.get('roi', '-')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f"–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞: ROI {lt.get('roi', '-')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f"–ë–µ–∑ –∞—Ä–µ–Ω–¥—ã: ROI {nr.get('roi', '-')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞
        macro = report.get('macro')
        if macro:
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(0, 10, "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            pdf.cell(0, 8, f"–ò–Ω—Ñ–ª—è—Ü–∏—è: {macro.get('inflation', '-')}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f"–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {macro.get('refi_rate', '-')}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f"–†–æ—Å—Ç –í–í–ü: {macro.get('gdp_growth', '-')}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        
        # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ç—Ä–µ–Ω–¥—ã
        if 'economic_charts' in report:
            economic_charts = report['economic_charts']
            country_name = economic_charts.get('country_name', 'Unknown')
            
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(0, 10, f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã ({country_name}):", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä–µ–Ω–¥—ã
            trends = economic_charts.get('trends', {})
            if trends.get('gdp_trend') is not None:
                gdp_trend = trends['gdp_trend'] * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                trend_text = f"–¢—Ä–µ–Ω–¥ —Ä–æ—Å—Ç–∞ –í–í–ü: {gdp_trend:.1f}%"
                pdf.cell(200, 8, text=trend_text, new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            if trends.get('inflation_trend') is not None:
                inflation_trend = trends['inflation_trend'] * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                trend_text = f"–¢—Ä–µ–Ω–¥ –∏–Ω—Ñ–ª—è—Ü–∏–∏: {inflation_trend:.1f}%"
                pdf.cell(200, 8, text=trend_text, new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
            detailed_calculations = economic_charts.get('detailed_calculations', {})
            if detailed_calculations:
                pdf.ln(5)
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(200, 8, text="–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ç—Ä–µ–Ω–¥–æ–≤:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=8)
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ 3 —Å—Ç–æ–ª–±—Ü–∞
                gdp_calcs = detailed_calculations.get('gdp_calculations', [])
                inflation_calcs = detailed_calculations.get('inflation_calculations', [])
                
                if gdp_calcs or inflation_calcs:
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                    pdf.set_font("DejaVu", 'B', 9)
                    pdf.cell(60, 6, text="–ü–µ—Ä–∏–æ–¥", new_x=XPos.RIGHT, new_y=YPos.TOP)
                    pdf.cell(60, 6, text="–†–∞—Å—á–µ—Ç", new_x=XPos.RIGHT, new_y=YPos.TOP)
                    pdf.cell(60, 6, text="–†–µ–∑—É–ª—å—Ç–∞—Ç", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.set_font("DejaVu", size=8)
                    
                    # –í–í–ü —Ä–∞—Å—á–µ—Ç—ã
                    if gdp_calcs:
                        pdf.cell(200, 4, text="", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                        pdf.set_font("DejaVu", 'B', 8)
                        pdf.cell(200, 5, text="–í–í–ü:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                        pdf.set_font("DejaVu", size=7)
                        
                        for calc in gdp_calcs:
                            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                            pdf.cell(60, 4, text=calc['years'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                            pdf.cell(60, 4, text=calc['calculation'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                            pdf.cell(60, 4, text=calc['result'], new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    # –ò–Ω—Ñ–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç—ã
                    if inflation_calcs:
                        pdf.cell(200, 4, text="", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                        pdf.set_font("DejaVu", 'B', 8)
                        pdf.cell(200, 5, text="–ò–Ω—Ñ–ª—è—Ü–∏—è:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                        pdf.set_font("DejaVu", size=7)
                        
                        for calc in inflation_calcs:
                            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                            pdf.cell(60, 4, text=calc['years'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                            pdf.cell(60, 4, text=calc['calculation'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                            pdf.cell(60, 4, text=calc['result'], new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            interpretations = economic_charts.get('interpretations', {})
            if interpretations and 'ru' in interpretations:
                pdf.ln(5)
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(200, 8, text="–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=10)
                
                ru_interp = interpretations['ru']
                if 'gdp_interpretation' in ru_interp:
                    pdf.cell(200, 6, text=f"–í–í–ü: {ru_interp['gdp_interpretation']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                if 'inflation_interpretation' in ru_interp:
                    pdf.cell(200, 6, text=f"–ò–Ω—Ñ–ª—è—Ü–∏—è: {ru_interp['inflation_interpretation']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                if 'recent_comparison' in ru_interp:
                    pdf.cell(200, 6, text=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: {ru_interp['recent_comparison']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            pdf.ln(5)
        
        # –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if report.get('object') and report['object'].get('address'):
            address = report['object']['address']
            location_data = extract_location_from_address(address)
            
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(0, 10, "–¢—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            
            if location_data['city_name']:
                trends_data, trends_message = get_property_trends_data(
                    location_data['city_name'],
                    location_data['district_name'],
                    location_data['county_name']
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                historical_data = get_historical_property_trends(
                    location_data['city_name'],
                    location_data['district_name'],
                    location_data['county_name']
                )
                
                # –î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–µ
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(0, 8, "–î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=10)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                if trends_message:
                    pdf.cell(0, 6, f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {trends_message}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                if trends_data:
                    if trends_data.get('unit_price_for_sale'):
                        pdf.cell(0, 6, f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): ‚Ç¨{trends_data['unit_price_for_sale']:,.2f}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('price_change_sale'):
                        change_percent = trends_data['price_change_sale'] * 100
                        pdf.cell(0, 6, f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): {change_percent:+.2f}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('listing_period_for_sale'):
                        pdf.cell(0, 6, f"–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: {trends_data['listing_period_for_sale']} –¥–Ω–µ–π", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('count_for_sale'):
                        pdf.cell(0, 6, f"–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {trends_data['count_for_sale']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                else:
                    pdf.cell(0, 6, "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(0, 6, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(0, 6, "–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(0, 6, "–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                # –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                if historical_data:
                    sale_chart_buffer = create_property_trends_chart(historical_data, 'sale', 180, 80)
                    if sale_chart_buffer:
                        pdf.ln(3)
                        pdf.image(sale_chart_buffer, x=15, w=180)
                        pdf.ln(3)
                
                pdf.ln(5)
                
                # –î–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä–µ–Ω–¥–µ (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è)
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(0, 8, "–î–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=10)
                
                if trends_data:
                    if trends_data.get('unit_price_for_rent'):
                        pdf.cell(0, 6, f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): ‚Ç¨{trends_data['unit_price_for_rent']:,.2f}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('price_change_rent'):
                        change_percent = trends_data['price_change_rent'] * 100
                        pdf.cell(0, 6, f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): {change_percent:+.2f}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('listing_period_for_rent'):
                        pdf.cell(0, 6, f"–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: {trends_data['listing_period_for_rent']} –¥–Ω–µ–π", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('count_for_rent'):
                        pdf.cell(0, 6, f"–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: {trends_data['count_for_rent']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                    if trends_data.get('yield'):
                        yield_percent = trends_data['yield'] * 100
                        pdf.cell(0, 6, f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {yield_percent:.2f}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                else:
                    pdf.cell(0, 6, "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(0, 6, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(0, 6, "–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(0, 6, "–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(0, 6, "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                # –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞—Ä–µ–Ω–¥—É
                if historical_data:
                    rent_chart_buffer = create_property_trends_chart(historical_data, 'rent', 180, 80)
                    if rent_chart_buffer:
                        pdf.ln(3)
                        pdf.image(rent_chart_buffer, x=15, w=180)
                        pdf.ln(3)
            else:
                # –ê–¥—Ä–µ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–Ω/–¥" –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(0, 8, "–î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=10)
                pdf.cell(0, 6, "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(0, 6, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(0, 6, "–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(0, 6, "–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                pdf.ln(5)
                
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(0, 8, "–î–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=10)
                pdf.cell(0, 6, "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(0, 6, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(0, 6, "–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(0, 6, "–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(0, 6, "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            pdf.ln(5)
        
        # –ù–∞–ª–æ–≥–∏
        taxes = report.get('taxes')
        if taxes:
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(0, 10, "–ù–∞–ª–æ–≥–∏ –∏ —Å–±–æ—Ä—ã:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            pdf.cell(0, 8, f"–ù–∞–ª–æ–≥ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: {taxes.get('transfer_tax', 0)*100}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f"–ì–µ—Ä–±–æ–≤—ã–π —Å–±–æ—Ä: {taxes.get('stamp_duty', 0)*100}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f"–ù–æ—Ç–∞—Ä–∏—É—Å: ‚Ç¨{taxes.get('notary', '-')}" , new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        alternatives = report.get('alternatives')
        if isinstance(alternatives, list):
            pdf.set_font('DejaVu', 'B', 14)
            pdf.cell(0, 10, '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏ (5 –ª–µ—Ç):', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 12)
            for alt in alternatives:
                name = alt.get('name', '-')
                yld = alt.get('yield', 0)
                pdf.cell(0, 8, f'{name}: {round(yld*100, 1)}%', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if any(k in report for k in ['yield', 'price_index', 'mortgage_rate', 'global_house_price_index']):
            pdf.set_font('DejaVu', 'B', 14)
            pdf.cell(0, 10, '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 12)
            if 'yield' in report:
                pdf.cell(0, 8, f'Yield: {round(report.get("yield", 0)*100, 1)}%', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'price_index' in report:
                pdf.cell(0, 8, f'–ò–Ω–¥–µ–∫—Å —Ü–µ–Ω: {report.get("price_index", "-")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'mortgage_rate' in report:
                pdf.cell(0, 8, f'–ò–ø–æ—Ç–µ—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {round(report.get("mortgage_rate", 0)*100, 1)}%', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'global_house_price_index' in report:
                pdf.cell(0, 8, f'–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ü–µ–Ω: {report.get("global_house_price_index", "-")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –†–∏—Å–∫–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–π–æ–Ω–∞
        if any(k in report for k in ['risks', 'liquidity', 'district']):
            pdf.set_font('DejaVu', 'B', 14)
            pdf.cell(0, 10, '–†–∏—Å–∫–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–π–æ–Ω–∞:', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 12)
            risks = report.get('risks')
            if isinstance(risks, list):
                for idx, risk in enumerate(risks):
                    pdf.cell(0, 8, f'–†–∏—Å–∫ {idx+1}: {risk}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'liquidity' in report:
                pdf.cell(0, 8, f'–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {report.get("liquidity", "-")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'district' in report:
                pdf.cell(0, 8, f'–†–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–π–æ–Ω–∞: {report.get("district", "-")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
        pdf.output(temp_file.name)
        temp_file.close()
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º PDF –≤ static/reports/
        reports_dir = os.path.join(app.root_path, 'static', 'reports')
        os.makedirs(reports_dir, exist_ok=True)
        final_pdf_name = f'report_{report_id}.pdf'
        final_pdf_path = os.path.join(reports_dir, final_pdf_name)
        shutil.move(temp_file.name, final_pdf_path)
        pdf_url = f'/static/reports/{final_pdf_name}'
        supabase.table('user_reports').update({'pdf_path': pdf_url}).eq('id', report_id).execute()
        # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é)
        send_status = None
        if telegram_id:
            send_status = send_pdf_to_telegram(final_pdf_path, telegram_id)
        return jsonify({
            'success': True,
            'pdf_path': pdf_url,
            'telegram_send_status': send_status,
            'message': 'PDF —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'
        })
    except Exception as e:
        logger.error(f"Error generating/sending PDF: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/admin_balance_100', methods=['POST'])
def api_admin_balance_100():
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    user_result = supabase.table('users').select('*').eq('telegram_id', telegram_id).execute()
    user = user_result.data[0] if user_result.data else None
    if not user or user.get('user_status') != 'admin':
        return jsonify({'error': 'not admin'}), 403
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    try:
        supabase.table('users').update({'balance': 100}).eq('telegram_id', telegram_id).execute()
        return jsonify({'success': True, 'balance': 100})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin_users_stats', methods=['GET'])
def api_admin_users_stats():
    import datetime
    from dateutil.relativedelta import relativedelta
    now = datetime.now()
    today = now.date()
    week_ago = today - datetime.timedelta(days=7)
    month_ago = today - relativedelta(months=1)
    quarter_ago = today - relativedelta(months=3)
    year_ago = today - relativedelta(years=1)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = supabase.table('users').select('*').execute().data or []
    user_reports = supabase.table('user_reports').select('*').execute().data or []
    tariffs = supabase.table('tariffs').select('*').execute().data or []

    # –§–∏–ª—å—Ç—Ä—ã
    non_admin_users = [u for u in users if u.get('user_status') != 'admin']
    admin_users = [u for u in users if u.get('user_status') == 'admin']
    def parse_date(val):
        if not val: return None
        try:
            return datetime.strptime(val[:10], '%Y-%m-%d').date()
        except Exception:
            return None

    # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    def count_new(users, since):
        return sum(1 for u in users if parse_date(u.get('created_at')) and parse_date(u.get('created_at')) >= since)

    # –ë–∞–ª–∞–Ω—Å—ã
    total_balance = sum(u.get('balance', 0) or 0 for u in non_admin_users)
    expired_users = [u for u in non_admin_users if (parse_date(u.get('period_end')) is None or parse_date(u.get('period_end')) < today) and u.get('period_end')]
    active_users = [u for u in non_admin_users if not ((parse_date(u.get('period_end')) is None or parse_date(u.get('period_end')) < today) and u.get('period_end'))]
    expired_balance = sum(u.get('balance', 0) or 0 for u in expired_users)
    active_balance = total_balance - expired_balance

    # –û—Ç—á—ë—Ç—ã
    def count_reports(since):
        return sum(1 for r in user_reports if parse_date(r.get('created_at')) and parse_date(r.get('created_at')) >= since and not r.get('deleted_at'))
    def count_deleted_reports():
        return sum(1 for r in user_reports if r.get('deleted_at'))
    def reports_by_users(users_list):
        ids = set(u.get('telegram_id') for u in users_list)
        return [r for r in user_reports if r.get('user_id') in ids]
    expired_reports = reports_by_users(expired_users)
    active_reports = reports_by_users(active_users)
    avg_expired_reports = len(expired_reports) / len(expired_users) if expired_users else 0
    # –°—Ç–æ–∏–º–æ—Å—Ç—å full –∏–∑ tariffs
    full_price = 0
    for t in tariffs:
        if t.get('name') == 'full':
            full_price = t.get('price', 0)
            break
    active_reports_count = len(active_reports)
    active_reports_cost = active_reports_count * full_price

    return jsonify({
        'total_users': len(non_admin_users),
        'new_users_week': count_new(non_admin_users, week_ago),
        'new_users_month': count_new(non_admin_users, month_ago),
        'new_users_quarter': count_new(non_admin_users, quarter_ago),
        'new_users_year': count_new(non_admin_users, year_ago),
        'total_balance': total_balance,
        'expired_balance': expired_balance,
        'active_balance': active_balance,
        'reports_week': count_reports(week_ago),
        'reports_month': count_reports(month_ago),
        'reports_quarter': count_reports(quarter_ago),
        'reports_year': count_reports(year_ago),
        'deleted_reports': count_deleted_reports(),
        'expired_reports_count': len(expired_reports),
        'avg_expired_reports': avg_expired_reports,
        'active_reports_count': active_reports_count,
        'active_reports_cost': active_reports_cost,
        'admin_count': len(admin_users),
    })

@app.route('/api/admin_publication', methods=['POST'])
def api_admin_publication():
    import requests
    data = request.json or {}
    text = data.get('text', '').strip()
    only_admins = data.get('only_admins', True)
    save_to_db = data.get('save_to_db', False)
    auto_translate = data.get('auto_translate', False)
    test_send = data.get('test_send', False)
    if not text:
        return jsonify({'error': 'text required'}), 400
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = supabase.table('users').select('telegram_id, user_status, language').execute().data or []
    # –ü–æ–ª—É—á–∞–µ–º OpenAI API –∫–ª—é—á
    openai_key = get_openai_api_key()
    # –Ø–∑—ã–∫–∏ –∏ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    lang_map = {'ru': 'ru', 'en': 'us', 'de': 'de', 'fr': 'ft', 'tr': 'tr'}
    translations = {'ru': text, 'us': '', 'de': '', 'ft': '', 'tr': ''}
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    print(f"DEBUG: auto_translate={auto_translate}, openai_key={'–µ—Å—Ç—å' if openai_key else '–Ω–µ—Ç'}")
    # –í—Ä–µ–º–µ–Ω–Ω–æ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if True:
        logger.info(f"auto_translate={auto_translate}, openai_key={'–µ—Å—Ç—å' if openai_key else '–Ω–µ—Ç'}")
        def gpt_translate(prompt, target_lang):
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è {target_lang}")
            if not OPENAI_AVAILABLE:
                logger.warning("OpenAI library not available, using fallback")
                return f"[–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {target_lang}]"
            try:
                from openai import OpenAI
                client = OpenAI(api_key=openai_key)
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": f"You are a professional translator. Translate the following text to {target_lang} (no explanation, only translation):"},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=1024,
                    temperature=0.3
                )
                result = response.choices[0].message.content.strip()
                logger.info(f"–ü–µ—Ä–µ–≤–æ–¥ {target_lang}: {result}")
                return result
            except Exception as e:
                logger.error(f"OpenAI API exception for {target_lang}: {e}")
                return f"[–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ {target_lang}]"
        translations['us'] = gpt_translate(text, 'English')
        translations['de'] = gpt_translate(text, 'German')
        translations['ft'] = gpt_translate(text, 'French')
        translations['tr'] = gpt_translate(text, 'Turkish')
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    recipients = []
    if test_send:
        # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã, –Ω–æ –∫–∞–∂–¥–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        recipients = [u for u in users if u.get('user_status') == 'admin']
    elif only_admins:
        recipients = [u for u in users if u.get('user_status') == 'admin']
    else:
        recipients = users
    # –†–∞—Å—Å—ã–ª–∫–∞
    bot_token = '7215676549:AAFS86JbRCqwzTKQG-dF96JX-C1aWNvBoLo'
    send_url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    lang_stats = {'ru': 0, 'us': 0, 'de': 0, 'ft': 0, 'tr': 0}
    admin_count = 0
    user_count = 0
    total = 0
    for u in recipients:
        tid = u.get('telegram_id')
        if not tid:
            continue
        lang = (u.get('language') or 'ru')[:2]
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ ‚Äî –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        if test_send:
            for l, field in lang_map.items():
                msg = translations[field] if translations[field] else text
                data_send = {'chat_id': tid, 'text': msg, 'parse_mode': 'HTML', 'disable_web_page_preview': True}
                resp = requests.post(send_url, data=data_send)
                if resp.status_code == 200 and resp.json().get('ok'):
                    lang_stats[field] += 1
                    if u.get('user_status') == 'admin':
                        admin_count += 1
                    else:
                        user_count += 1
                    total += 1
        else:
            # –û–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ‚Äî –∫–∞–∂–¥–æ–º—É –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –µ—Å—Ç—å
            field = lang_map.get(lang, 'ru')
            msg = translations[field] if translations[field] else text
            data_send = {'chat_id': tid, 'text': msg, 'parse_mode': 'HTML', 'disable_web_page_preview': True}
            resp = requests.post(send_url, data=data_send)
            if resp.status_code == 200 and resp.json().get('ok'):
                lang_stats[field] += 1
                if u.get('user_status') == 'admin':
                    admin_count += 1
                else:
                    user_count += 1
                total += 1
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if save_to_db or test_send:
        supabase.table('texts_promo').insert({
            'base': text,
            'ru': translations['ru'],
            'us': translations['us'],
            'de': translations['de'],
            'ft': translations['ft'],
            'tr': translations['tr'],
            'qtty_ru': lang_stats['ru'],
            'qtty_us': lang_stats['us'],
            'qtty_de': lang_stats['de'],
            'qtty_ft': lang_stats['ft'],
            'qtty_tr': lang_stats['tr'],
        }).execute()
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É-–æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result_message = f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {user_count}\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {admin_count}"
    return jsonify({
        'success': True,
        'total': total,
        'users': user_count,
        'admins': admin_count,
        'result_message': result_message,
        'lang_stats': lang_stats
    })

@app.route('/api/admin_add_apikey', methods=['POST'])
def api_admin_add_apikey():
    data = request.json or {}
    key_name = data.get('key_name', '').strip()
    key_value = data.get('key_value', '').strip()
    if not key_name or not key_value:
        return jsonify({'error': 'key_name and key_value required'}), 400
    # –ù–µ –¥–∞—ë–º –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    used_keys = ['SUPABASE_URL', 'SUPABASE_ANON_KEY', 'TELEGRAM_BOT_TOKEN', 'GOOGLE_MAPS_API_KEY']
    if key_name in used_keys:
        return jsonify({'error': '–≠—Ç–æ—Ç –∫–ª—é—á —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º'}), 400
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–ª—é—á
    exists = supabase.table('api_keys').select('*').eq('key_name', key_name).execute().data
    if exists:
        return jsonify({'error': '–ö–ª—é—á —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400
    try:
        supabase.table('api_keys').insert({'key_name': key_name, 'key_value': key_value}).execute()
        return jsonify({'success': True})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin_list_apikeys', methods=['GET'])
def api_admin_list_apikeys():
    used_keys = ['SUPABASE_URL', 'SUPABASE_ANON_KEY', 'TELEGRAM_BOT_TOKEN', 'GOOGLE_MAPS_API_KEY']
    all_keys = supabase.table('api_keys').select('*').execute().data or []
    new_keys = [k for k in all_keys if k.get('key_name') not in used_keys]
    return jsonify({'keys': new_keys})

# === –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print("\n=== Flask ROUTES ===")
    for rule in app.url_map.iter_rules():
        print(f"{rule.methods} {rule}")
    print("====================\n")
    app.run(host='0.0.0.0', port=8080, debug=False)

@app.route('/webapp_admin')
def webapp_admin():
    with open('webapp_admin.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_admin_users')
def webapp_admin_users():
    with open('webapp_admin_users.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_admin_settings')
def webapp_admin_settings():
    with open('webapp_admin_settings.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_admin_publication')
def webapp_admin_publication():
    with open('webapp_admin_publication.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_about')
def webapp_about():
    with open('webapp_about.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_instruction')
def webapp_instruction():
    with open('webapp_instruction.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_geography')
def webapp_geography():
    with open('webapp_geography.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_support')
def webapp_support():
    with open('webapp_support.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_referral')
def webapp_referral():
    with open('webapp_referral.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/api/referral_info', methods=['POST'])
def api_referral_info():
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_result = supabase.table('users').select('*').eq('telegram_id', telegram_id).execute()
    user = user_result.data[0] if user_result.data else None
    if not user:
        return jsonify({'error': 'User not found'}), 404
    invite_code = user.get('invite_code')
    # –ï—Å–ª–∏ invite_code –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
    if not invite_code:
        def generate_invite_code():
            return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ invite_code
        while True:
            invite_code = generate_invite_code()
            code_check = supabase.table('users').select('invite_code').eq('invite_code', invite_code).execute()
            if not code_check.data:
                break
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º invite_code
        supabase.table('users').update({'invite_code': invite_code}).eq('telegram_id', telegram_id).execute()
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    bot_link = f'https://t.me/Aaadviser_bot?start={invite_code}'
    # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ –∏–∑ tariffs
    tariffs_result = supabase.table('tariffs').select('*').execute()
    bonus = None
    if tariffs_result.data:
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å —Ç–∏–ø–æ–º invite –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–º
        for tariff in tariffs_result.data:
            if tariff.get('type') == 'invite' or tariff.get('name') == 'invite' or 'invite' in str(tariff.get('description', '')).lower():
                bonus = tariff.get('price')
                break
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
        if bonus is None and tariffs_result.data:
            bonus = tariffs_result.data[0].get('price')
    referral_terms = (
        f'–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n'
        f'–ó–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∏ –æ—Ñ–æ—Ä–º–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –Ω–∞ –±–∞–ª–∞–Ω—Å.'
    )
    if bonus:
        referral_terms += f' –†–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞: {bonus}.'
    referral_terms += '\n–ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–º.'
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    invited_result = supabase.table('users').select('*').eq('referal', invite_code).execute()
    invited = []
    for invited_user in invited_result.data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç
        reports_result = supabase.table('reports').select('*').eq('user_id', invited_user['telegram_id']).eq('is_paid', True).execute()
        completed = bool(reports_result.data)
        invited.append({
            'tg_name': invited_user.get('tg_name'),
            'username': invited_user.get('username'),
            'telegram_id': invited_user.get('telegram_id'),
            'completed': completed
        })
    return jsonify({
        'invite_code': invite_code,
        'bot_link': bot_link,
        'referral_terms': referral_terms,
        'invited': invited
    })

@app.route('/api/tariffs', methods=['GET'])
def api_tariffs():
    try:
        tariffs_result = supabase.table('tariffs').select('*').execute()
        tariffs = []
        for t in tariffs_result.data:
            tariffs.append({
                'description': t.get('description'),
                'price': t.get('price'),
                'tariff_type': t.get('tariff_type'),
                'period_days': t.get('period_days'),
                'name': t.get('name'),
            })
        return jsonify({'tariffs': tariffs})
    except Exception as e:
        logger.error(f"Error loading tariffs: {e}")
        return jsonify({'tariffs': []}), 500

@app.route('/api/economic_data', methods=['POST'])
def api_economic_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–í–í–ü –∏ –∏–Ω—Ñ–ª—è—Ü–∏—è) –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    data = request.json or {}
    country_code = data.get('country_code', 'TUR')
    years_back = data.get('years_back', 10)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        economic_data = get_economic_data(country_code, years_back)
        chart_data = create_economic_chart_data(economic_data)
        
        return jsonify({
            'success': True,
            'economic_data': economic_data,
            'chart_data': chart_data,
            'country_code': country_code,
            'years_back': years_back
        })
        
    except Exception as e:
        logger.error(f"Error in economic_data API: {e}")
        return jsonify({'error': 'Internal error'}), 500

def create_economic_chart_image(economic_charts_data):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        plt.rcParams['font.family'] = ['DejaVu Sans', 'sans-serif']
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
        fig, ax = plt.subplots(figsize=(10, 6))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        gdp_chart = economic_charts_data.get('gdp_chart', {})
        inflation_chart = economic_charts_data.get('inflation_chart', {})
        
        if not gdp_chart.get('labels') or not inflation_chart.get('labels'):
            return None
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        years = gdp_chart['labels']
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–¥—ã –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        years = [int(year) for year in years]
        gdp_data = gdp_chart['datasets'][0]['data']
        inflation_data = inflation_chart['datasets'][0]['data']
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        ax.plot(years, gdp_data, 'o-', color='#00bcd4', linewidth=2, 
                markersize=6, label='–†–æ—Å—Ç –í–í–ü (%)', alpha=0.8)
        ax.plot(years, inflation_data, 's-', color='#dc3545', linewidth=2, 
                markersize=6, label='–ò–Ω—Ñ–ª—è—Ü–∏—è (%)', alpha=0.8)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–∞
        ax.set_xlabel('–ì–æ–¥', fontsize=12, fontname='DejaVu Sans')
        ax.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç (%)', fontsize=12, fontname='DejaVu Sans')
        ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π', fontsize=14, fontweight='bold', fontname='DejaVu Sans')
        ax.grid(True, alpha=0.3)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≥–µ–Ω–¥—ã —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–∞
        legend = ax.legend(fontsize=10)
        for text in legend.get_texts():
            text.set_fontname('DejaVu Sans')
        
        # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ X –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        plt.xticks(rotation=45)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –º–µ—Ç–æ–∫ –æ—Å–µ–π
        for label in ax.get_xticklabels() + ax.get_yticklabels():
            label.set_fontname('DejaVu Sans')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight')
        buffer.seek(0)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        plt.close()
        
        return buffer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None

def create_chart_image_for_pdf(chart_data, title, width=180, height=100):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ PDF
    """
    try:
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è PDF: {title}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        plt.rcParams['font.family'] = ['DejaVu Sans', 'sans-serif']
        plt.rcParams['font.size'] = 8
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ (–≤ –¥—é–π–º–∞—Ö)
        fig, ax = plt.subplots(figsize=(width/25.4, height/25.4))  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–º –≤ –¥—é–π–º—ã
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        years = chart_data.get('labels', [])
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–¥—ã –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        years = [int(year) for year in years if year.isdigit()]
        gdp_data = chart_data.get('gdp_chart', {}).get('datasets', [{}])[0].get('data', [])
        inflation_data = chart_data.get('inflation_chart', {}).get('datasets', [{}])[0].get('data', [])
        
        logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: {len(years)} –ª–µ—Ç, –í–í–ü: {len(gdp_data)} —Ç–æ—á–µ–∫, –ò–Ω—Ñ–ª—è—Ü–∏—è: {len(inflation_data)} —Ç–æ—á–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        if len(years) < 2 or len(gdp_data) < 2 or len(inflation_data) < 2:
            logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            # –°–æ–∑–¥–∞–µ–º placeholder –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', ha='center', va='center', 
                   transform=ax.transAxes, fontsize=10, fontname='DejaVu Sans')
            ax.set_title(title, fontsize=8, fontname='DejaVu Sans', pad=10)
            ax.set_xlim(0, 1)
            ax.set_ylim(0, 1)
            ax.axis('off')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight')
            buffer.seek(0)
            plt.close()
            
            return buffer
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        ax.plot(years, gdp_data, 'o-', color='#00bcd4', linewidth=1.5, 
                markersize=3, label='–í–í–ü', alpha=0.8)
        ax.plot(years, inflation_data, 's-', color='#dc3545', linewidth=1.5, 
                markersize=3, label='–ò–Ω—Ñ–ª—è—Ü–∏—è', alpha=0.8)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–∞
        ax.set_xlabel('–ì–æ–¥', fontsize=6, fontname='DejaVu Sans')
        ax.set_ylabel('%', fontsize=6, fontname='DejaVu Sans')
        ax.set_title(title, fontsize=8, fontweight='bold', fontname='DejaVu Sans')
        ax.grid(True, alpha=0.2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≥–µ–Ω–¥—ã —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–∞
        legend = ax.legend(fontsize=6, loc='upper right')
        for text in legend.get_texts():
            text.set_fontname('DejaVu Sans')
        
        # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ X
        plt.xticks(rotation=45, fontsize=6)
        plt.yticks(fontsize=6)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –º–µ—Ç–æ–∫ –æ—Å–µ–π
        for label in ax.get_xticklabels() + ax.get_yticklabels():
            label.set_fontname('DejaVu Sans')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=200, bbox_inches='tight')
        buffer.seek(0)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É
        plt.close()
        
        return buffer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è PDF: {e}")
        return None

def get_market_data_by_location_ids(location_codes, target_year=None, target_month=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ ID –ª–æ–∫–∞—Ü–∏–π
    
    Args:
        location_codes (dict): –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π (country_id, city_id, district_id, county_id)
        target_year (int): –ì–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)
        target_month (int): –ú–µ—Å—è—Ü (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)
    
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    """
    try:
        from datetime import datetime
        
        # –ï—Å–ª–∏ –≥–æ–¥ –∏ –º–µ—Å—è—Ü –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ
        if target_year is None or target_month is None:
            now = datetime.now()
            target_year = target_year or now.year
            target_month = target_month or now.month
        
        logger.info(f"–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –¥–ª—è {target_year}-{target_month:02d}")
        logger.info(f"–ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π: {location_codes}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        required_codes = ['country_id', 'city_id', 'district_id', 'county_id']
        missing_codes = [code for code in required_codes if not location_codes.get(code)]
        if missing_codes:
            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π: {missing_codes}")
            return None
        
        market_data = {
            'property_trends': None,
            'age_data': None,
            'floor_segment_data': None,
            'general_data': None,
            'heating_data': None,
            'house_type_data': None
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ property_trends
        try:
            query = supabase.table('property_trends').select('*')
            if location_codes.get('country_id'):
                query = query.eq('country_id', location_codes['country_id'])
            if location_codes.get('city_id'):
                query = query.eq('city_id', location_codes['city_id'])
            if location_codes.get('district_id'):
                query = query.eq('district_id', location_codes['district_id'])
            if location_codes.get('county_id'):
                query = query.eq('county_id', location_codes['county_id'])
            
            result = query.execute()
            if result.data:
                # –ë–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–ø–∏—Å—å
                latest_record = max(result.data, key=lambda x: x.get('trend_date', ''))
                market_data['property_trends'] = latest_record
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ property_trends: {len(result.data)} –∑–∞–ø–∏—Å–µ–π, –≤—ã–±—Ä–∞–Ω–∞ —Å–∞–º–∞—è —Å–≤–µ–∂–∞—è: {latest_record.get('trend_date')}")
            else:
                logger.info("–î–∞–Ω–Ω—ã–µ property_trends –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è property_trends: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ age_data
        try:
            query = supabase.table('age_data').select('*')
            if location_codes.get('country_id'):
                query = query.eq('country_id', location_codes['country_id'])
            if location_codes.get('city_id'):
                query = query.eq('city_id', location_codes['city_id'])
            if location_codes.get('district_id'):
                query = query.eq('district_id', location_codes['district_id'])
            if location_codes.get('county_id'):
                query = query.eq('county_id', location_codes['county_id'])
            
            result = query.execute()
            if result.data:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ listing_type –∏ –±–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                records_by_type = {}
                for record in result.data:
                    listing_type = record.get('listing_type')
                    if listing_type:
                        if listing_type not in records_by_type:
                            records_by_type[listing_type] = record
                        else:
                            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
                            existing_date = records_by_type[listing_type].get('trend_date', '')
                            current_date = record.get('trend_date', '')
                            if current_date > existing_date:
                                records_by_type[listing_type] = record
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ listing_type)
                market_data['age_data'] = list(records_by_type.values())
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ age_data: {len(result.data)} –∑–∞–ø–∏—Å–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ {len(records_by_type)} —Ç–∏–ø–∞–º –≤–æ–∑—Ä–∞—Å—Ç–∞")
            else:
                logger.info("–î–∞–Ω–Ω—ã–µ age_data –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è age_data: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ floor_segment_data
        try:
            query = supabase.table('floor_segment_data').select('*')
            if location_codes.get('country_id'):
                query = query.eq('country_id', location_codes['country_id'])
            if location_codes.get('city_id'):
                query = query.eq('city_id', location_codes['city_id'])
            if location_codes.get('district_id'):
                query = query.eq('district_id', location_codes['district_id'])
            if location_codes.get('county_id'):
                query = query.eq('county_id', location_codes['county_id'])
            
            result = query.execute()
            if result.data:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ listing_type –∏ –±–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                records_by_type = {}
                for record in result.data:
                    listing_type = record.get('listing_type')
                    if listing_type:
                        if listing_type not in records_by_type:
                            records_by_type[listing_type] = record
                        else:
                            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
                            existing_date = records_by_type[listing_type].get('trend_date', '')
                            current_date = record.get('trend_date', '')
                            if current_date > existing_date:
                                records_by_type[listing_type] = record
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ listing_type)
                market_data['floor_segment_data'] = list(records_by_type.values())
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ floor_segment_data: {len(result.data)} –∑–∞–ø–∏—Å–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ {len(records_by_type)} —Ç–∏–ø–∞–º —ç—Ç–∞–∂–µ–π")
            else:
                logger.info("–î–∞–Ω–Ω—ã–µ floor_segment_data –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è floor_segment_data: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ general_data
        try:
            query = supabase.table('general_data').select('*')
            if location_codes.get('country_id'):
                query = query.eq('country_id', location_codes['country_id'])
            if location_codes.get('city_id'):
                query = query.eq('city_id', location_codes['city_id'])
            if location_codes.get('district_id'):
                query = query.eq('district_id', location_codes['district_id'])
            if location_codes.get('county_id'):
                query = query.eq('county_id', location_codes['county_id'])
            
            result = query.execute()
            if result.data:
                # –ë–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–ø–∏—Å—å
                latest_record = max(result.data, key=lambda x: x.get('trend_date', ''))
                market_data['general_data'] = latest_record
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ general_data: {len(result.data)} –∑–∞–ø–∏—Å–µ–π, –≤—ã–±—Ä–∞–Ω–∞ —Å–∞–º–∞—è —Å–≤–µ–∂–∞—è: {latest_record.get('trend_date')}")
            else:
                logger.info("–î–∞–Ω–Ω—ã–µ general_data –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è general_data: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ heating_data
        try:
            query = supabase.table('heating_data').select('*')
            if location_codes.get('country_id'):
                query = query.eq('country_id', location_codes['country_id'])
            if location_codes.get('city_id'):
                query = query.eq('city_id', location_codes['city_id'])
            if location_codes.get('district_id'):
                query = query.eq('district_id', location_codes['district_id'])
            if location_codes.get('county_id'):
                query = query.eq('county_id', location_codes['county_id'])
            
            result = query.execute()
            if result.data:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ listing_type –∏ –±–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                records_by_type = {}
                for record in result.data:
                    listing_type = record.get('listing_type')
                    if listing_type:
                        if listing_type not in records_by_type:
                            records_by_type[listing_type] = record
                        else:
                            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
                            existing_date = records_by_type[listing_type].get('trend_date', '')
                            current_date = record.get('trend_date', '')
                            if current_date > existing_date:
                                records_by_type[listing_type] = record
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ listing_type)
                market_data['heating_data'] = list(records_by_type.values())
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ heating_data: {len(result.data)} –∑–∞–ø–∏—Å–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ {len(records_by_type)} —Ç–∏–ø–∞–º –æ—Ç–æ–ø–ª–µ–Ω–∏—è")
            else:
                logger.info("–î–∞–Ω–Ω—ã–µ heating_data –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è heating_data: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ house_type_data
        try:
            query = supabase.table('house_type_data').select('*')
            if location_codes.get('country_id'):
                query = query.eq('country_id', location_codes['country_id'])
            if location_codes.get('city_id'):
                query = query.eq('city_id', location_codes['city_id'])
            if location_codes.get('district_id'):
                query = query.eq('district_id', location_codes['district_id'])
            if location_codes.get('county_id'):
                query = query.eq('county_id', location_codes['county_id'])
            
            result = query.execute()
            if result.data:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ listing_type –∏ –±–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                records_by_type = {}
                for record in result.data:
                    listing_type = record.get('listing_type')
                    if listing_type:
                        if listing_type not in records_by_type:
                            records_by_type[listing_type] = record
                        else:
                            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
                            existing_date = records_by_type[listing_type].get('trend_date', '')
                            current_date = record.get('trend_date', '')
                            if current_date > existing_date:
                                records_by_type[listing_type] = record
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ listing_type)
                market_data['house_type_data'] = list(records_by_type.values())
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ house_type_data: {len(result.data)} –∑–∞–ø–∏—Å–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ {len(records_by_type)} —Ç–∏–ø–∞–º —Å–ø–∞–ª–µ–Ω")
            else:
                logger.info("–î–∞–Ω–Ω—ã–µ house_type_data –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è house_type_data: {e}")
        
        return market_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞: {e}")
        return None

def get_location_codes(city_name, district_name, county_name):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã locations –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
    
    Args:
        city_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        district_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
        county_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–∞/–ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–¥–∞–º–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    """
    try:
        location_codes = {
            'city_code': None,
            'district_code': None,
            'county_code': None,
            'country_code': None
        }
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        query = supabase.table('locations').select('*')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        if city_name:
            query = query.eq('city_name', city_name)
        if district_name:
            query = query.eq('district_name', district_name)
        if county_name:
            query = query.eq('county_name', county_name)
            
        result = query.execute()
        
        if result.data:
            # –ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å
            record = result.data[0]
            location_codes['city_code'] = record.get('city_id')
            location_codes['district_code'] = record.get('district_id')
            location_codes['county_code'] = record.get('county_id')
            location_codes['country_code'] = record.get('country_id')
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π: {location_codes}")
            return location_codes
        else:
            # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            logger.warning(f"–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
            
            # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–π–æ–Ω—É
            if district_name:
                district_result = supabase.table('locations').select('*').eq('district_name', district_name).execute()
                if district_result.data:
                    location_codes['district_code'] = district_result.data[0].get('district_id')
            
            # –ü–æ–∏—Å–∫ –ø–æ –æ–∫—Ä—É–≥—É
            if county_name:
                county_result = supabase.table('locations').select('*').eq('county_name', county_name).execute()
                if county_result.data:
                    location_codes['county_code'] = county_result.data[0].get('county_id')
            
            # –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É
            if city_name:
                city_result = supabase.table('locations').select('*').eq('city_name', city_name).execute()
                if city_result.data:
                    location_codes['city_code'] = city_result.data[0].get('city_id')
        
        return location_codes
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –ª–æ–∫–∞—Ü–∏–π: {e}")
        return None

def get_property_trends_data(city_name, district_name, county_name):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã property_trends
    
    Args:
        city_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        district_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
        county_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–∞/–ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
    
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞
        from datetime import datetime
        current_date = datetime.now()
        current_year = current_date.year
        current_month = current_date.month
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —è–Ω–≤–∞—Ä—å, –±–µ—Ä–µ–º –¥–µ–∫–∞–±—Ä—å –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
        if current_month == 1:
            target_year = current_year - 1
            target_month = 12
        else:
            target_year = current_year
            target_month = current_month - 1
        
        logger.info(f"–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è: {city_name}, {district_name}, {county_name}")
        logger.info(f"–¶–µ–ª–µ–≤–æ–π –ø–µ—Ä–∏–æ–¥: {target_month}/{target_year}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π
        location_codes = get_location_codes(city_name, district_name, county_name)
        
        if not location_codes:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π")
            return None
        
        # –ö–∞—Å–∫–∞–¥–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
        trends_data, message = get_cascading_trends_data(location_codes, target_year, target_month)
        
        if trends_data:
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤: {message}")
            return trends_data, message
        else:
            logger.warning(f"–î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {message}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
            fallback_data = {
                'property_year': target_year,
                'property_month': target_month,
                'avg_price_per_sqm': 15000,
                'price_change_percent': 4.2,
                'transaction_count': 25,
                'days_on_market': 68,
                'rental_yield': 8.1,
                'price_trend': 'stable',
                'market_activity': 'moderate'
            }
            return fallback_data, "Fallback –¥–∞–Ω–Ω—ã–µ (–Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {e}")
        return None, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"

def get_cascading_trends_data(location_codes, target_year, target_month):
    """
    –ö–∞—Å–∫–∞–¥–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ —Å fallback –ª–æ–≥–∏–∫–æ–π
    
    Args:
        location_codes (dict): –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–¥–∞–º–∏ –ª–æ–∫–∞—Ü–∏–π
        target_year (int): –¶–µ–ª–µ–≤–æ–π –≥–æ–¥
        target_month (int): –¶–µ–ª–µ–≤–æ–π –º–µ—Å—è—Ü
    
    Returns:
        tuple: (data, message) - –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∏–ø–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        city_code = location_codes.get('city_code')
        district_code = location_codes.get('district_code')
        county_code = location_codes.get('county_code')
        country_id = 1  # T√ºrkiye
        
        # 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if city_code and district_code and county_code:
            query = supabase.table('property_trends').select('*').eq('city_id', city_code).eq('district_id', district_code).eq('county_id', county_code).eq('property_year', target_year).eq('property_month', target_month)
            result = query.execute()
            
            if result.data:
                logger.info("–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é")
                return result.data[0], f"–î–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–π–æ–Ω—É (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)"
        
        # 2. –ï—Å–ª–∏ district_code –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ county_code
        if county_code:
            query = supabase.table('property_trends').select('*').eq('county_id', county_code).is_('city_id', 'null').is_('district_id', 'null').eq('property_year', target_year).eq('property_month', target_month)
            result = query.execute()
            
            if result.data:
                logger.info("–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–∫—Ä—É–≥—É")
                return result.data[0], f"–î–∞–Ω–Ω—ã–µ –ø–æ –æ–∫—Ä—É–≥—É (county_id={county_code})"
        
        # 3. –ï—Å–ª–∏ county_code –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ city_code
        if city_code:
            query = supabase.table('property_trends').select('*').eq('city_id', city_code).is_('district_id', 'null').is_('county_id', 'null').eq('property_year', target_year).eq('property_month', target_month)
            result = query.execute()
            
            if result.data:
                logger.info("–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥—É")
                return result.data[0], f"–î–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥—É (city_id={city_code})"
        
        # 4. –ï—Å–ª–∏ city_code –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ country_id
        query = supabase.table('property_trends').select('*').eq('country_id', country_id).is_('city_id', 'null').is_('district_id', 'null').is_('county_id', 'null').eq('property_year', target_year).eq('property_month', target_month)
        result = query.execute()
        
        if result.data:
            logger.info("–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ")
            return result.data[0], f"–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ (country_id={country_id})"
        
        # 5. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        logger.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö")
        return None, "–ü–æ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö"

def get_nominatim_location(address):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Nominatim API
    
    Args:
        address (str): –ê–¥—Ä–µ—Å –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Returns:
        dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ None
    """
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ Nominatim API
        url = "https://nominatim.openstreetmap.org/search"
        params = {
            'q': address,
            'format': 'json',
            'addressdetails': 1,
            'limit': 1
        }
        headers = {
            'User-Agent': 'Aaadviser/1.0'
        }
        
        try:
            response = requests.get(url, params=params, headers=headers, timeout=30)
            result = response.json()
        except requests.exceptions.Timeout:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Nominatim API (30 —Å–µ–∫—É–Ω–¥)")
            return None
        except requests.exceptions.ConnectionError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Nominatim API: {e}")
            return None
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Nominatim API: {e}")
            return None
        
        if result and len(result) > 0:
            location = result[0]
            address_details = location.get('address', {})
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            location_data = {
                'country': address_details.get('country'),
                'country_code': address_details.get('country_code'),
                'city': address_details.get('city') or address_details.get('town'),
                'district': address_details.get('suburb') or address_details.get('neighbourhood'),
                'county': address_details.get('county') or address_details.get('state'),
                'postal_code': address_details.get('postcode'),
                'road': address_details.get('road'),
                'house_number': address_details.get('house_number'),
                'lat': location.get('lat'),
                'lon': location.get('lon'),
                'display_name': location.get('display_name')
            }
            
            logger.info(f"Nominatim –¥–∞–Ω–Ω—ã–µ: {location_data}")
            return location_data
        
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Nominatim API: {e}")
        return None

def extract_location_components(address_components, original_address=None):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Places API address_components
    
    Args:
        address_components (list): –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–¥—Ä–µ—Å–∞ –æ—Ç Google API
        original_address (str): –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å country, city, district, county
    """
    location_data = {
        'country': None,
        'country_code': None,
        'city': None,
        'district': None,
        'county': None,
        'postal_code': None
    }
    
    for component in address_components:
        types = component.get('types', [])
        long_name = component.get('long_name', '')
        short_name = component.get('short_name', '')
        
        # –°—Ç—Ä–∞–Ω–∞
        if 'country' in types:
            location_data['country'] = long_name
            location_data['country_code'] = short_name
        
        # –ì–æ—Ä–æ–¥ (administrative_area_level_1 –∏–ª–∏ locality)
        elif 'administrative_area_level_1' in types:
            location_data['city'] = long_name
        elif 'locality' in types and not location_data['city']:
            location_data['city'] = long_name
        
        # –†–∞–π–æ–Ω (sublocality_level_1 –∏–ª–∏ sublocality)
        elif 'sublocality_level_1' in types:
            location_data['district'] = long_name
        elif 'sublocality' in types and not location_data['district']:
            location_data['district'] = long_name
        
        # –û–∫—Ä—É–≥ (administrative_area_level_2)
        elif 'administrative_area_level_2' in types and not location_data['county']:
            location_data['county'] = long_name
        
        # –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
        elif 'postal_code' in types:
            location_data['postal_code'] = long_name
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç—É—Ä–µ—Ü–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
    if original_address and (location_data['country'] == 'Turkey' or location_data['country'] == 'T√ºrkiye'):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–π–æ–Ω –∏–∑ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞
        address_parts = original_address.split(',')
        if len(address_parts) >= 1:
            first_part = address_parts[0].strip()
            # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "Sk.", "Sok.", "Mah." –∏ —Ç.–¥.
            district_name = first_part.replace(' Sk.', '').replace(' Sok.', '').replace(' Mah.', '').replace(' Mahallesi', '')
            
            # –ï—Å–ª–∏ Google –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª district, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π
            if not location_data['district']:
                location_data['district'] = district_name
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω —Ä–∞–π–æ–Ω –∏–∑ –∞–¥—Ä–µ—Å–∞ (Google –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª): {district_name}")
            else:
                logger.info(f"Google –æ–ø—Ä–µ–¥–µ–ª–∏–ª district: {location_data['district']}, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π: {district_name}")
    
    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–æ–∫–∞—Ü–∏–∏: {location_data}")
    return location_data

def find_location_codes_from_components(location_components):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Google Places API
    
    Args:
        location_components (dict): –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
    
    Returns:
        dict: –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –∏–ª–∏ None
    """
    try:
        if not location_components:
            return None
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_data = {
            'country_name': location_components.get('country'),
            'city_name': location_components.get('city'),
            'district_name': location_components.get('district'),
            'county_name': location_components.get('county')
        }
        
        # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        search_data = {k: v for k, v in search_data.items() if v is not None}
        
        if not search_data:
            return None
        
        logger.info(f"–ò—â–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ –±–∞–∑–µ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º: {search_data}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
        logger.info("\nüîç –í–ê–†–ò–ê–ù–¢–´ –ü–û–ò–°–ö–ê –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
        logger.info("1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º")
        logger.info("2. –ü–æ county_name –∏ city_name")
        logger.info("3. –ü–æ district_name –∏ city_name")
        logger.info("4. –¢–æ–ª—å–∫–æ –ø–æ county_name")
        logger.info("5. –¢–æ–ª—å–∫–æ –ø–æ district_name")
        
        # –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ locations - —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        query = supabase.table('locations').select('*')
        
        if search_data.get('city_name'):
            query = query.eq('city_name', search_data['city_name'])
        if search_data.get('county_name'):
            query = query.eq('county_name', search_data['county_name'])
        if search_data.get('district_name'):
            query = query.eq('district_name', search_data['district_name'])
        if search_data.get('country_name'):
            query = query.eq('country_name', search_data['country_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ): {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ county_name –∏ city_name
        logger.info("–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ county_name –∏ city_name")
        query = supabase.table('locations').select('*')
        if search_data.get('county_name'):
            query = query.eq('county_name', search_data['county_name'])
        if search_data.get('city_name'):
            query = query.eq('city_name', search_data['city_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –ø–æ county_name –∏ city_name: {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –∏—â–µ–º –ø–æ district_name –∏ city_name
        logger.info("–ò—â–µ–º –ø–æ district_name –∏ city_name")
        query = supabase.table('locations').select('*')
        if search_data.get('district_name'):
            query = query.eq('district_name', search_data['district_name'])
        if search_data.get('city_name'):
            query = query.eq('city_name', search_data['city_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –ø–æ district_name –∏ city_name: {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ county_name
        logger.info("–ò—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ county_name")
        query = supabase.table('locations').select('*')
        if search_data.get('county_name'):
            query = query.eq('county_name', search_data['county_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –ø–æ county_name: {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ district_name
        logger.info("–ò—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ district_name")
        query = supabase.table('locations').select('*')
        if search_data.get('district_name'):
            query = query.eq('district_name', search_data['district_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –ø–æ district_name: {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        logger.warning(f"‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {search_data}")
        return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–¥–æ–≤ –ª–æ–∫–∞—Ü–∏–π: {e}")
        return None

def extract_location_from_address(address):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω –∏ –æ–∫—Ä—É–≥ –∏–∑ –∞–¥—Ä–µ—Å–∞
    
    Args:
        address (str): –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å city_name, district_name, county_name
    """
    try:
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–ª—è —Ç—É—Ä–µ—Ü–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
        address_parts = address.split(',')
        
        location_data = {
            'city_name': None,
            'district_name': None,
            'county_name': None,
            'country_name': 'Turkey'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç—É—Ä–µ—Ü–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
        }
        
        if len(address_parts) >= 3:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: "Zerdalilik, 07100 Muratpa≈üa/Antalya, T√ºrkiye"
            if 'Muratpa≈üa/Antalya' in address_parts[1]:
                location_data['city_name'] = 'Antalya'
                location_data['county_name'] = 'Muratpa≈üa'
                location_data['district_name'] = address_parts[0].strip()
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: "Avsallar, Cengiz Akay Sk. No:12, 07410 Alanya/Antalya, T√ºrkiye"
            elif 'Alanya/Antalya' in address_parts[2]:
                location_data['city_name'] = 'Antalya'
                location_data['county_name'] = 'Alanya'
                location_data['district_name'] = address_parts[0].strip()
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: "Baraj, 5890. Sk. No:584, 07320 Kepez/Antalya, T√ºrkiye"
            elif 'Kepez/Antalya' in address_parts[2]:
                location_data['city_name'] = 'Antalya'
                location_data['county_name'] = 'Kepez'
                location_data['district_name'] = address_parts[0].strip()
            else:
                # –î–ª—è –∞–¥—Ä–µ—Å–∞: "Antalya, Alanya, Avsallar Mah., Cengiz Akay Sok., 12B"
                # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å: –≥–æ—Ä–æ–¥ (Antalya) - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥
                location_data['city_name'] = address_parts[0].strip()
                
                # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å: –æ–∫—Ä—É–≥/—Ä–∞–π–æ–Ω (Alanya) - —ç—Ç–æ –æ–∫—Ä—É–≥
                location_data['county_name'] = address_parts[1].strip()
                
                # –¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å: —Ä–∞–π–æ–Ω (Avsallar Mah.) - —ç—Ç–æ —Ä–∞–π–æ–Ω
                district_name = address_parts[2].strip()
                # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "Mah.", "Mahallesi", "Sok." –∏ —Ç.–¥.
                district_name = district_name.replace(' Mah.', '').replace(' Mahallesi', '').replace(' Sok.', '').replace(' Sk.', '')
                location_data['district_name'] = district_name
                
        elif len(address_parts) >= 2:
            # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
            location_data['district_name'] = address_parts[0].strip()
            location_data['city_name'] = address_parts[1].strip()
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if not location_data['city_name']:
            location_data['city_name'] = 'Alanya'  # Default –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
        if not location_data['district_name']:
            location_data['district_name'] = 'Avsallar'  # Default —Ä–∞–π–æ–Ω
        if not location_data['county_name']:
            location_data['county_name'] = 'Antalya'  # Default –ø—Ä–æ–≤–∏–Ω—Ü–∏—è
        
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –∞–¥—Ä–µ—Å–∞: {location_data}")
        return location_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –∞–¥—Ä–µ—Å–∞: {e}")
        return {
            'city_name': 'Alanya',
            'district_name': 'Avsallar', 
            'county_name': 'Antalya'
        }

def get_historical_property_trends(city_name, district_name, county_name, years_back=5):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã
    
    Args:
        city_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        district_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
        county_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–∞/–ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
        years_back (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –≥–æ–¥–∞–º –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∏ –∞—Ä–µ–Ω–¥—ã
    """
    try:
        from datetime import datetime
        current_date = datetime.now()
        current_year = current_date.year
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ years_back –ª–µ—Ç
        historical_data = {
            'sale_prices': [],
            'rent_prices': [],
            'years': []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π
        location_codes = get_location_codes(city_name, district_name, county_name)
        
        if not location_codes:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            return None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å–∫–∞–¥–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞
        data_source_message = None
        
        for year_offset in range(years_back):
            target_year = current_year - year_offset
            
            # –ö–∞—Å–∫–∞–¥–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
            year_data, message = get_cascading_historical_data(location_codes, target_year)
            
            if year_data:
                # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –≥–æ–¥
                sale_prices = []
                rent_prices = []
                
                for record in year_data:
                    if record.get('unit_price_for_sale'):
                        sale_prices.append(record['unit_price_for_sale'])
                    if record.get('unit_price_for_rent'):
                        rent_prices.append(record['unit_price_for_rent'])
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if sale_prices:
                    historical_data['sale_prices'].append(sum(sale_prices) / len(sale_prices))
                else:
                    historical_data['sale_prices'].append(None)
                
                if rent_prices:
                    historical_data['rent_prices'].append(sum(rent_prices) / len(rent_prices))
                else:
                    historical_data['rent_prices'].append(None)
                
                historical_data['years'].append(target_year)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö (–±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ)
                if data_source_message is None:
                    data_source_message = message
            else:
                historical_data['sale_prices'].append(None)
                historical_data['rent_prices'].append(None)
                historical_data['years'].append(target_year)
        
        # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ —á—Ç–æ–±—ã –≥–æ–¥—ã —à–ª–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        historical_data['sale_prices'].reverse()
        historical_data['rent_prices'].reverse()
        historical_data['years'].reverse()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(historical_data['years'])} –ª–µ—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö
        if data_source_message:
            historical_data['data_source'] = data_source_message
        
        return historical_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        return None

def get_cascading_historical_data(location_codes, target_year):
    """
    –ö–∞—Å–∫–∞–¥–Ω—ã–π –ø–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ —Å fallback –ª–æ–≥–∏–∫–æ–π
    
    Args:
        location_codes (dict): –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–¥–∞–º–∏ –ª–æ–∫–∞—Ü–∏–π
        target_year (int): –¶–µ–ª–µ–≤–æ–π –≥–æ–¥
    
    Returns:
        tuple: (data, message) - –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∏–ø–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        city_code = location_codes.get('city_code')
        district_code = location_codes.get('district_code')
        county_code = location_codes.get('county_code')
        country_id = 1  # T√ºrkiye
        
        # 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if city_code and district_code and county_code:
            query = supabase.table('property_trends').select('*').eq('city_id', city_code).eq('district_id', district_code).eq('county_id', county_code).eq('property_year', target_year)
            result = query.execute()
            
            if result.data:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –¥–ª—è {target_year}")
                return result.data, f"–î–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–π–æ–Ω—É (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)"
        
        # 2. –ï—Å–ª–∏ district_code –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ county_code
        if county_code:
            query = supabase.table('property_trends').select('*').eq('county_id', county_code).is_('city_id', 'null').is_('district_id', 'null').eq('property_year', target_year)
            result = query.execute()
            
            if result.data:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–∫—Ä—É–≥—É –¥–ª—è {target_year}")
                return result.data, f"–î–∞–Ω–Ω—ã–µ –ø–æ –æ–∫—Ä—É–≥—É (county_id={county_code})"
        
        # 3. –ï—Å–ª–∏ county_code –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ city_code
        if city_code:
            query = supabase.table('property_trends').select('*').eq('city_id', city_code).is_('district_id', 'null').is_('county_id', 'null').eq('property_year', target_year)
            result = query.execute()
            
            if result.data:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥—É –¥–ª—è {target_year}")
                return result.data, f"–î–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥—É (city_id={city_code})"
        
        # 4. –ï—Å–ª–∏ city_code –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ country_id
        query = supabase.table('property_trends').select('*').eq('country_id', country_id).is_('city_id', 'null').is_('district_id', 'null').is_('county_id', 'null').eq('property_year', target_year)
        result = query.execute()
        
        if result.data:
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ –¥–ª—è {target_year}")
            return result.data, f"–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ (country_id={country_id})"
        
        # 5. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        logger.warning(f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö –¥–ª—è {target_year}")
        return None, "–ü–æ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"

def create_property_trends_chart(historical_data, chart_type='sale', width=180, height=100):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è PDF
    
    Args:
        historical_data (dict): –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤
        chart_type (str): –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ ('sale' –∏–ª–∏ 'rent')
        width (int): –®–∏—Ä–∏–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –º–º
        height (int): –í—ã—Å–æ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –º–º
    
    Returns:
        BytesIO: –ë—É—Ñ–µ—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        import matplotlib.pyplot as plt
        import matplotlib.font_manager as fm
        from io import BytesIO
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        plt.rcParams['font.family'] = 'DejaVu Sans'
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
        fig, ax = plt.subplots(figsize=(width/25.4, height/25.4), dpi=200)
        
        years = historical_data['years']
        if chart_type == 'sale':
            prices = historical_data['sale_prices']
            title = '–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (‚Ç¨/–º¬≤)'
            color = '#667eea'
        else:
            prices = historical_data['rent_prices']
            title = '–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –Ω–∞ –∞—Ä–µ–Ω–¥—É (‚Ç¨/–º¬≤)'
            color = '#dc3545'
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        valid_data = [(year, price) for year, price in zip(years, prices) if price is not None]
        
        if valid_data:
            valid_years, valid_prices = zip(*valid_data)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            ax.plot(valid_years, valid_prices, marker='o', linewidth=2, markersize=4, 
                   color=color, alpha=0.8)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
            ax.set_title(title, fontsize=10, fontname='DejaVu Sans', pad=10)
            ax.set_xlabel('–ì–æ–¥', fontsize=8, fontname='DejaVu Sans')
            ax.set_ylabel('–¶–µ–Ω–∞ (‚Ç¨/–º¬≤)', fontsize=8, fontname='DejaVu Sans')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
            ax.grid(True, alpha=0.3)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–∫–æ–≤
            ax.tick_params(axis='both', which='major', labelsize=7)
            
            # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ X –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            plt.setp(ax.get_xticklabels(), rotation=45, ha='right')
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
            plt.tight_layout()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', ha='center', va='center', 
                   transform=ax.transAxes, fontsize=10, fontname='DejaVu Sans')
            ax.set_title(title, fontsize=10, fontname='DejaVu Sans', pad=10)
            ax.set_xlim(0, 1)
            ax.set_ylim(0, 1)
            ax.axis('off')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buffer = BytesIO()
        plt.savefig(buffer, format='png', dpi=200, bbox_inches='tight')
        buffer.seek(0)
        plt.close()
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ {chart_type}: {len(valid_data) if valid_data else 0} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
        return buffer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ {chart_type}: {e}")
        # –°–æ–∑–¥–∞–µ–º placeholder –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            fig, ax = plt.subplots(figsize=(width/25.4, height/25.4), dpi=200)
            ax.text(0.5, 0.5, '–û—à–∏–±–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞', ha='center', va='center', 
                   transform=ax.transAxes, fontsize=8, fontname='DejaVu Sans')
            ax.set_title(f'–¢—Ä–µ–Ω–¥—ã {chart_type}', fontsize=8, fontname='DejaVu Sans', pad=10)
            ax.set_xlim(0, 1)
            ax.set_ylim(0, 1)
            ax.axis('off')
            
            buffer = BytesIO()
            plt.savefig(buffer, format='png', dpi=200, bbox_inches='tight')
            buffer.seek(0)
            plt.close()
            
            return buffer
        except:
            return None

def get_openai_api_key():
    """
    –ü–æ–ª—É—á–∞–µ—Ç OpenAI API –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        str: API –∫–ª—é—á –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        openai_key_row = supabase.table('api_keys').select('key_value').eq('key_name', 'OPENAI_API').execute().data
        
        if openai_key_row and isinstance(openai_key_row, list) and len(openai_key_row) > 0:
            key_data = openai_key_row[0]
            if isinstance(key_data, dict) and 'key_value' in key_data:
                api_key = key_data['key_value']
                if api_key and api_key.strip():
                    logger.info("OpenAI API key retrieved from database successfully")
                    return api_key.strip()
        
        logger.warning("OpenAI API key not found in database")
        return ''
        
    except Exception as e:
        logger.error(f"Error retrieving OpenAI API key from database: {e}")
        return ''

def generate_trend_interpretation_with_chatgpt(gdp_trend, inflation_trend, gdp_data, inflation_data, language='en'):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ç—Ä–µ–Ω–¥–æ–≤ —á–µ—Ä–µ–∑ ChatGPT
    
    Args:
        gdp_trend (float): –¢—Ä–µ–Ω–¥ –í–í–ü
        inflation_trend (float): –¢—Ä–µ–Ω–¥ –∏–Ω—Ñ–ª—è—Ü–∏–∏
        gdp_data (list): –î–∞–Ω–Ω—ã–µ –í–í–ü
        inflation_data (list): –î–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏
        language (str): –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ (en, ru, tr, fr, de)
    
    Returns:
        dict: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    """
    try:
        import openai
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–æ–≤
        languages = {
            'en': 'English',
            'ru': 'Russian', 
            'tr': 'Turkish',
            'fr': 'French',
            'de': 'German'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if len(gdp_data) >= 2 and len(inflation_data) >= 2:
            gdp_last_2 = [d['value'] for d in gdp_data[-2:]]
            inflation_last_2 = [d['value'] for d in inflation_data[-2:]]
            recent_gdp_change = ((gdp_last_2[1] - gdp_last_2[0]) / gdp_last_2[0]) * 100 if gdp_last_2[0] != 0 else 0
            recent_inflation_change = ((inflation_last_2[1] - inflation_last_2[0]) / inflation_last_2[0]) * 100 if inflation_last_2[0] != 0 else 0
        else:
            recent_gdp_change = 0
            recent_inflation_change = 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT
        prompt = f"""
        Analyze economic trends for Turkey and provide interpretations in {languages.get(language, 'English')}.
        
        GDP Trend: {gdp_trend:.1f}%
        Inflation Trend: {inflation_trend:.1f}%
        Recent GDP change (last 2 years): {recent_gdp_change:.1f}%
        Recent Inflation change (last 2 years): {recent_inflation_change:.1f}%
        
        GDP data: {gdp_data}
        Inflation data: {inflation_data}
        
        Please provide:
        1. GDP trend interpretation (2-3 sentences)
        2. Inflation trend interpretation (2-3 sentences) 
        3. Recent comparison interpretation (last 2 years, 2-3 sentences)
        
        Format as JSON:
        {{
            "gdp_interpretation": "...",
            "inflation_interpretation": "...", 
            "recent_comparison": "..."
        }}
        """
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        openai_api_key = get_openai_api_key()
        
        if openai_api_key and OPENAI_AVAILABLE:
            try:
                from openai import OpenAI
                client = OpenAI(api_key=openai_api_key)
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=300,
                    temperature=0.7
                )
                result = json.loads(response.choices[0].message.content)
                logger.info(f"ChatGPT interpretation generated successfully for language: {language}")
            except Exception as e:
                logger.warning(f"ChatGPT API error: {e}, using fallback")
                result = {
                    "gdp_interpretation": f"GDP trend shows {gdp_trend:.1f}% average growth, indicating strong economic expansion",
                    "inflation_interpretation": f"Inflation trend at {inflation_trend:.1f}% shows significant price increases",
                    "recent_comparison": f"Recent 2-year comparison shows GDP change of {recent_gdp_change:.1f}% and inflation change of {recent_inflation_change:.1f}%"
                }
        else:
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –±–µ–∑ ChatGPT
            logger.info("No OpenAI API key available, using fallback interpretation")
            result = {
                "gdp_interpretation": f"GDP trend shows {gdp_trend:.1f}% average growth, indicating strong economic expansion",
                "inflation_interpretation": f"Inflation trend at {inflation_trend:.1f}% shows significant price increases",
                "recent_comparison": f"Recent 2-year comparison shows GDP change of {recent_gdp_change:.1f}% and inflation change of {recent_inflation_change:.1f}%"
            }
        
        return result
        
    except Exception as e:
        logger.error(f"Error generating ChatGPT interpretation: {e}")
        return {
            "gdp_interpretation": f"GDP trend: {gdp_trend:.1f}%",
            "inflation_interpretation": f"Inflation trend: {inflation_trend:.1f}%",
            "recent_comparison": "Recent comparison data unavailable"
        }

def generate_detailed_calculations(gdp_data, inflation_data):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ç—Ä–µ–Ω–¥–æ–≤
    
    Args:
        gdp_data (list): –î–∞–Ω–Ω—ã–µ –í–í–ü
        inflation_data (list): –î–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏
    
    Returns:
        dict: –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
    """
    try:
        # –†–∞—Å—á–µ—Ç—ã –¥–ª—è –í–í–ü
        gdp_calculations = []
        gdp_values = [d['value'] for d in gdp_data]
        
        for i in range(1, len(gdp_values)):
            year1 = gdp_data[i-1]['year']
            year2 = gdp_data[i]['year']
            val1 = gdp_values[i-1]
            val2 = gdp_values[i]
            
            if val1 != 0:
                change = (val2 - val1) / val1
                gdp_calculations.append({
                    'years': f"{year1}‚Üí{year2}",
                    'calculation': f"({val2:.1f} - {val1:.1f}) / {val1:.1f}",
                    'result': f"{change:.3f}"
                })
        
        # –†–∞—Å—á–µ—Ç—ã –¥–ª—è –∏–Ω—Ñ–ª—è—Ü–∏–∏
        inflation_calculations = []
        inflation_values = [d['value'] for d in inflation_data]
        
        for i in range(1, len(inflation_values)):
            year1 = inflation_data[i-1]['year']
            year2 = inflation_data[i]['year']
            val1 = inflation_values[i-1]
            val2 = inflation_values[i]
            
            if val1 != 0:
                change = (val2 - val1) / val1
                inflation_calculations.append({
                    'years': f"{year1}‚Üí{year2}",
                    'calculation': f"({val2:.1f} - {val1:.1f}) / {val1:.1f}",
                    'result': f"{change:.3f}"
                })
        
        return {
            'gdp_calculations': gdp_calculations,
            'inflation_calculations': inflation_calculations,
            'gdp_values': gdp_values,
            'inflation_values': inflation_values
        }
        
    except Exception as e:
        logger.error(f"Error generating detailed calculations: {e}")
        return {
            'gdp_calculations': [],
            'inflation_calculations': [],
            'gdp_values': [],
            'inflation_values': []
        }

def save_interpretations_to_database(country_code, interpretations, calculations):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        country_code (str): –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã
        interpretations (dict): –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        calculations (dict): –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
    """
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ imf_economic_data
        for indicator in ['NGDP_RPCH', 'PCPIPCH']:
            supabase.table('imf_economic_data').update({
                'gdp_trend_interpretation_en': interpretations.get('en', {}).get('gdp_interpretation', ''),
                'gdp_trend_interpretation_ru': interpretations.get('ru', {}).get('gdp_interpretation', ''),
                'gdp_trend_interpretation_tr': interpretations.get('tr', {}).get('gdp_interpretation', ''),
                'gdp_trend_interpretation_fr': interpretations.get('fr', {}).get('gdp_interpretation', ''),
                'gdp_trend_interpretation_de': interpretations.get('de', {}).get('gdp_interpretation', ''),
                'inflation_trend_interpretation_en': interpretations.get('en', {}).get('inflation_interpretation', ''),
                'inflation_trend_interpretation_ru': interpretations.get('ru', {}).get('inflation_interpretation', ''),
                'inflation_trend_interpretation_tr': interpretations.get('tr', {}).get('inflation_interpretation', ''),
                'inflation_trend_interpretation_fr': interpretations.get('fr', {}).get('inflation_interpretation', ''),
                'inflation_trend_interpretation_de': interpretations.get('de', {}).get('inflation_interpretation', ''),
                'recent_comparison_interpretation_en': interpretations.get('en', {}).get('recent_comparison', ''),
                'recent_comparison_interpretation_ru': interpretations.get('ru', {}).get('recent_comparison', ''),
                'recent_comparison_interpretation_tr': interpretations.get('tr', {}).get('recent_comparison', ''),
                'recent_comparison_interpretation_fr': interpretations.get('fr', {}).get('recent_comparison', ''),
                'recent_comparison_interpretation_de': interpretations.get('de', {}).get('recent_comparison', ''),
                'gdp_calculation_details': json.dumps(calculations.get('gdp_calculations', [])),
                'inflation_calculation_details': json.dumps(calculations.get('inflation_calculation_details', []))
            }).eq('country_code', country_code).eq('indicator_code', indicator).execute()
            
        logger.info(f"Interpretations saved to database for country {country_code}")
        
    except Exception as e:
        logger.error(f"Error saving interpretations to database: {e}")

def load_interpretations_from_database(country_code):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        country_code (str): –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã
    
    Returns:
        dict: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∏–ª–∏ None
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã imf_economic_data
        result = supabase.table('imf_economic_data').select('*').eq('country_code', country_code).eq('indicator_code', 'NGDP_RPCH').execute()
        
        if result.data and len(result.data) > 0:
            record = result.data[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            if record.get('gdp_trend_interpretation_en') and record.get('inflation_trend_interpretation_en'):
                interpretations = {}
                for lang in ['en', 'ru', 'tr', 'fr', 'de']:
                    interpretations[lang] = {
                        'gdp_interpretation': record.get(f'gdp_trend_interpretation_{lang}', ''),
                        'inflation_interpretation': record.get(f'inflation_trend_interpretation_{lang}', ''),
                        'recent_comparison': record.get(f'recent_comparison_interpretation_{lang}', '')
                    }
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
                calculations = {
                    'gdp_calculations': json.loads(record.get('gdp_calculation_details', '[]')),
                    'inflation_calculations': json.loads(record.get('inflation_calculation_details', '[]'))
                }
                
                logger.info(f"Interpretations loaded from database for country {country_code}")
                return interpretations, calculations
        
        return None, None
        
    except Exception as e:
        logger.error(f"Error loading interpretations from database: {e}")
        return None, None

if __name__ == '__main__':
    run_flask()