import os
import logging
from flask import Flask, request, jsonify, send_file, send_from_directory
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, Bot
from supabase import create_client, Client
from dotenv import load_dotenv
import threading
import asyncio
from locales import locales
import requests
from datetime import datetime, timedelta
from fpdf import FPDF
from fpdf.enums import XPos, YPos
import tempfile
import os
from dateutil.relativedelta import relativedelta
import random
import string
import json
import math
import re
import io
import base64
import time
from PIL import Image
import numpy as np

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è price_trends_functions
try:
    from price_trends_functions import get_price_trends_data, analyze_price_trend, calculate_3year_change, calculate_3month_forecast, format_chart_data
    logger.info("‚úÖ –ú–æ–¥—É–ª—å price_trends_functions —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è price_trends_functions: {e}")
    get_price_trends_data = None
    analyze_price_trend = None
    calculate_3year_change = None
    calculate_3month_forecast = None
    format_chart_data = None

# –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç openai
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    logger.warning("OpenAI library not available. ChatGPT features will use fallback mode.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
supabase_url = os.getenv("SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_ANON_KEY")
if not supabase_url or not supabase_key:
    raise RuntimeError("SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
import httpx
from httpx import TimeoutException, ConnectTimeout

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
try:
    # –°–æ–∑–¥–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (—Ç–∞–π–º–∞—É—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ safe_db_operation)
    supabase: Client = create_client(
        supabase_url, 
        supabase_key
    )
    logger.info("‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    raise

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# URL –≤–∞—à–µ–≥–æ WebApp (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è)
WEBAPP_URL = "https://aaadvisor-zaicevn.amvera.io/webapp"

# Google Maps API –∫–ª—é—á
GOOGLE_MAPS_API_KEY = "AIzaSyBrDkDpNKNAIyY147MQ78hchBkeyCAxhEw"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
ENABLE_NOMINATIM = os.getenv('ENABLE_NOMINATIM', 'true').lower() == 'true'
NOMINATIM_TIMEOUT = int(os.getenv('NOMINATIM_TIMEOUT', '15'))
ENABLE_GOOGLE_MAPS = os.getenv('ENABLE_GOOGLE_MAPS', 'true').lower() == 'true'  # Google Maps API –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
GOOGLE_MAPS_TIMEOUT = int(os.getenv('GOOGLE_MAPS_TIMEOUT', '30'))  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
#     user = update.effective_user
#     if not user or not hasattr(user, 'id'):
#         await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
#         return
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     try:
#         result = supabase.table('users').select('*').eq('telegram_id', user.id).execute()
        
#         if result.data:
#             # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
#             welcome_message = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {getattr(user, 'first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}! üëã"
#         else:
#             # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
#             welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {getattr(user, 'first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ"
            
#             # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#             supabase.table('users').insert({
#                 'telegram_id': user.id,
#                 'username': getattr(user, 'username', None),
#                 'tg_name': getattr(user, 'first_name', None),
#                 'last_name': getattr(user, 'last_name', None)
#             }).execute()
            
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
#         welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {getattr(user, 'first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ"
    
#     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WebApp
#     keyboard = [
#         [KeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å WebApp", web_app=WebAppInfo(url=WEBAPP_URL))]
#     ]
#     reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
#     await update.message.reply_text(
#         welcome_message,
#         reply_markup=reply_markup
#     )

# async def webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp"""
#     data = update.message.web_app_data.data
#     user = update.effective_user
    
#     await update.message.reply_text(
#         f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp: {data}\n"
#         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {getattr(user, 'first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}"
#     )

# async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
#     user = update.effective_user
#     await update.message.reply_text(
#         f"–ü—Ä–∏–≤–µ—Ç, {getattr(user, 'first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É WebApp –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
#     )

# def main() -> None:
#     """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
#     logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
#     # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
#     application = Application.builder().token(TOKEN).build()

#     # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
#     application.add_handler(CommandHandler("start", start))
#     application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webapp_data))
#     application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

#     # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è WebApp)
#     # application.run_polling(allowed_updates=Update.ALL_TYPES)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def safe_db_operation(operation, max_retries=5, retry_delay=5):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å retry –ª–æ–≥–∏–∫–æ–π
    
    Args:
        operation: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        retry_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    for attempt in range(max_retries):
        try:
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î {attempt + 1}/{max_retries}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            if attempt > 0:
                time.sleep(1)
            
            result = operation()
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
            return result
        except (TimeoutException, ConnectTimeout, ConnectionError, OSError) as e:
            error_msg = str(e)
            if "handshake operation timed out" in error_msg or "timed out" in error_msg:
                logger.warning(f"SSL/Network timeout on attempt {attempt + 1}/{max_retries}: {error_msg}")
            else:
                logger.warning(f"Database connection error on attempt {attempt + 1}/{max_retries}: {error_msg}")
            
            if attempt < max_retries - 1:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(retry_delay)
                continue
            else:
                logger.error(f"Database operation failed after {max_retries} attempts: {error_msg}")
                return None
        except Exception as e:
            logger.error(f"Database operation error: {e}")
            if attempt < max_retries - 1:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(retry_delay)
                continue
            else:
                logger.error(f"Database operation failed after {max_retries} attempts: {e}")
                return None
    return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try:
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
    test_result = safe_db_operation(
        lambda: supabase.table('users').select('id').limit(1).execute()
    )
    if test_result is not None:
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")

# Flask –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è WebApp
# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ webapp
@app.route('/')
def index():
    """–ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É webapp"""
    from flask import redirect, url_for
    return redirect('/webapp')

@app.route('/webapp')
def webapp():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é WebApp"""
    with open('webapp_main.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_main')
def webapp_main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é WebApp (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç)"""
    with open('webapp_main.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_help')
def webapp_help():
    with open('webapp_help.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_profile')
def webapp_profile():
    with open('webapp_profile.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_profile_data')
def webapp_profile_data():
    with open('webapp_profile_data.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_balance')
def webapp_balance():
    with open('webapp_balance.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_region_analytics')
def webapp_region_analytics():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞"""
    with open('webapp_region_analytics.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_object_evaluation')
def webapp_object_evaluation():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–∞"""
    with open('webapp_object_evaluation.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_my_reports')
def webapp_my_reports():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    with open('webapp_my_reports.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/health')
def health():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return jsonify({"status": "ok", "message": "Telegram WebApp Bot is running"})

@app.route('/favicon.ico')
def favicon():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ favicon.ico"""
    return send_from_directory('.', 'logo-flt.png', mimetype='image/png')

@app.route('/logo-sqv.png')
def serve_logo():
    return send_from_directory('.', 'logo-sqv.png')

@app.route('/logo-flt.png')
def serve_logo_flt():
    return send_from_directory('.', 'logo-flt.png')

@app.route('/reports/<filename>')
def serve_report(filename):
    """–î–æ—Å—Ç—É–ø –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –æ—Ç—á–µ—Ç–∞–º"""
    return send_from_directory('reports', filename)

def determine_user_language(user, telegram_language_code):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ:
    - –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è language –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    - –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ë–î: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —è–∑—ã–∫ –∏–∑ Telegram –∫–∞–∫ fallback
    - –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    user_db_language = user.get('language') if user else None
    
    logger.info(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞: db_language={user_db_language}, telegram_code={telegram_language_code}")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –Ø–∑—ã–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    if user_db_language and user_db_language in locales:
        logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∏–∑ –ë–î: {user_db_language}")
        return user_db_language
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: Fallback –Ω–∞ —è–∑—ã–∫ –∏–∑ Telegram (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ë–î)
    if telegram_language_code:
        telegram_lang = telegram_language_code[:2]
        if telegram_lang in locales:
            logger.info(f"üîÑ –Ø–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram: {telegram_lang}")
            return telegram_lang
        else:
            logger.info(f"‚ö†Ô∏è –Ø–∑—ã–∫ Telegram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ({telegram_lang}): –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
    else:
        logger.info(f"‚ö†Ô∏è –ù–µ—Ç —è–∑—ã–∫–∞ –≤ –ë–î –∏ Telegram: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    return 'en'

@app.route('/api/user', methods=['POST'])
def api_user():
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    username = data.get('username')
    first_name = data.get('tg_name')
    last_name = data.get('last_name')
    language_code = data.get('language_code', 'en')
    referal = data.get('referal')  # invite_code –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if not telegram_id:
        return jsonify({'error': 'telegram_id required'}), 400
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    try:
        user_result = safe_db_operation(
            lambda: supabase.table('users').select('*').eq('telegram_id', telegram_id).execute()
        )
        if user_result is None:
            return jsonify({'error': 'Database connection error'}), 500
        user = user_result.data[0] if user_result.data else None
    except Exception as e:
        logger.error(f"Database connection error: {e}")
        return jsonify({'error': 'Database connection error'}), 500
    if user is not None:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
        lang = determine_user_language(user, language_code)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}: user_status={user.get('user_status')}, "
                   f"telegram_lang={language_code}, determined_lang={lang}")
        
        return jsonify({
            'exists': True,
            'is_new_user': False,
            'language': lang,
            'language_code': lang,
            'welcome': locales[lang]['welcome_back'],
            'menu': locales[lang]['menu'],
            'name': user.get('name'),
            'tg_name': user.get('tg_name'),
            'last_name': user.get('last_name'),
            'username': user.get('username'),
            'balance': user.get('balance', 0),
            'telegram_id': user.get('telegram_id'),
            'user_status': user.get('user_status', None),
            'avatar_filename': user.get('avatar_filename'),
            'language_determined': True  # –§–ª–∞–≥ —á—Ç–æ —è–∑—ã–∫ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        })
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∏–∑ Telegram
        lang = language_code[:2] if language_code[:2] in locales else 'en'
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}: telegram_lang={language_code}, determined_lang={lang}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ invite_code
        def generate_invite_code():
            return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ invite_code
        while True:
            invite_code = generate_invite_code()
            code_check = supabase.table('users').select('invite_code').eq('invite_code', invite_code).execute()
            if not code_check.data:
                break
        user_data = {
            'telegram_id': telegram_id,
            'username': username,
            'tg_name': first_name,
            'last_name': last_name,
            'language': lang,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫
            'balance': 0,
            'invite_code': invite_code
        }
        if referal:
            user_data['referal'] = referal
        try:
            result = safe_db_operation(
                lambda: supabase.table('users').insert(user_data).execute()
            )
            if result is None:
                return jsonify({'error': 'Database connection error'}), 500
        except Exception as e:
            logger.error(f"Error creating new user: {e}")
            return jsonify({'error': 'Database connection error'}), 500
        return jsonify({
            'exists': False,
            'is_new_user': True,
            'language': lang,
            'language_code': lang,
            'welcome': locales[lang]['welcome_new'],
            'choose_language': locales[lang]['choose_language'],
            'languages': locales[lang]['language_names'],
            'balance': 0,
            'telegram_id': telegram_id,
            'invite_code': invite_code,
            'language_determined': True  # –§–ª–∞–≥ —á—Ç–æ —è–∑—ã–∫ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        })

@app.route('/api/user_profile', methods=['POST'])
def api_user_profile():
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    if not telegram_id:
        return jsonify({'error': 'telegram_id required'}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_data = {}
    for field in ['full_name', 'position', 'company_name', 'website_url', 'about_me', 'phone', 'email', 'whatsapp_link', 'telegram_link', 'facebook_link', 'instagram_link']:
        if field in data:
            update_data[field] = data[field]
    
    try:
        if update_data:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            supabase.table('users').update(update_data).eq('telegram_id', telegram_id).execute()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        result = supabase.table('users').select('full_name, position, company_name, website_url, about_me, phone, email, whatsapp_link, telegram_link, facebook_link, instagram_link, avatar_filename').eq('telegram_id', telegram_id).execute()
        if result.data and len(result.data) > 0:
            return jsonify({'success': True, 'profile': result.data[0]})
        else:
            return jsonify({'error': 'User not found'}), 404
    except Exception as e:
        logger.error(f"Error updating/fetching user profile: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/user_avatar', methods=['POST'])
def api_user_avatar():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        telegram_id = request.form.get('telegram_id')
        if not telegram_id:
            return jsonify({'success': False, 'error': 'telegram_id required'}), 400
        
        telegram_id = int(telegram_id)
        
        if 'avatar' not in request.files:
            return jsonify({'success': False, 'error': 'No avatar file'}), 400
        
        file = request.files['avatar']
        if file.filename == '':
            return jsonify({'success': False, 'error': 'No file selected'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not file.content_type.startswith('image/'):
            return jsonify({'success': False, 'error': 'Invalid file type'}), 400
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_folder = os.path.join('user', str(telegram_id))
        os.makedirs(user_folder, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        import uuid
        file_extension = os.path.splitext(file.filename)[1].lower()
        if not file_extension:
            file_extension = '.jpg'
        filename = f"avatar_{uuid.uuid4().hex[:8]}{file_extension}"
        filepath = os.path.join(user_folder, filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file.save(filepath)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        supabase.table('users').update({'avatar_filename': filename}).eq('telegram_id', telegram_id).execute()
        
        return jsonify({'success': True, 'filename': filename})
        
    except Exception as e:
        logger.error(f"Error uploading avatar: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/user/<int:telegram_id>/<filename>')
def serve_user_avatar(telegram_id, filename):
    """–û—Ç–¥–∞—á–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_folder = os.path.join('user', str(telegram_id))
        return send_from_directory(user_folder, filename)
    except Exception as e:
        logger.error(f"Error serving avatar: {e}")
        return '', 404

@app.route('/api/set_language', methods=['POST'])
def api_set_language():
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    language = data.get('language')
    if not language:
        return jsonify({'error': 'language required'}), 400
    if not telegram_id or not language:
        return jsonify({'error': 'telegram_id and language required'}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    if language not in locales:
        return jsonify({'error': 'Unsupported language'}), 400
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_result = safe_db_operation(
            lambda: supabase.table('users').select('user_status').eq('telegram_id', telegram_id).execute()
        )
        if user_result is None:
            return jsonify({'error': 'Database connection error'}), 500
        user_status = user_result.data[0].get('user_status') if user_result.data else None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_result = safe_db_operation(
            lambda: supabase.table('users').update({'language': language}).eq('telegram_id', telegram_id).execute()
        )
        if update_result is None:
            return jsonify({'error': 'Database connection error'}), 500
        
        logger.info(f"üåê –Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {language} (—Å—Ç–∞—Ç—É—Å: {user_status})")
        
        return jsonify({
            'ok': True, 
            'language': language,
            'user_status': user_status
        })
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {e}")
        return jsonify({'error': 'Database error'}), 500

@app.route('/api/menu', methods=['POST'])
def api_menu():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é"""
    data = request.json or {}
    telegram_id = data.get('telegram_id')
    language_code = data.get('language_code', 'en')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if telegram_id:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
            user_result = safe_db_operation(
                lambda: supabase.table('users').select('language, user_status').eq('telegram_id', telegram_id).execute()
            )
            
            if user_result and user_result.data:
                user = user_result.data[0]
                language = determine_user_language(user, language_code)
            else:
                language = language_code[:2] if language_code[:2] in locales else 'en'
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            language = language_code[:2] if language_code[:2] in locales else 'en'
    else:
        language = language_code[:2] if language_code[:2] in locales else 'en'
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é
    menu_data = locales.get(language, locales['en']).get('menu', {})
    
    return jsonify({
        'menu': menu_data,
        'language': language,
        'supported_languages': list(locales.keys())
    })

@app.route('/api/locations/countries', methods=['GET'])
def api_locations_countries():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã locations"""
    try:
        logger.info("üîç –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        all_records = []
        page = 0
        page_size = 1000
        
        while True:
            result = supabase.table('locations').select('country_id, country_name').range(page * page_size, (page + 1) * page_size - 1).execute()
            
            if not result.data:
                break
                
            all_records.extend(result.data)
            page += 1
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if page > 10:  # –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü
                break
        
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_records)}")
        
        if all_records:
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Ñ–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            countries = []
            seen = set()
            for item in all_records:
                if item['country_id'] is not None and item['country_name'] is not None:
                    country_tuple = (item['country_id'], item['country_name'])
                    if country_tuple not in seen:
                        countries.append(country_tuple)
                        seen.add(country_tuple)
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: {item}")
            
            logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–∞–Ω: {len(countries)}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏–≥–Ω–æ—Ä–∏—Ä—É—è None
            countries.sort(key=lambda x: x[1] if x[1] is not None else '')
            return jsonify({'success': True, 'countries': countries})
        else:
            logger.warning("‚ö†Ô∏è –°—Ç—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return jsonify({'success': False, 'error': 'No countries found'})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/cities', methods=['POST'])
def api_locations_cities():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ country_id"""
    data = request.json or {}
    country_id = data.get('country_id')
    
    if not country_id:
        return jsonify({'error': 'country_id required'}), 400
    
    try:
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è country_id: {country_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        all_records = []
        page = 0
        page_size = 1000
        
        while True:
            result = supabase.table('locations').select('city_id, city_name').eq('country_id', country_id).range(page * page_size, (page + 1) * page_size - 1).execute()
            
            if not result.data:
                break
                
            all_records.extend(result.data)
            page += 1
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if page > 10:  # –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü
                break
        
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_records)}")
        
        if all_records:
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Ñ–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            cities = []
            seen = set()
            for item in all_records:
                if item['city_id'] is not None and item['city_name'] is not None:
                    city_tuple = (item['city_id'], item['city_name'])
                    if city_tuple not in seen:
                        cities.append(city_tuple)
                        seen.add(city_tuple)
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: {item}")
            
            logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {len(cities)}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏–≥–Ω–æ—Ä–∏—Ä—É—è None
            cities.sort(key=lambda x: x[1] if x[1] is not None else '')
            return jsonify({'success': True, 'cities': cities})
        else:
            logger.warning(f"‚ö†Ô∏è –ì–æ—Ä–æ–¥–∞ –¥–ª—è country_id {country_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return jsonify({'success': False, 'error': 'No cities found'})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤: {e}")
        logger.error(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: country_id={country_id}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/counties', methods=['POST'])
def api_locations_counties():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π/—Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ city_id"""
    data = request.json or {}
    city_id = data.get('city_id')
    
    if not city_id:
        return jsonify({'error': 'city_id required'}), 400
    
    try:
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è city_id: {city_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        all_records = []
        page = 0
        page_size = 1000
        
        while True:
            result = supabase.table('locations').select('county_id, county_name').eq('city_id', city_id).range(page * page_size, (page + 1) * page_size - 1).execute()
            
            if not result.data:
                break
                
            all_records.extend(result.data)
            page += 1
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if page > 10:  # –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü
                break
        
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_records)}")
        
        if all_records:
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Ñ–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            counties = []
            seen = set()
            for item in all_records:
                if item['county_id'] is not None and item['county_name'] is not None:
                    county_tuple = (item['county_id'], item['county_name'])
                    if county_tuple not in seen:
                        counties.append(county_tuple)
                        seen.add(county_tuple)
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: {item}")
            
            logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –æ–±–ª–∞—Å—Ç–µ–π: {len(counties)}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏–≥–Ω–æ—Ä–∏—Ä—É—è None
            counties.sort(key=lambda x: x[1] if x[1] is not None else '')
            return jsonify({'success': True, 'counties': counties})
        else:
            logger.warning(f"‚ö†Ô∏è –û–±–ª–∞—Å—Ç–∏ –¥–ª—è city_id {city_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return jsonify({'success': False, 'error': 'No counties found'})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–ª–∞—Å—Ç–µ–π: {e}")
        logger.error(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: city_id={city_id}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/districts', methods=['POST'])
def api_locations_districts():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–æ–≤ –ø–æ county_id"""
    data = request.json or {}
    county_id = data.get('county_id')
    
    if not county_id:
        return jsonify({'error': 'county_id required'}), 400
    
    try:
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å —Ä–∞–π–æ–Ω–æ–≤ –¥–ª—è county_id: {county_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        all_records = []
        page = 0
        page_size = 1000
        
        while True:
            result = supabase.table('locations').select('district_id, district_name').eq('county_id', county_id).range(page * page_size, (page + 1) * page_size - 1).execute()
            
            if not result.data:
                break
                
            all_records.extend(result.data)
            page += 1
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if page > 10:  # –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü
                break
        
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_records)}")
        
        if all_records:
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Ñ–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            districts = []
            seen = set()
            for item in all_records:
                if item['district_id'] is not None and item['district_name'] is not None:
                    district_tuple = (item['district_id'], item['district_name'])
                    if district_tuple not in seen:
                        districts.append(district_tuple)
                        seen.add(district_tuple)
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: {item}")
            
            logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ä–∞–π–æ–Ω–æ–≤: {len(districts)}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏–≥–Ω–æ—Ä–∏—Ä—É—è None
            districts.sort(key=lambda x: x[1] if x[1] is not None else '')
            return jsonify({'success': True, 'districts': districts})
        else:
            logger.warning(f"‚ö†Ô∏è –†–∞–π–æ–Ω—ã –¥–ª—è county_id {county_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return jsonify({'success': False, 'error': 'No districts found'})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–æ–≤: {e}")
        logger.error(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: county_id={county_id}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/region_data', methods=['POST'])
def api_region_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü general_data, house_type_data, floor_segment_data, age_data, heating_data"""
    data = request.json or {}
    country_id = data.get('country_id')
    city_id = data.get('city_id')
    county_id = data.get('county_id')
    district_id = data.get('district_id')
    listing_types = data.get('listing_types', {})
    
    if not all([country_id, city_id, county_id]):
        return jsonify({'error': 'country_id, city_id, county_id required'}), 400
    
    try:
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞: country_id={country_id}, city_id={city_id}, county_id={county_id}, district_id={district_id}")
        if listing_types:
            logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ listing_type: {listing_types}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        conditions = {
            'country_id': country_id,
            'city_id': city_id,
            'county_id': county_id
        }
        
        if district_id and district_id != 'none':
            conditions['district_id'] = district_id
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        general_result = supabase.table('general_data').select('*').eq('country_id', country_id).eq('city_id', city_id).eq('county_id', county_id)
        if district_id and district_id != 'none':
            general_result = general_result.eq('district_id', district_id)
        general_data = general_result.execute()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º –¥–æ–º–æ–≤
        house_type_result = supabase.table('house_type_data').select('*').eq('country_id', country_id).eq('city_id', city_id).eq('county_id', county_id)
        if district_id and district_id != 'none':
            house_type_result = house_type_result.eq('district_id', district_id)
        if listing_types.get('house_type'):
            house_type_result = house_type_result.eq('listing_type', listing_types['house_type'])
        house_type_data = house_type_result.execute()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º —ç—Ç–∞–∂–µ–π
        floor_segment_result = supabase.table('floor_segment_data').select('*').eq('country_id', country_id).eq('city_id', city_id).eq('county_id', county_id)
        if district_id and district_id != 'none':
            floor_segment_result = floor_segment_result.eq('district_id', district_id)
        if listing_types.get('floor_segment'):
            floor_segment_result = floor_segment_result.eq('listing_type', listing_types['floor_segment'])
        floor_segment_data = floor_segment_result.execute()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –æ–±—ä–µ–∫—Ç–æ–≤
        age_result = supabase.table('age_data').select('*').eq('country_id', country_id).eq('city_id', city_id).eq('county_id', county_id)
        if district_id and district_id != 'none':
            age_result = age_result.eq('district_id', district_id)
        if listing_types.get('age'):
            age_result = age_result.eq('listing_type', listing_types['age'])
        age_data = age_result.execute()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–æ–ø–ª–µ–Ω–∏—é
        heating_result = supabase.table('heating_data').select('*').eq('country_id', country_id).eq('city_id', city_id).eq('county_id', county_id)
        if district_id and district_id != 'none':
            heating_result = heating_result.eq('district_id', district_id)
        if listing_types.get('heating'):
            heating_result = heating_result.eq('listing_type', listing_types['heating'])
        heating_data = heating_result.execute()

        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: general={len(general_data.data) if general_data.data else 0}, house_type={len(house_type_data.data) if house_type_data.data else 0}, floor_segment={len(floor_segment_data.data) if floor_segment_data.data else 0}, age={len(age_data.data) if age_data.data else 0}, heating={len(heating_data.data) if heating_data.data else 0}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...")
            currency_check_result = check_and_update_currency_rates()
            if currency_check_result:
                logger.info("‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
            logger.error(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}: {str(e)}")
        
        return jsonify({
            'success': True,
            'general_data': general_data.data if general_data.data else [],
            'house_type_data': house_type_data.data if house_type_data.data else [],
            'floor_segment_data': floor_segment_data.data if floor_segment_data.data else [],
            'age_data': age_data.data if age_data.data else [],
            'heating_data': heating_data.data if heating_data.data else []
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞: {e}")
        logger.error(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: country_id={country_id}, city_id={city_id}, county_id={county_id}, district_id={district_id}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/listing_types/<table_name>', methods=['POST'])
def api_listing_types(table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö listing_type –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        data = request.json or {}
        country_id = data.get('country_id')
        city_id = data.get('city_id')
        county_id = data.get('county_id')
        district_id = data.get('district_id')
        
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö listing_type –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name} –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: country_id={country_id}, city_id={city_id}, county_id={county_id}, district_id={district_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        supported_tables = ['house_type_data', 'floor_segment_data', 'age_data', 'heating_data']
        if table_name not in supported_tables:
            return jsonify({'success': False, 'error': f'Table {table_name} not supported'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–∫–∞—Ü–∏–∏
        if not all([country_id, city_id, county_id]):
            return jsonify({'success': False, 'error': 'country_id, city_id, county_id required'}), 400
        
        # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ª–æ–∫–∞—Ü–∏–∏
        query = supabase.table(table_name).select('listing_type').not_.is_('listing_type', 'null')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –ª–æ–∫–∞—Ü–∏–∏
        query = query.eq('country_id', country_id).eq('city_id', city_id).eq('county_id', county_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–π–æ–Ω—É, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
        if district_id and district_id != 'none':
            query = query.eq('district_id', district_id)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = query.execute()
        
        if result.data:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è listing_type
            listing_types = list(set([item['listing_type'] for item in result.data if item.get('listing_type')]))
            listing_types.sort()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(listing_types)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö listing_type –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table_name} –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏: {listing_types}")
            return jsonify({
                'success': True,
                'listing_types': listing_types
            })
        else:
            logger.warning(f"‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Å listing_type –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏")
            return jsonify({
                'success': True,
                'listing_types': []
            })
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ listing_type –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/currency/rates', methods=['GET'])
def api_currency_rates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üîç –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        result = supabase.table('currency').select('*').order('created_at', desc=True).limit(1).execute()
        
        if result.data and len(result.data) > 0:
            latest_rates = result.data[0]
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: {latest_rates}")
            return jsonify({
                'success': True,
                'rates': {
                    'rub': latest_rates.get('rub'),
                    'usd': latest_rates.get('usd'),
                    'euro': latest_rates.get('euro'),
                    'try': latest_rates.get('try'),
                    'aed': latest_rates.get('aed'),
                    'thb': latest_rates.get('thb')
                },
                'last_updated': latest_rates.get('created_at')
            })
        else:
            logger.warning("‚ö†Ô∏è –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return jsonify({'success': False, 'error': 'No currency rates found'})
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/currency/rate', methods=['POST'])
def api_currency_rate():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    try:
        data = request.json or {}
        from_currency = data.get('from_currency', 'EUR').upper()
        to_currency = data.get('to_currency', 'TRY').upper()
        date = data.get('date')
        
        if not date:
            return jsonify({'success': False, 'error': 'date required'}), 400
        
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç {from_currency} -> {to_currency} –Ω–∞ {date}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è Supabase —Å –¥–∞—Ç–∞–º–∏
        result = supabase.table('currency').select('*').gte('created_at', f'{date}T00:00:00').lt('created_at', f'{date}T23:59:59').limit(1).execute()
        
        if result.data and len(result.data) > 0:
            currency_data = result.data[0]
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—É—Ä—Å –∫ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ (EUR)
            if from_currency == 'EUR':
                if to_currency == 'EUR':
                    rate = 1.0
                else:
                    rate = currency_data.get(to_currency.lower(), 1.0)
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—É—Ä—Å –æ—Ç –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç—ã –∫ EUR
            elif to_currency == 'EUR':
                rate = 1.0 / currency_data.get(from_currency.lower(), 1.0)
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—É—Ä—Å –º–µ–∂–¥—É –¥–≤—É–º—è –≤–∞–ª—é—Ç–∞–º–∏ (–Ω–µ EUR)
            else:
                from_rate = currency_data.get(from_currency.lower(), 1.0)
                to_rate = currency_data.get(to_currency.lower(), 1.0)
                rate = to_rate / from_rate
            
            logger.info(f"‚úÖ –ö—É—Ä—Å –≤–∞–ª—é—Ç –∏–∑ –ë–î: {from_currency} -> {to_currency} = {rate}")
            return jsonify({'success': True, 'rate': rate})
        
        else:
            logger.warning(f"‚ö†Ô∏è –ö—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —á–µ—Ä–µ–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
            try:
                api_key = os.getenv('CURRENCY_API_KEY')
                if api_key:
                    url = f"http://api.currencylayer.com/live?access_key={api_key}&currencies=RUB,USD,TRY,AED,THB&source=EUR"
                    response = requests.get(url, timeout=30)
                    response.raise_for_status()
                    data = response.json()
                    
                    if data.get('success'):
                        quotes = data.get('quotes', {})
                        currency_rates = {
                            'rub': quotes.get('EURRUB', 1.0),
                            'usd': quotes.get('EURUSD', 1.0),
                            'euro': 1.0,
                            'try': quotes.get('EURTRY', 1.0),
                            'aed': quotes.get('EURAED', 1.0),
                            'thb': quotes.get('EURTHB', 1.0)
                        }
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                        today_result = supabase.table('currency').select('id').eq('created_at::date', date).limit(1).execute()
                        
                        if not today_result.data or len(today_result.data) == 0:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç
                            supabase.table('currency').insert(currency_rates).execute()
                            logger.info(f"‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ API: {currency_rates}")
                        else:
                            logger.info(f"‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É–∂–µ –µ—Å—Ç—å –≤ –ë–î –Ω–∞ {date}")
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫—É—Ä—Å
                        if from_currency == 'EUR':
                            if to_currency == 'EUR':
                                rate = 1.0
                            else:
                                rate = currency_rates.get(to_currency.lower(), 1.0)
                        elif to_currency == 'EUR':
                            rate = 1.0 / currency_rates.get(from_currency.lower(), 1.0)
                        else:
                            from_rate = currency_rates.get(from_currency.lower(), 1.0)
                            to_rate = currency_rates.get(to_currency.lower(), 1.0)
                            rate = to_rate / from_rate
                        
                        return jsonify({'success': True, 'rate': rate})
            except Exception as api_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ —á–µ—Ä–µ–∑ API: {api_error}")
            
            return jsonify({'success': False, 'error': 'Rate not found for this date'})
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/currency/update', methods=['POST'])
def api_currency_update():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API"""
    try:
        data = request.json or {}
        from_currency = data.get('from_currency', 'EUR').upper()
        to_currency = data.get('to_currency', 'TRY').upper()
        
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç {from_currency} -> {to_currency}")
        
        # API –∫–ª—é—á –¥–ª—è currencylayer
        api_key = os.getenv('CURRENCY_API_KEY')
        if not api_key:
            logger.error("‚ùå API –∫–ª—é—á –¥–ª—è –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return jsonify({'success': False, 'error': 'Currency API key not configured'}), 500
        
        # URL –¥–ª—è API (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ - EUR)
        url = f"http://api.currencylayer.com/live?access_key={api_key}&currencies=RUB,USD,TRY,AED,THB&source=EUR"
        
        logger.info(f"üåê –ó–∞–ø—Ä–æ—Å –∫ API: {url}")
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        logger.info(f"üìä –û—Ç–≤–µ—Ç API: {data}")
        
        if not data.get('success'):
            error_info = data.get('error', {})
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –≤–∞–ª—é—Ç: {error_info}")
            return jsonify({'success': False, 'error': f"Currency API error: {error_info}"}), 500
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        quotes = data.get('quotes', {})
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        currency_rates = {
            'rub': quotes.get('EURRUB', 1.0),
            'usd': quotes.get('EURUSD', 1.0),
            'euro': 1.0,  # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
            'try': quotes.get('EURTRY', 1.0),
            'aed': quotes.get('EURAED', 1.0),
            'thb': quotes.get('EURTHB', 1.0)
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().strftime('%Y-%m-%d')
        today_result = supabase.table('currency').select('id').gte('created_at', f'{today}T00:00:00').lt('created_at', f'{today}T23:59:59').limit(1).execute()
        
        if not today_result.data or len(today_result.data) == 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç
            result = supabase.table('currency').insert(currency_rates).execute()
            
            if result.data:
                logger.info(f"‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {currency_rates}")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –≤ –ë–î")
                return jsonify({'success': False, 'error': 'Failed to save currency rates'}), 500
        else:
            logger.info(f"‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É–∂–µ –µ—Å—Ç—å –≤ –ë–î –Ω–∞ {today}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫—É—Ä—Å
        if from_currency == 'EUR':
            rate = currency_rates.get(to_currency.lower(), 1.0)
        elif to_currency == 'EUR':
            rate = 1.0 / currency_rates.get(from_currency.lower(), 1.0)
        else:
            from_rate = currency_rates.get(from_currency.lower(), 1.0)
            to_rate = currency_rates.get(to_currency.lower(), 1.0)
            rate = to_rate / from_rate
        
        return jsonify({
            'success': True,
            'rate': rate,
            'rates_updated': True
        })
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/user/language', methods=['POST'])
def api_user_language():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏"""
    try:
        data = request.json or {}
        telegram_id = data.get('telegram_id')
        
        if not telegram_id:
            return jsonify({'success': False, 'error': 'telegram_id required'}), 400
        
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è telegram_id: {telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        result = safe_db_operation(
            lambda: supabase.table('users').select('language, user_status').eq('telegram_id', telegram_id).execute()
        )
        
        if result is None:
            return jsonify({'success': False, 'error': 'Database connection error'}), 500
        
        if result.data and len(result.data) > 0:
            user = result.data[0]
            user_status = user.get('user_status')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –µ–¥–∏–Ω—É—é –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
            telegram_lang = data.get('language_code', 'en')
            user_language = determine_user_language(user, telegram_lang)
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} (—Å—Ç–∞—Ç—É—Å: {user_status}): –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: {user_language}")
            
            return jsonify({
                'success': True,
                'language': user_language,
                'user_status': user_status
            })
        else:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return jsonify({
                'success': True,
                'language': 'en',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                'user_status': None
            })
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/currency/check', methods=['GET'])
def api_currency_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã currency
        result = supabase.table('currency').select('*').order('created_at', desc=True).limit(10).execute()
        
        if result.data:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result.data)} –∑–∞–ø–∏—Å–µ–π –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç")
            return jsonify({
                'success': True,
                'count': len(result.data),
                'latest': result.data[0] if result.data else None,
                'all_records': result.data
            })
        else:
            logger.warning("‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return jsonify({
                'success': False,
                'message': 'No currency records found'
            })
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/currency/fetch', methods=['GET'])
def api_currency_fetch():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üîç –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API")
        
        # API –∫–ª—é—á –¥–ª—è currencylayer
        api_key = os.getenv('CURRENCY_API_KEY')
        if not api_key:
            logger.error("‚ùå API –∫–ª—é—á –¥–ª—è –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return jsonify({'success': False, 'error': 'Currency API key not configured'}), 500
        
        # URL –¥–ª—è API (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ - EUR)
        url = f"http://api.currencylayer.com/live?access_key={api_key}&currencies=RUB,USD,TRY,AED,THB&source=EUR"
        
        logger.info(f"üåê –ó–∞–ø—Ä–æ—Å –∫ API: {url}")
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        logger.info(f"üìä –û—Ç–≤–µ—Ç API: {data}")
        
        if not data.get('success'):
            error_info = data.get('error', {})
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –≤–∞–ª—é—Ç: {error_info}")
            return jsonify({'success': False, 'error': f"Currency API error: {error_info}"}), 500
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        quotes = data.get('quotes', {})
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EUR (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)
        currency_rates = {
            'rub': quotes.get('EURRUB'),
            'usd': quotes.get('EURUSD'),
            'euro': 1.0,  # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –≤—Å–µ–≥–¥–∞ 1.0
            'try': quotes.get('EURTRY'),
            'aed': quotes.get('EURAED'),
            'thb': quotes.get('EURTHB')
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫—É—Ä—Å—ã –ø–æ–ª—É—á–µ–Ω—ã
        if not all(currency_rates.values()):
            logger.error(f"‚ùå –ù–µ –≤—Å–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ–ª—É—á–µ–Ω—ã: {currency_rates}")
            return jsonify({'success': False, 'error': 'Incomplete currency rates received'}), 500
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        insert_result = supabase.table('currency').insert(currency_rates).execute()
        
        if insert_result.data:
            logger.info(f"‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {insert_result.data}")
            return jsonify({
                'success': True,
                'rates': currency_rates,
                'message': 'Currency rates updated successfully'
            })
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return jsonify({'success': False, 'error': 'Failed to save currency rates'}), 500
            
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –≤–∞–ª—é—Ç: {e}")
        return jsonify({'success': False, 'error': f'Network error: {str(e)}'}), 500
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

def check_and_update_currency_rates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    try:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        result = supabase.table('currency').select('*').order('created_at', desc=True).limit(1).execute()
        
        if result.data and len(result.data) > 0:
            latest_rates = result.data[0]
            latest_date = latest_rates.get('created_at')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—É—Ä—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            if latest_date:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ datetime –æ–±—ä–µ–∫—Ç
                if isinstance(latest_date, str):
                    latest_date = datetime.fromisoformat(latest_date.replace('Z', '+00:00'))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ timezone –∏ —É–±–∏—Ä–∞–µ–º –µ–≥–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if hasattr(latest_date, 'tzinfo') and latest_date.tzinfo is not None:
                    latest_date = latest_date.replace(tzinfo=None)
                
                current_date = datetime.utcnow()
                days_difference = (current_date - latest_date).days
                
                logger.info(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: {latest_date}, —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö: {days_difference}")
                
                # –ï—Å–ª–∏ –∫—É—Ä—Å—ã —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
                if days_difference >= 1:
                    logger.info("üîÑ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å—Ç–∞—Ä–µ–ª–∏, –æ–±–Ω–æ–≤–ª—è–µ–º...")
                    return update_currency_rates_from_api()
                else:
                    logger.info("‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                    return True
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")
                return update_currency_rates_from_api()
        else:
            logger.info("üìù –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º...")
            return update_currency_rates_from_api()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        return False

def update_currency_rates_from_api():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API"""
    try:
        logger.info("üåê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API")
        
        # API –∫–ª—é—á –¥–ª—è currencylayer
        api_key = os.getenv('CURRENCY_API_KEY')
        if not api_key:
            logger.error("‚ùå API –∫–ª—é—á –¥–ª—è –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            logger.error(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {list(os.environ.keys())}")
            return False
        
        logger.info(f"üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
        
        # URL –¥–ª—è API (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ - EUR)
        url = f"http://api.currencylayer.com/live?access_key={api_key}&currencies=RUB,USD,TRY,AED,THB&source=EUR"
        
        logger.info(f"üåê –ó–∞–ø—Ä–æ—Å –∫ API: {url}")
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        logger.info(f"üìä –û—Ç–≤–µ—Ç API: {data}")
        
        if not data.get('success'):
            error_info = data.get('error', {})
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –≤–∞–ª—é—Ç: {error_info}")
            return False
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        quotes = data.get('quotes', {})
        logger.info(f"üí± –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏: {quotes}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EUR (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)
        currency_rates = {
            'rub': quotes.get('EURRUB'),
            'usd': quotes.get('EURUSD'),
            'euro': 1.0,  # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –≤—Å–µ–≥–¥–∞ 1.0
            'try': quotes.get('EURTRY'),
            'aed': quotes.get('EURAED'),
            'thb': quotes.get('EURTHB')
        }
        
        logger.info(f"üí± –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: {currency_rates}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫—É—Ä—Å—ã –ø–æ–ª—É—á–µ–Ω—ã
        if not all(currency_rates.values()):
            logger.error(f"‚ùå –ù–µ –≤—Å–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ–ª—É—á–µ–Ω—ã: {currency_rates}")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: {currency_rates}")
        
        try:
            insert_result = supabase.table('currency').insert(currency_rates).execute()
            logger.info(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏: {insert_result}")
            
            if insert_result.data:
                logger.info(f"‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {insert_result.data}")
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                logger.error(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏: {insert_result}")
                return False
        except Exception as db_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {db_error}")
            logger.error(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ë–î: {type(db_error).__name__}: {str(db_error)}")
            return False
            
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –≤–∞–ª—é—Ç: {e}")
        logger.error(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏: {type(e).__name__}: {str(e)}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        logger.error(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}: {str(e)}")
        return False

@app.route('/api/currency/convert', methods=['POST'])
def api_currency_convert():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –º–µ–∂–¥—É –≤–∞–ª—é—Ç–∞–º–∏"""
    try:
        data = request.json or {}
        value = data.get('value')
        from_currency = data.get('from_currency', 'TRY')
        to_currency = data.get('to_currency', 'EUR')
        
        if value is None:
            return jsonify({'success': False, 'error': 'value required'}), 400
        
        logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {value} {from_currency} –≤ {to_currency}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        result = supabase.table('currency').select('*').order('created_at', desc=True).limit(1).execute()
        
        if not result.data or len(result.data) == 0:
            logger.error("‚ùå –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return jsonify({'success': False, 'error': 'Currency rates not found'}), 500
        
        rates = result.data[0]
        logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: {rates}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            numeric_value = float(value)
        except (ValueError, TypeError):
            return jsonify({'success': False, 'error': 'Invalid numeric value'}), 400
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ EUR (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)
        if from_currency == 'TRY':
            # –ò–∑ TRY –≤ EUR
            eur_value = numeric_value / rates.get('try', 1)
        elif from_currency == 'USD':
            # –ò–∑ USD –≤ EUR
            eur_value = numeric_value / rates.get('usd', 1)
        elif from_currency == 'RUB':
            # –ò–∑ RUB –≤ EUR
            eur_value = numeric_value / rates.get('rub', 1)
        elif from_currency == 'EUR':
            eur_value = numeric_value
        else:
            return jsonify({'success': False, 'error': f'Unsupported source currency: {from_currency}'}), 400
        
        # –ò–∑ EUR –≤ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
        if to_currency == 'TRY':
            converted_value = eur_value * rates.get('try', 1)
        elif to_currency == 'USD':
            converted_value = eur_value * rates.get('usd', 1)
        elif to_currency == 'RUB':
            converted_value = eur_value * rates.get('rub', 1)
        elif to_currency == 'EUR':
            converted_value = eur_value
        else:
            return jsonify({'success': False, 'error': f'Unsupported target currency: {to_currency}'}), 400
        
        logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {value} {from_currency} = {converted_value} {to_currency}")
        
        return jsonify({
            'success': True,
            'original_value': value,
            'original_currency': from_currency,
            'converted_value': round(converted_value, 2),
            'target_currency': to_currency,
            'rates_used': {
                'from_eur': rates.get(from_currency.lower(), 1),
                'to_eur': rates.get(to_currency.lower(), 1)
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/currency/test', methods=['GET'])
def api_currency_test():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–æ–π"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–æ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—É—Ä—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        result = supabase.table('currency').select('*').order('created_at', desc=True).limit(1).execute()
        
        if result.data and len(result.data) > 0:
            latest_rates = result.data[0]
            logger.info(f"‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {latest_rates}")
            return jsonify({
                'success': True,
                'message': 'Currency rates found in database',
                'rates': latest_rates,
                'count': len(result.data)
            })
        else:
            logger.warning("‚ö†Ô∏è –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return jsonify({
                'success': False,
                'message': 'No currency rates found in database',
                'count': 0
            })
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª—é—Ç—ã: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/currency/latest', methods=['GET'])
def api_currency_latest():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã currency"""
    try:
        logger.info("üîç –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã currency (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ created_at DESC)
        currency_result = supabase.table('currency').select('*').order('created_at', desc=True).limit(1).execute()
        
        if currency_result.data and len(currency_result.data) > 0:
            latest_rate = currency_result.data[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –≤–∞–ª—é—Ç: {latest_rate.get('created_at')}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            response_data = {
                'success': True,
                'data': {
                    'euro': latest_rate.get('euro'),
                    'try': latest_rate.get('try'), 
                    'usd': latest_rate.get('usd'),
                    'rub': latest_rate.get('rub'),
                    'aed': latest_rate.get('aed'),
                    'thb': latest_rate.get('thb')
                },
                'created_at': latest_rate.get('created_at'),
                'source': 'database'
            }
            
            logger.info(f"üí± –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å—ã: EUR={latest_rate.get('euro')}, TRY={latest_rate.get('try')}")
            return jsonify(response_data)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ currency")
            return jsonify({
                'success': False,
                'error': 'No currency data available',
                'message': '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
            }), 404
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        return jsonify({
            'success': False, 
            'error': str(e),
            'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç'
        }), 500

@app.route('/api/check_admin_status', methods=['POST'])
def api_check_admin_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è telegram_id: {telegram_id_raw}")
    
    if telegram_id_raw is None:
        logger.error("‚ùå telegram_id –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç telegram_id: {telegram_id_raw}")
        return jsonify({'error': 'Invalid telegram_id'}), 400
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–ª—è telegram_id: {telegram_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è Supabase –∑–∞–ø—Ä–æ—Å–∞
        import asyncio
        import concurrent.futures
        
        def execute_supabase_query():
            return supabase.table('users').select('user_status, period_end').eq('telegram_id', telegram_id).execute()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        with concurrent.futures.ThreadPoolExecutor() as executor:
            future = executor.submit(execute_supabase_query)
            try:
                user_result = future.result(timeout=10)  # 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            except concurrent.futures.TimeoutError:
                logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return jsonify({'error': 'Database timeout'}), 408
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ: {e}")
                return jsonify({'error': 'Database error'}), 500
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {len(user_result.data) if user_result.data else 0} –∑–∞–ø–∏—Å–µ–π")
        
        if user_result.data and len(user_result.data) > 0:
            user = user_result.data[0]
            user_status = user.get('user_status')
            period_end = user.get('period_end')
            is_admin = user_status == 'admin' if user_status else False
            
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: user_status={user_status}, is_admin={is_admin}, period_end={period_end}")
            logger.info(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º user_status='{user_status}' == 'admin' = {user_status == 'admin'}")
            
            return jsonify({
                'success': True,
                'is_admin': is_admin,
                'user_status': user_status,
                'period_end': period_end
            })
        else:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è telegram_id: {telegram_id}")
            return jsonify({'error': 'User not found'}), 404
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/geocode', methods=['POST'])
def api_geocode():
    """–ì–µ–æ–∫–æ–¥–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Google Maps API —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    data = request.json or {}
    address = data.get('address')
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info("=" * 60)
    logger.info("üîç –ù–ê–ß–ê–õ–û –ì–ï–û–ö–û–î–ò–ù–ì–ê –ê–î–†–ï–°–ê")
    logger.info("=" * 60)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å: '{address}'")
    
    if not address:
        logger.error("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        return jsonify({'error': 'Address required'}), 400
    
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ Google Maps Geocoding API
        url = f"https://maps.googleapis.com/maps/api/geocode/json"
        params = {
            'address': address,
            'key': GOOGLE_MAPS_API_KEY
        }
        
        logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Google Maps API: {url}")
        logger.info(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: address='{address}', key='{GOOGLE_MAPS_API_KEY[:10]}...'")
        
        # Google Maps API –≤–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
        logger.info("üåê Google Maps API –≤–∫–ª—é—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        max_retries = 3
        google_maps_success = False
        
        for attempt in range(max_retries):
            try:
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ Google Maps API...")
                logger.info(f"üåê URL: {url}")
                logger.info(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
                logger.info(f"‚è±Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º {GOOGLE_MAPS_TIMEOUT} —Å–µ–∫—É–Ω–¥...")
                response = requests.get(url, params=params, timeout=GOOGLE_MAPS_TIMEOUT)
                logger.info(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Google Maps API: {response.status_code}")
                
                if response.status_code == 200:
                    result = response.json()
                    logger.info(f"üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ Google Maps: {len(str(result))} —Å–∏–º–≤–æ–ª–æ–≤")
                    logger.info(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {result}")
                    
                    if result.get('status') == 'OK' and result.get('results'):
                        try:
                            # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç Google Maps
                            location = result['results'][0]
                            logger.info(f"üìç –ü–æ–ª—É—á–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –æ—Ç Google Maps: {location.get('formatted_address', 'N/A')}")
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–æ–∫–∞—Ü–∏–∏
                            logger.info("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–æ–∫–∞—Ü–∏–∏...")
                            location_components = extract_location_components(location.get('address_components', []), address)
                            logger.info(f"‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–æ–∫–∞—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã: {location_components}")
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                            logger.info("üîç –ò—â–µ–º –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
                            location_codes = find_location_codes_from_components(location_components)
                            
                            if location_codes:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π: {location_codes}")
                            else:
                                logger.warning("‚ö†Ô∏è –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                            
                            logger.info("=" * 60)
                            logger.info("‚úÖ –ì–ï–û–ö–û–î–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û (Google Maps API)")
                            logger.info("=" * 60)
                            
                            logger.info("‚úÖ Google Maps API —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∞–¥—Ä–µ—Å")
                            google_maps_success = True
                            return jsonify({
                                'success': True,
                                'lat': float(location['geometry']['location']['lat']),
                                'lng': float(location['geometry']['location']['lng']),
                                'formatted_address': location.get('formatted_address', address),
                                'location_components': location_components,
                                'location_codes': location_codes,
                                'source': 'google_maps'
                            })
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ Google Maps: {e}")
                            logger.error(f"üìÑ Traceback: ", exc_info=True)
                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ fallback
                            break
                    else:
                        logger.warning(f"‚ö†Ô∏è Google Maps API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {result.get('status')}")
                        if result.get('error_message'):
                            logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {result.get('error_message')}")
                        
                        # –ï—Å–ª–∏ Google Maps –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å, –ø—Ä–æ–±—É–µ–º Nominatim
                        logger.info("üîÑ Google Maps –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å, –ø—Ä–æ–±—É–µ–º Nominatim...")
                        break
                        
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: HTTP —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    logger.warning(f"üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text[:500]}...")
                    if attempt == max_retries - 1:
                        logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ Google Maps API –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π HTTP {response.status_code}")
                        break
                    continue
                    
            except requests.exceptions.Timeout:
                logger.warning(f"‚è∞ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: —Ç–∞–π–º–∞—É—Ç Google Maps API ({GOOGLE_MAPS_TIMEOUT} —Å–µ–∫—É–Ω–¥)")
                if attempt == max_retries - 1:
                    logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ Google Maps API –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Ç–∞–π–º–∞—É—Ç–æ–º")
                    break
                continue
                
            except requests.exceptions.ConnectionError as e:
                logger.warning(f"üîå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Google Maps API: {e}")
                if attempt == max_retries - 1:
                    logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ Google Maps API –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                    break
                continue
                
            except requests.exceptions.RequestException as e:
                logger.warning(f"üì° –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Google Maps API: {e}")
                if attempt == max_retries - 1:
                    logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ Google Maps API –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞")
                    break
                continue
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Google Maps API: {e}")
                if attempt == max_retries - 1:
                    logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ Google Maps API –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–æ–π")
                    break
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ Google Maps API —É—Å–ø–µ—à–Ω—ã–º
        if google_maps_success:
            logger.info("‚úÖ Google Maps API —É–∂–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∞–¥—Ä–µ—Å")
            return  # –≠—Ç–æ—Ç return –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        
        # –ï—Å–ª–∏ Google Maps API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Nominatim –∫–∞–∫ fallback
        logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Nominatim API –∫–∞–∫ fallback...")
        try:
            nominatim_data = get_nominatim_location(address)
            
            if nominatim_data:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Nominatim: {nominatim_data}")
                location_components = {
                    'country': nominatim_data.get('country'),
                    'country_code': nominatim_data.get('country_code'),
                    'city': nominatim_data.get('city'),
                    'district': nominatim_data.get('district'),
                    'county': nominatim_data.get('county'),
                    'postal_code': nominatim_data.get('postal_code')
                }
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                logger.info("üîç –ò—â–µ–º –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
                location_codes = find_location_codes_from_components(location_components)
                
                if location_codes:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π: {location_codes}")
                else:
                    logger.warning("‚ö†Ô∏è –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                logger.info("=" * 60)
                logger.info("‚úÖ –ì–ï–û–ö–û–î–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û (fallback –Ω–∞ Nominatim)")
                logger.info("=" * 60)
                
                return jsonify({
                    'success': True,
                    'lat': float(nominatim_data.get('lat', 0)),
                    'lng': float(nominatim_data.get('lon', 0)),
                    'formatted_address': nominatim_data.get('display_name', address),
                    'location_components': location_components,
                    'location_codes': location_codes,
                    'source': 'nominatim_fallback'
                })
            else:
                logger.warning("‚ö†Ô∏è Nominatim API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Nominatim API: {e}")
            logger.error(f"üìÑ Traceback: ", exc_info=True)
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        logger.info("üîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        try:
            # –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–∑ –∞–¥—Ä–µ—Å–∞
            search_terms = [word.strip() for word in address.replace(',', ' ').replace('.', ' ').split() if len(word.strip()) > 2]
            logger.info(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {search_terms}")
            
            # –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ locations –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            search_result = None
            
            for term in search_terms[:3]:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–µ—Ä–º–∏–Ω–∞
                if term.lower() not in ['—Ç—É—Ä—Ü–∏—è', 't√ºrkiye', 'antalya', 'kepez']:  # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
                    try:
                        # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–π–æ–Ω—É
                        result = supabase.table('locations').select('*').ilike('district_name', f'%{term}%').execute()
                        if result.data:
                            search_result = result
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ —Ä–∞–π–æ–Ω—É '{term}': {len(result.data)} –∑–∞–ø–∏—Å–µ–π")
                            break
                        
                        # –ü–æ–∏—Å–∫ –ø–æ –æ–∫—Ä—É–≥—É
                        result = supabase.table('locations').select('*').ilike('county_name', f'%{term}%').execute()
                        if result.data:
                            search_result = result
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –æ–∫—Ä—É–≥—É '{term}': {len(result.data)} –∑–∞–ø–∏—Å–µ–π")
                            break
                        
                        # –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É
                        result = supabase.table('locations').select('*').ilike('city_name', f'%{term}%').execute()
                        if result.data:
                            search_result = result
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –≥–æ—Ä–æ–¥—É '{term}': {len(result.data)} –∑–∞–ø–∏—Å–µ–π")
                            break
                            
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ—Ä–º–∏–Ω—É '{term}': {e}")
                        continue
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –ê–Ω—Ç–∞–ª—å–µ
            if not search_result:
                logger.info("üîç –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É 'Antalya'...")
                search_result = supabase.table('locations').select('*').eq('city_name', 'Antalya').limit(1).execute()
            logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ –ë–î: {len(search_result.data)} –∑–∞–ø–∏—Å–µ–π")
            
            if search_result.data:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
                location = search_result.data[0]
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –≤ –ë–î: {location}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                logger.info("üîç –ò—â–µ–º –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
                location_codes = find_location_codes_from_components({
                    'country': location.get('country_name', ''),
                    'city': location.get('city_name', ''),
                    'county': location.get('county_name', ''),
                    'district': location.get('district_name', '')
                })
                
                if location_codes:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π: {location_codes}")
                else:
                    logger.warning("‚ö†Ô∏è –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                logger.info("=" * 60)
                logger.info("‚úÖ –ì–ï–û–ö–û–î–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)")
                logger.info("=" * 60)
                
                return jsonify({
                    'success': True,
                    'lat': float(location.get('latitude', 0)),
                    'lng': float(location.get('longitude', 0)),
                    'formatted_address': f"{location.get('district_name', '')}, {location.get('county_name', '')}, {location.get('city_name', '')}, {location.get('country_name', '')}",
                    'location_components': {
                        'country': location.get('country_name', ''),
                        'country_code': 'TR',
                        'city': location.get('city_name', ''),
                        'district': location.get('district_name', ''),
                        'county': location.get('county_name', ''),
                        'postal_code': ''
                    },
                    'location_codes': location_codes,
                    'source': 'database_fallback'
                })
            else:
                logger.error("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ Google Maps, –Ω–∏ –≤ Nominatim, –Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return jsonify({'error': '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.'}), 404
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            logger.error(f"üìÑ Traceback: ", exc_info=True)
            return jsonify({'error': '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'}), 500
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–µ: {e}")
        logger.error(f"üìÑ Traceback: ", exc_info=True)
        return jsonify({'error': 'Geocoding service error'}), 500
    
    # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    logger.error("‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
    return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≥–µ–æ–∫–æ–¥–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'}), 500

@app.route('/api/validate_bedrooms', methods=['POST'])
def api_validate_bedrooms():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω"""
    data = request.json or {}
    bedrooms = data.get('bedrooms')
    if bedrooms is None:
        return jsonify({'valid': False, 'error': 'Bedrooms must be a number'})
    try:
        bedrooms_int = int(bedrooms)
        if 1 <= bedrooms_int <= 10:
            return jsonify({'valid': True})
        else:
            return jsonify({'valid': False, 'error': 'Bedrooms must be between 1 and 10'})
    except (ValueError, TypeError):
        return jsonify({'valid': False, 'error': 'Bedrooms must be a number'})

@app.route('/api/validate_price', methods=['POST'])
def api_validate_price():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã"""
    data = request.json or {}
    price = data.get('price')
    if price is None:
        return jsonify({'valid': False, 'error': 'Price must be a number'})
    try:
        price_float = float(price)
        if price_float > 0:
            return jsonify({'valid': True})
        else:
            return jsonify({'valid': False, 'error': 'Price must be positive'})
    except (ValueError, TypeError):
        return jsonify({'valid': False, 'error': 'Price must be a number'})

@app.route('/api/generate_report', methods=['POST'])
def api_generate_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    data = request.json or {}
    address = data.get('address')
    bedrooms = data.get('bedrooms')
    price = data.get('price')
    language = data.get('language', 'en')
    lat = data.get('lat')
    lng = data.get('lng')
    telegram_id = data.get('telegram_id')
    location_codes = data.get('location_codes')  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    
    if not all([address, bedrooms, price]):
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: address={address}, bedrooms={bedrooms}, price={price}")
        return jsonify({'error': 'Missing required data'}), 400
    
    try:
        logger.info(f"üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address}")
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π: {location_codes}")
        logger.info(f"üîç –í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        logger.info(f"üîç –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: address={type(address)}, bedrooms={type(bedrooms)}, price={type(price)}, location_codes={type(location_codes)}")
        
        # –ï—Å–ª–∏ –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –∏–∑ –∞–¥—Ä–µ—Å–∞
        if not location_codes:
            logger.info("üîç –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∞–¥—Ä–µ—Å–∞")
            location_codes = get_location_codes_from_address(address)
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –∏–∑ –∞–¥—Ä–µ—Å–∞: {location_codes}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        market_data = None
        if location_codes:
            logger.info(f"üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –∫–æ–¥–æ–≤: {location_codes}")
            market_data = get_market_data_by_location_ids(location_codes)
            if market_data:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞: {len(market_data)} —Å–µ–∫—Ü–∏–π")
            else:
                logger.warning("‚ùå –î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            logger.warning("‚ùå –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –Ω–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç–µ
        location_components = data.get('location_components')
        if location_components:
            format_simple_report.last_location_components = location_components
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–æ–∫–∞—Ü–∏—è —Ç—É—Ä–µ—Ü–∫–æ–π
        is_turkish = False
        currency_rate = None
        currency_info = ""
        
        if location_components:
            from currency_functions import is_turkish_location, get_current_currency_rate, convert_turkish_data_to_eur, format_currency_info
            from price_trends_functions import get_price_trends_data
            
            is_turkish = is_turkish_location(location_components)
            logger.info(f"üåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞—Ü–∏–∏: {'–¢—É—Ä—Ü–∏—è' if is_turkish else '–î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞'}")
            
            if is_turkish:
                logger.info("üáπüá∑ –õ–æ–∫–∞—Ü–∏—è –≤ –¢—É—Ä—Ü–∏–∏, –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ")
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç
                currency_rate = get_current_currency_rate()
                if currency_rate:
                    logger.info(f"üí± –ü–æ–ª—É—á–µ–Ω –∫—É—Ä—Å –≤–∞–ª—é—Ç: {currency_rate}")
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –≤ –µ–≤—Ä–æ
                    if market_data:
                        market_data = convert_turkish_data_to_eur(market_data, currency_rate)
                        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –µ–≤—Ä–æ")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç
                    currency_info = format_currency_info(currency_rate, language)
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin = False
        if telegram_id:
            try:
                user_result = supabase.table('users').select('user_status').eq('telegram_id', telegram_id).execute()
                if user_result.data and user_result.data[0].get('user_status') == 'admin':
                    is_admin = True
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        format_simple_report.is_admin = is_admin
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"üîç –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–¥ format_simple_report:")
        logger.info(f"  - address: {type(address)} = {address}")
        logger.info(f"  - bedrooms: {type(bedrooms)} = {bedrooms}")
        logger.info(f"  - price: {type(price)} = {price}")
        logger.info(f"  - location_codes: {type(location_codes)} = {location_codes}")
        logger.info(f"  - language: {type(language)} = {language}")
        logger.info(f"  - market_data: {type(market_data)} = {market_data}")
        logger.info(f"  - currency_info: {type(currency_info)} = {currency_info}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        report_text = format_simple_report(address, bedrooms, price, location_codes, language, market_data, currency_info)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å telegram_id)
        if telegram_id:
            try:
                report_data = {
                    'user_id': telegram_id,
                    'report_type': 'market_analysis',
                    'title': f'–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {address}',
                    'description': f'–û—Ç—á–µ—Ç –ø–æ –∞–¥—Ä–µ—Å—É {address}, {bedrooms} —Å–ø–∞–ª–µ–Ω, —Ü–µ–Ω–∞ {price}',
                    'parameters': {
                        'address': address,
                        'bedrooms': bedrooms,
                        'price': price,
                        'lat': lat,
                        'lng': lng,
                        'location_codes': location_codes,
                        'is_turkish': is_turkish,
                        'currency_rate': currency_rate
                    },
                    'address': address,
                    'latitude': lat,
                    'longitude': lng,
                    'bedrooms': bedrooms,
                    'price_range_min': float(price) * 0.8 if price is not None else None,
                    'price_range_max': float(price) * 1.2 if price is not None else None
                }
                
                # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ telegram_id
                user_result = supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
                if user_result.data:
                    report_data['user_id'] = user_result.data[0]['id']
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
                    supabase.table('user_reports').insert(report_data).execute()
            except Exception as e:
                logger.error(f"Error saving report to database: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        
        return jsonify({
            'success': True,
            'report': {
                'location_codes': location_codes,
                'property_details': {
                    'address': address,
                    'bedrooms': bedrooms,
                    'price': price
                },
                'is_turkish': is_turkish,
                'currency_info': currency_info
            },
            'report_text': report_text
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")
        logger.error(f"‚ùå –ê–¥—Ä–µ—Å: {address}")
        logger.error(f"‚ùå –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π: {location_codes}")
        return jsonify({'error': f'Internal error: {str(e)}'}), 500

def get_location_codes_from_address(address):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã locations –ø–æ –∞–¥—Ä–µ—Å—É"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞
        logger.info(f"üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞: {address}")
        location_info = extract_location_from_address(address)
        logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {location_info}")
        if not location_info:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞: {address}")
            return None
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if location_info.get('country_name') == 'Turkey':
            location_info['country_name'] = 'T√ºrkiye'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['city_name', 'county_name', 'district_name', 'country_name']
        missing_fields = [field for field in required_fields if not location_info.get(field)]
        if missing_fields:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ location_info: {missing_fields}")
            logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(location_info.keys())}")
        
        logger.info(f"üîç –ò—â–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ –±–∞–∑–µ: {location_info}")
        
        # –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ locations - —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        query = supabase.table('locations').select('*')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
        if location_info.get('city_name'):
            query = query.eq('city_name', location_info['city_name'])
        if location_info.get('county_name'):
            query = query.eq('county_name', location_info['county_name'])
        if location_info.get('district_name'):
            query = query.eq('district_name', location_info['district_name'])
        if location_info.get('country_name'):
            query = query.eq('country_name', location_info['country_name'])
        
        result = query.execute()
        logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ: {result.data if result.data else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ district_name –∏ city_name
        logger.info("–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ district_name –∏ city_name")
        query = supabase.table('locations').select('*')
        if location_info.get('district_name'):
            query = query.eq('district_name', location_info['district_name'])
        if location_info.get('city_name'):
            query = query.eq('city_name', location_info['city_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –ø–æ district_name –∏ city_name: {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ district_name
        logger.info("–ò—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ district_name")
        query = supabase.table('locations').select('*')
        if location_info.get('district_name'):
            query = query.eq('district_name', location_info['district_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –ø–æ district_name: {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        logger.warning(f"‚ö†Ô∏è –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è: {location_info}")
        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –ª–æ–∫–∞—Ü–∏–π: {e}")
        logger.error(f"‚ùå –ê–¥—Ä–µ—Å: {address}")
        return None

def format_simple_report(address, bedrooms, price, location_codes, language='en', market_data=None, currency_info=""):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç—á—ë—Ç–∞ —Å –∫–æ–¥–∞–º–∏ –ª–æ–∫–∞—Ü–∏–π –∏ –¥–∞–Ω–Ω—ã–º–∏ —Ä—ã–Ω–∫–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if location_codes is None:
        location_codes = {}
    if market_data is None:
        market_data = {}
    elif isinstance(market_data, list):
        logger.warning(f"‚ö†Ô∏è market_data —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å: {market_data}")
        market_data = {}
    if currency_info is None:
        currency_info = ""
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    logger.info(f"üîç –¢–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ format_simple_report:")
    logger.info(f"  - location_codes: {type(location_codes)}")
    logger.info(f"  - market_data: {type(market_data)}")
    logger.info(f"  - currency_info: {type(currency_info)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ last_location_components –∏ –∏—Ö —Ç–∏–ø
    if hasattr(format_simple_report, 'last_location_components'):
        components = format_simple_report.last_location_components
        logger.info(f"üîç last_location_components: {type(components)}")
        if components and isinstance(components, dict):
            nominatim_data = components.get('nominatim_data')
            if nominatim_data:
                logger.info(f"üîç nominatim_data —Ç–∏–ø: {type(nominatim_data)}")
                if isinstance(nominatim_data, list):
                    logger.warning(f"‚ö†Ô∏è nominatim_data —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º: {nominatim_data}")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
    def format_price(price):
        return f"‚Ç¨{price:.2f}".replace('.00', '').replace('.', ',')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    def format_number(value):
        if value is None or value == '–Ω/–¥':
            return '–Ω/–¥'
        try:
            if isinstance(value, (int, float)):
                return f"{value:.2f}".replace('.00', '').replace('.', ',')
            else:
                return str(value)
        except:
            return str(value)
    

    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–∞
    def create_trend_indicator(current, previous=None):
        if previous is None or not isinstance(current, (int, float)) or not isinstance(previous, (int, float)):
            return ""
        
        if current > previous:
            return "üìà +"
        elif current < previous:
            return "üìâ -"
        else:
            return "‚û°Ô∏è ="
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—â—É—é—Å—è —Å–µ–∫—Ü–∏—é
    def create_collapsible_section(title, content, is_expanded=False):
        if is_expanded:
            return [
                f"üîΩ {title}",
                *content
            ]
        else:
            return [
                f"‚ñ∂Ô∏è {title} (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è)",
                "..." if content else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            ]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report_lines = [
        "üè† –ê–ù–ê–õ–ò–ó –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò",
        "=" * 50,
        f"üìç –ê–¥—Ä–µ—Å: {address}",
        f"üõèÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω: {bedrooms}",
        f"üí∞ –¶–µ–Ω–∞: ‚Ç¨{format_number(price)}",
        "",
        "üìä –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê –í –†–ê–î–ò–£–°–ï 5 –ö–ú",
        "",
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
    if market_data and market_data.get('general_data'):
        general = market_data['general_data']
        avg_price_sale = general.get('unit_price_for_sale', 0)
        avg_price_rent = general.get('unit_price_for_rent', 0)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—â–∏–µ—Å—è —Å–µ–∫—Ü–∏–∏
        summary_sections = [
            ("üí∞ –¶–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏", [
                f"–°—Ä–µ–¥–Ω—è—è: ‚Ç¨{format_number(avg_price_sale)}/–º¬≤",
                f"–î–∏–∞–ø–∞–∑–æ–Ω: ‚Ç¨{format_number(general.get('min_unit_price_for_sale', 0))} - ‚Ç¨{format_number(general.get('max_unit_price_for_sale', 0))}/–º¬≤"
            ]),
            ("üè† –¶–µ–Ω—ã –∞—Ä–µ–Ω–¥—ã", [
                f"–°—Ä–µ–¥–Ω—è—è: ‚Ç¨{format_number(avg_price_rent)}/–º¬≤",
                f"–î–∏–∞–ø–∞–∑–æ–Ω: ‚Ç¨{format_number(general.get('min_unit_price_for_rent', 0))} - ‚Ç¨{format_number(general.get('max_unit_price_for_rent', 0))}/–º¬≤"
            ]),
            ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞", [
                f"–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {format_number(general.get('count_for_sale', 0))}",
                f"–û–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É: {format_number(general.get('count_for_rent', 0))}",
                f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {format_number(general.get('yield', 0))}%"
            ])
        ]
        
        report_lines.extend([
            "üìä –ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï",
            "",
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—â–∏–µ—Å—è —Å–µ–∫—Ü–∏–∏
        for title, content in summary_sections:
            report_lines.extend(create_collapsible_section(title, content, is_expanded=True))
            report_lines.append("")
        
        report_lines.extend([
            "üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó",
            "",
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    if currency_info:
        report_lines.extend([
            "=== –ö–£–†–° –í–ê–õ–Æ–¢ ===",
            currency_info,
            "",
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    logger.info(f"üìã –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤ –ª–æ–∫–∞—Ü–∏–π: {location_codes}")
    if location_codes:
        logger.info(f"‚úÖ –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç")
        report_lines.extend([
            "=== –ö–û–î–´ –õ–û–ö–ê–¶–ò–ô (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) ===",
            f"–°—Ç—Ä–∞–Ω–∞: {location_codes.get('country_name', '–Ω/–¥')} (ID: {location_codes.get('country_id', '–Ω/–¥')})",
            f"–ì–æ—Ä–æ–¥: {location_codes.get('city_name', '–Ω/–¥')} (ID: {location_codes.get('city_id', '–Ω/–¥')})",
            f"–†–∞–π–æ–Ω: {location_codes.get('district_name', '–Ω/–¥')} (ID: {location_codes.get('district_id', '–Ω/–¥')})",
            f"–û–∫—Ä—É–≥: {location_codes.get('county_name', '–Ω/–¥')} (ID: {location_codes.get('county_id', '–Ω/–¥')})",
            "",
        ])
    else:
        logger.warning(f"‚ùå –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É")
        report_lines.extend([
            "=== –ö–û–î–´ –õ–û–ö–ê–¶–ò–ô (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) ===",
            "–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            "",
        ])
    
    report_lines.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Google Places API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    report_lines.extend([
        "=== –î–ê–ù–ù–´–ï GOOGLE PLACES API (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) ===",
        f"Formatted Address: {address}",
    ])
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–æ–∫–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
    if hasattr(format_simple_report, 'last_location_components'):
        components = format_simple_report.last_location_components
        if components:
            report_lines.extend([
                f"Country: {components.get('country', '–Ω/–¥')}",
                f"Country Code: {components.get('country_code', '–Ω/–¥')}",
                f"City: {components.get('city', '–Ω/–¥')}",
                f"District: {components.get('district', '–Ω/–¥')}",
                f"County: {components.get('county', '–Ω/–¥')}",
                f"Postal Code: {components.get('postal_code', '–Ω/–¥')}",
            ])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ Nominatim, –µ—Å–ª–∏ –µ—Å—Ç—å
            if components.get('nominatim_data'):
                nominatim = components['nominatim_data']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ nominatim —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
                if isinstance(nominatim, list):
                    logger.warning(f"‚ö†Ô∏è nominatim_data —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {nominatim}")
                    if len(nominatim) > 0:
                        nominatim = nominatim[0]
                    else:
                        nominatim = {}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ nominatim —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º .get()
                if isinstance(nominatim, dict):
                    report_lines.extend([
                        "",
                        "=== –î–ê–ù–ù–´–ï NOMINATIM (OpenStreetMap) (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) ===",
                        f"Display Name: {nominatim.get('display_name', '–Ω/–¥')}",
                        f"Country: {nominatim.get('country', '–Ω/–¥')}",
                        f"Country Code: {nominatim.get('country_code', '–Ω/–¥')}",
                        f"City: {nominatim.get('city', '–Ω/–¥')}",
                        f"District: {nominatim.get('district', '–Ω/–¥')}",
                        f"County: {nominatim.get('county', '–Ω/–¥')}",
                        f"Postal Code: {nominatim.get('postal_code', '–Ω/–¥')}",
                        f"Road: {nominatim.get('road', '–Ω/–¥')}",
                        f"House Number: {nominatim.get('house_number', '–Ω/–¥')}",
                    ])
                else:
                    logger.warning(f"‚ö†Ô∏è nominatim_data –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(nominatim)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {nominatim}")
                    report_lines.extend([
                        "",
                        "=== –î–ê–ù–ù–´–ï NOMINATIM (OpenStreetMap) (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) ===",
                        "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ Nominatim –∏–º–µ—é—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                ])
    
    report_lines.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
    if currency_info:
        report_lines.extend([
            "=== –¢–ï–ö–£–©–ò–ï –ö–£–†–°–´ –í–ê–õ–Æ–¢ ===",
            currency_info,
            "",
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –æ—Ç—á–µ—Ç–∞
    if market_data:
        # –û–±—â–∏–π —Ç—Ä–µ–Ω–¥ (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã general_data)
        if market_data.get('general_data'):
            general = market_data['general_data']
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
            min_sale = general.get('min_unit_price_for_sale', 0)
            avg_sale = general.get('unit_price_for_sale', 0)
            max_sale = general.get('max_unit_price_for_sale', 0)
            min_rent = general.get('min_unit_price_for_rent', 0)
            avg_rent = general.get('unit_price_for_rent', 0)
            max_rent = general.get('max_unit_price_for_rent', 0)
            
            report_lines.extend([
                "--- –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê ---",
                "",
                "--- –ü–†–û–î–ê–ñ–ò ---",
                f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏, –º¬≤:",
                f"‚Ç¨{format_number(min_sale)}",
                "",
                f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏, –º¬≤:",
                f"‚Ç¨{format_number(avg_sale)}",
                "",
                f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏, –º¬≤:",
                f"‚Ç¨{format_number(max_sale)}",
                "",

                f"üìè –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å –ø—Ä–æ–¥–∞–∂–∏:",
                f"{format_number(general.get('comparable_area_for_sale'))} –º¬≤",
                "",
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:",
                f"{format_number(general.get('count_for_sale'))}",
                "",
                f"üí∞ –¶–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, —Å—Ä–µ–¥–Ω—è—è:",
                f"‚Ç¨{format_number(general.get('price_for_sale'))}",
                "",
                f"üèóÔ∏è –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
                f"{format_number(general.get('average_age_for_sale'))} –ª–µ—Ç",
                "",
                f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
                f"{format_number(general.get('listing_period_for_sale'))} –¥–Ω–µ–π",
                "",
                "--- –ê–†–ï–ù–î–ê ---",
                f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤:",
                f"‚Ç¨{format_number(min_rent)}",
                "",
                f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤:",
                f"‚Ç¨{format_number(avg_rent)}",
                "",
                f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤:",
                f"‚Ç¨{format_number(max_rent)}",
                "",

                f"üìè –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å –∞—Ä–µ–Ω–¥—ã:",
                f"{format_number(general.get('comparable_area_for_rent'))} –º¬≤",
                "",
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É:",
                f"{format_number(general.get('count_for_rent'))}",
                "",
                f"üí∞ –¶–µ–Ω–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã, —Å—Ä–µ–¥–Ω—è—è:",
                f"‚Ç¨{format_number(general.get('price_for_rent'))}",
                "",
                f"üèóÔ∏è –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã:",
                f"{format_number(general.get('average_age_for_rent'))} –ª–µ—Ç",
                "",
                f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã:",
                f"{format_number(general.get('listing_period_for_rent'))} –¥–Ω–µ–π",
                "",
                f"üíé –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:",
                f"{format_number(general.get('yield'))}%",
                "",
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Ç—Ä–µ–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if hasattr(format_simple_report, 'is_admin') and format_simple_report.is_admin:
                report_lines.append(f"–î–∞—Ç–∞ —Ç—Ä–µ–Ω–¥–∞: {general.get('trend_date', '–Ω/–¥')}")
                report_lines.append("")
    
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ø–∞–ª–µ–Ω (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã house_type_data)
        if market_data.get('house_type_data'):
            house_type_data = market_data['house_type_data']
            report_lines.extend([
                "--- –ê–ù–ê–õ–ò–ó –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –°–ü–ê–õ–ï–ù ---",
                "",
            ])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É bedrooms –∏ listing_type
            bedroom_mapping = {
                0: "0+1",  # 0 —Å–ø–∞–ª–µ–Ω = —Å—Ç—É–¥–∏—è
                1: "1+1",  # 1 —Å–ø–∞–ª—å–Ω—è = 1+1
                2: "2+1",  # 2 —Å–ø–∞–ª—å–Ω–∏ = 2+1
                3: "3+1",  # 3 —Å–ø–∞–ª—å–Ω–∏ = 3+1
                4: "4+1",  # 4 —Å–ø–∞–ª—å–Ω–∏ = 4+1
                5: "5+1",  # 5+ —Å–ø–∞–ª–µ–Ω = 5+1
            }
            
            target_listing_type = bedroom_mapping.get(bedrooms)
            logger.info(f"üîç –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {bedrooms} —Å–ø–∞–ª–µ–Ω, target_listing_type: {target_listing_type}")
            
            # –ï—Å–ª–∏ house_type_data —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ listing_type)
            if isinstance(house_type_data, list):
                logger.info(f"üîç house_type_data —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å {len(house_type_data)} –∑–∞–ø–∏—Å—è–º–∏")
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ø–∞–ª–µ–Ω
                matching_records = [record for record in house_type_data if record.get('listing_type') == target_listing_type]
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(matching_records)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {target_listing_type}")
                
                if matching_records:
                    for record in matching_records:
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        logger.info(f"DEBUG: Processing record. Type: {type(record)}, Value: {record}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ record —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                        if not isinstance(record, dict):
                            logger.warning(f"‚ö†Ô∏è record –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(record)}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                        
                    listing_type = record.get('listing_type', '–Ω/–¥')
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    display_name = {
                        "0+1": "0 - —Å—Ç—É–¥–∏—è",
                        "1+1": "1 —Å–ø–∞–ª—å–Ω—è",
                        "2+1": "2 —Å–ø–∞–ª—å–Ω–∏", 
                        "3+1": "3 —Å–ø–∞–ª—å–Ω–∏",
                        "4+1": "4 —Å–ø–∞–ª—å–Ω–∏",
                        "5+1": "5+ —Å–ø–∞–ª–µ–Ω"
                    }.get(listing_type, listing_type)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
                    min_sale = record.get('min_unit_price_for_sale', 0)
                    avg_sale = record.get('unit_price_for_sale', 0)
                    max_sale = record.get('max_unit_price_for_sale', 0)
                    min_rent = record.get('min_unit_price_for_rent', 0)
                    avg_rent = record.get('unit_price_for_rent', 0)
                    max_rent = record.get('max_unit_price_for_rent', 0)
                    
                    report_lines.extend([
                        f"--- {display_name} ---",
                        "",
                        "--- –ü–†–û–î–ê–ñ–ò ---",
                        f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:",
                        f"‚Ç¨{format_number(min_sale)}",
                        "",
                        f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:",
                        f"‚Ç¨{format_number(avg_sale)}",
                        "",
                        f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:",
                        f"‚Ç¨{format_number(max_sale)}",
                        "",

                        f"üìè –°–æ–ø–æ—Å—Ç–∞–≤–∏–º–∞—è –ø–ª–æ—â–∞–¥—å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
                        f"{format_number(record.get('comparable_area_for_sale'))} –º¬≤",
                        "",
                        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:",
                        f"{format_number(record.get('count_for_sale'))}",
                        "",
                        f"üí∞ –¶–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, —Å—Ä–µ–¥–Ω—è—è:",
                        f"‚Ç¨{format_number(record.get('price_for_sale'))}",
                        "",
                        f"üèóÔ∏è –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
                        f"{format_number(record.get('average_age_for_sale'))} –ª–µ—Ç",
                        "",
                        f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
                        f"{format_number(record.get('listing_period_for_sale'))} –¥–Ω–µ–π",
                        "",
                        "--- –ê–†–ï–ù–î–ê ---",
                        f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤:",
                        f"‚Ç¨{format_number(min_rent)}",
                        "",
                        f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤:",
                        f"‚Ç¨{format_number(avg_rent)}",
                        "",
                        f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤:",
                        f"‚Ç¨{format_number(max_rent)}",
                        "",

                        f"üìè –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å –∞—Ä–µ–Ω–¥—ã:",
                        f"{format_number(record.get('comparable_area_for_rent'))} –º¬≤",
                        "",
                        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É:",
                        f"{format_number(record.get('count_for_rent'))}",
                        "",
                        f"üí∞ –¶–µ–Ω–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã, —Å—Ä–µ–¥–Ω—è—è:",
                        f"‚Ç¨{format_number(record.get('price_for_rent'))}",
                        "",
                        f"üèóÔ∏è –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã:",
                        f"{format_number(record.get('average_age_for_rent'))} –ª–µ—Ç",
                        "",
                        f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã:",
                        f"{format_number(record.get('listing_period_for_rent'))} –¥–Ω–µ–π",
                        "",
                        f"üíé –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:",
                        f"{format_number(record.get('yield'))}%",
                        "",
                    ])
            else:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                display_name = {
                    0: "0 - —Å—Ç—É–¥–∏—è",
                    1: "1 —Å–ø–∞–ª—å–Ω—è",
                    2: "2 —Å–ø–∞–ª—å–Ω–∏",
                    3: "3 —Å–ø–∞–ª—å–Ω–∏",
                    4: "4 —Å–ø–∞–ª—å–Ω–∏",
                    5: "5+ —Å–ø–∞–ª–µ–Ω"
                }.get(bedrooms, f"{bedrooms} —Å–ø–∞–ª–µ–Ω")
                
                logger.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è {bedrooms} —Å–ø–∞–ª–µ–Ω ({target_listing_type}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ house_type_data")
                logger.info(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ listing_type: {[record.get('listing_type') for record in house_type_data]}")
                
                report_lines.extend([
                    f"--- {display_name} ---",
                    "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    "",
                ])
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å
            if not isinstance(house_type_data, dict):
                logger.warning(f"‚ö†Ô∏è house_type_data –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(house_type_data)}")
                report_lines.extend([
                    "--- –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---",
                    "–î–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                    "",
                ])
            else:
                listing_type = house_type_data.get('listing_type', '–Ω/–¥')
                if listing_type == target_listing_type:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    display_name = {
                        "0+1": "0 - —Å—Ç—É–¥–∏—è",
                        "1+1": "1 —Å–ø–∞–ª—å–Ω—è",
                        "2+1": "2 —Å–ø–∞–ª—å–Ω–∏",
                        "3+1": "3 —Å–ø–∞–ª—å–Ω–∏",
                        "4+1": "4 —Å–ø–∞–ª—å–Ω–∏", 
                        "5+1": "5+ —Å–ø–∞–ª–µ–Ω"
                    }.get(listing_type, listing_type)
                    
                    report_lines.extend([
                        f"--- {display_name} ---",
                        "",
                        "--- –ü–†–û–î–ê–ñ–ò ---",
                        f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{format_number(house_type_data.get('min_unit_price_for_sale'))}",
                        f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{format_number(house_type_data.get('unit_price_for_sale'))}",
                        f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ‚Ç¨{format_number(house_type_data.get('max_unit_price_for_sale'))}",
                        f"üìè –°–æ–ø–æ—Å—Ç–∞–≤–∏–º–∞—è –ø–ª–æ—â–∞–¥—å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {format_number(house_type_data.get('comparable_area_for_sale'))} –º¬≤",
                        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {format_number(house_type_data.get('count_for_sale'))}",
                        f"üí∞ –¶–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{format_number(house_type_data.get('price_for_sale'))}",
                        f"üèóÔ∏è –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {format_number(house_type_data.get('average_age_for_sale'))} –ª–µ—Ç",
                        f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {format_number(house_type_data.get('listing_period_for_sale'))} –¥–Ω–µ–π",
                        "",
                        "--- –ê–†–ï–ù–î–ê ---",
                        f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{format_number(house_type_data.get('min_unit_price_for_rent'))}",
                        f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{format_number(house_type_data.get('unit_price_for_rent'))}",
                        f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã, –º¬≤: ‚Ç¨{format_number(house_type_data.get('max_unit_price_for_rent'))}",
                        f"üìè –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å –∞—Ä–µ–Ω–¥—ã: {format_number(house_type_data.get('comparable_area_for_rent'))} –º¬≤",
                        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É: {format_number(house_type_data.get('count_for_rent'))}",
                        f"üí∞ –¶–µ–Ω–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã, —Å—Ä–µ–¥–Ω—è—è: ‚Ç¨{format_number(house_type_data.get('price_for_rent'))}",
                        f"üèóÔ∏è –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {format_number(house_type_data.get('average_age_for_rent'))} –ª–µ—Ç",
                        f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {format_number(house_type_data.get('listing_period_for_rent'))} –¥–Ω–µ–π",
                        f"üíé –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {format_number(house_type_data.get('yield'))}%",
                        "",
                    ])
                else:
                    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ø–∞–ª–µ–Ω
                    display_name = {
                        0: "0 - —Å—Ç—É–¥–∏—è",
                        1: "1 —Å–ø–∞–ª—å–Ω—è",
                        2: "2 —Å–ø–∞–ª—å–Ω–∏",
                        3: "3 —Å–ø–∞–ª—å–Ω–∏",
                        4: "4 —Å–ø–∞–ª—å–Ω–∏",
                        5: "5+ —Å–ø–∞–ª–µ–Ω"
                    }.get(bedrooms, f"{bedrooms} —Å–ø–∞–ª–µ–Ω")
                    
                    report_lines.extend([
                        f"--- {display_name} ---",
                        "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                        "",
                    ])
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        if market_data and market_data.get('general_data'):
            general = market_data['general_data']
            avg_price_sale = general.get('unit_price_for_sale', 0)
            avg_price_rent = general.get('unit_price_for_rent', 0)
            yield_value = general.get('yield', 0)
            
            report_lines.extend([
                "",
                "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò",
                "",
            ])
            
            # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
            if price and avg_price_sale:
                price_per_sqm = price / 100  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø–ª–æ—â–∞–¥—å 100–º¬≤
                if price_per_sqm < avg_price_sale * 0.8:
                    report_lines.extend([
                        "‚úÖ –¶–µ–Ω–∞ –Ω–∏–∂–µ —Ä—ã–Ω–æ—á–Ω–æ–π –Ω–∞ 20%+",
                        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ö–æ—Ä–æ—à–µ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–µ–π",
                        "",
                    ])
                elif price_per_sqm > avg_price_sale * 1.2:
                    report_lines.extend([
                        "‚ö†Ô∏è –¶–µ–Ω–∞ –≤—ã—à–µ —Ä—ã–Ω–æ—á–Ω–æ–π –Ω–∞ 20%+",
                        "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ—Ä–≥ –∏–ª–∏ –ø–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤",
                        "",
                    ])
            else:
                report_lines.extend([
                        "üìä –¶–µ–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞",
                        "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è –æ—Ü–µ–Ω–∫–∞",
                    "",
                ])
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        if yield_value:
            if yield_value > 8:
                report_lines.extend([
                    "üí∞ –í—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (>8%)",
                    "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π",
                    "",
                ])
            elif yield_value > 6:
                report_lines.extend([
                    "üí° –•–æ—Ä–æ—à–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (6-8%)",
                    "–°—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥",
                    "",
                ])
            else:
                report_lines.extend([
                    "üìâ –ù–∏–∑–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (<6%)",
                    "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                    "",
                ])
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report_lines.extend([
            "",
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    report_lines.extend([
        "=" * 50,
        "–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        ])
    
    return "\n".join(report_lines)

@app.route('/api/search_properties', methods=['POST'])
def api_search_properties():
    """–ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    data = request.json or {}
    property_type = data.get('property_type')
    bedrooms = data.get('bedrooms')
    price_min = data.get('price_min')
    price_max = data.get('price_max')
    city = data.get('city')
    district = data.get('district')
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        
        properties = [
            {
                'id': 1,
                'address': '—É–ª. –ê—Ç–∞—Ç—é—Ä–∫–∞, 123, –ê–Ω—Ç–∞–ª—å—è',
                'bedrooms': bedrooms or 3,
                'price': 250000,
                'property_type': property_type or 'sale',
                'latitude': 36.8969,
                'longitude': 30.7133
            }
        ]
        
        return jsonify({
            'success': True,
            'properties': properties,
            'total': len(properties)
        })
        
    except Exception as e:
        logger.error(f"Error searching properties: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/market_statistics', methods=['POST'])
def api_market_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä—ã–Ω–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É –∏ —Ä–∞–π–æ–Ω—É –∏–∑ Supabase"""
    data = request.json or {}
    city = data.get('city')
    district = data.get('district')
    try:
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É –∏ —Ä–∞–π–æ–Ω—É (case-insensitive)
        filters = []
        if city:
            filters.append(('city', city.lower()))
        if district:
            filters.append(('district', district.lower()))
        # Property sales
        sales_query = supabase.table('property_sales').select('*')
        if city:
            sales_query = sales_query.ilike('city', f'%{city}%')
        if district:
            sales_query = sales_query.ilike('district', f'%{district}%')
        sales = sales_query.execute().data or []
        # Long term rentals
        long_term_query = supabase.table('long_term_rentals').select('*')
        if city:
            long_term_query = long_term_query.ilike('city', f'%{city}%')
        if district:
            long_term_query = long_term_query.ilike('district', f'%{district}%')
        long_term = long_term_query.execute().data or []
        # Short term rentals
        short_term_query = supabase.table('short_term_rentals').select('*')
        if city:
            short_term_query = short_term_query.ilike('city', f'%{city}%')
        if district:
            short_term_query = short_term_query.ilike('district', f'%{district}%')
        short_term = short_term_query.execute().data or []
        # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤
        sqm_prices = [x for x in (s.get('price_per_sqm') for s in sales) if isinstance(x, (int, float))]
        avg_price_per_sqm = sum(sqm_prices) / len(sqm_prices) if sqm_prices else 0
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
        total_properties = len(sales)
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏
        days_on_market = [x for x in (s.get('days_on_market') for s in sales) if isinstance(x, (int, float))]
        avg_days_on_market = sum(days_on_market) / len(days_on_market) if days_on_market else 0
        # –ì–æ–¥–æ–≤–æ–π —Ä–æ—Å—Ç —Ü–µ–Ω (–ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 2 –≥–æ–¥–∞–º, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç—ã)
        price_growth_yoy = 0
        try:
            sales_with_dates = [s for s in sales if s.get('sale_date') and isinstance(s.get('asking_price'), (int, float))]
            if len(sales_with_dates) > 5:
                sales_with_dates.sort(key=lambda x: x['sale_date'])
                first_year = sales_with_dates[0]['sale_date'][:4]
                last_year = sales_with_dates[-1]['sale_date'][:4]
                first_prices = [s['asking_price'] for s in sales_with_dates if s['sale_date'][:4] == first_year and isinstance(s.get('asking_price'), (int, float))]
                last_prices = [s['asking_price'] for s in sales_with_dates if s['sale_date'][:4] == last_year and isinstance(s.get('asking_price'), (int, float))]
                if first_prices and last_prices:
                    price_growth_yoy = (sum(last_prices)/len(last_prices) - sum(first_prices)/len(first_prices)) / (sum(first_prices)/len(first_prices)) * 100
        except Exception:
            price_growth_yoy = 0
        # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã (long_term)
        rental_yield = 0
        try:
            if avg_price_per_sqm > 0 and long_term:
                rents = [x for x in (r.get('monthly_rent') for r in long_term) if isinstance(x, (int, float))]
                avg_rent = sum(rents) / len(rents) if rents else 0
                prices = [x for x in (s.get('asking_price') for s in sales) if isinstance(x, (int, float))]
                avg_price = sum(prices) / len(prices) if prices else 0
                if avg_price > 0:
                    rental_yield = (avg_rent * 12) / avg_price * 100
        except Exception:
            rental_yield = 0
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–∂)
        market_activity = 'high' if total_properties > 100 else 'medium' if total_properties > 20 else 'low'
        # –¢—Ä–µ–Ω–¥ —Ü–µ–Ω (–ø–æ price_growth_yoy)
        price_trend = 'up' if price_growth_yoy > 5 else 'stable' if price_growth_yoy > -2 else 'down'
        stats = {
            'avg_price_per_sqm': round(avg_price_per_sqm, 2),
            'price_growth_yoy': round(price_growth_yoy, 2),
            'total_properties': total_properties,
            'avg_days_on_market': round(avg_days_on_market, 1),
            'rental_yield': round(rental_yield, 2),
            'price_trend': price_trend,
            'market_activity': market_activity
        }
        return jsonify({
            'success': True,
            'statistics': stats
        })
    except Exception as e:
        logger.error(f"Error getting market statistics: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/calculate_roi', methods=['POST'])
def api_calculate_roi():
    data = request.json or {}
    property_type = data.get('property_type')
    purchase_price = data.get('purchase_price')
    purchase_costs = data.get('purchase_costs', 0)
    try:
        purchase_price = float(purchase_price) if purchase_price is not None else 0
        purchase_costs = float(purchase_costs) if purchase_costs is not None else 0
    except (ValueError, TypeError):
        return jsonify({'error': 'Invalid purchase_price or purchase_costs'}), 400

    if property_type == 'short_term':
        avg_nightly_rate = data.get('avg_nightly_rate')
        occupancy_rate = data.get('occupancy_rate', 75)
        try:
            avg_nightly_rate = float(avg_nightly_rate) if avg_nightly_rate is not None else 0
            occupancy_rate = float(occupancy_rate) if occupancy_rate is not None else 75
        except (ValueError, TypeError):
            return jsonify({'error': 'Invalid avg_nightly_rate or occupancy_rate'}), 400
        # –†–∞—Å—á–µ—Ç ROI –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã
        monthly_income = avg_nightly_rate * (occupancy_rate / 100) * 30
        annual_income = monthly_income * 12
        total_investment = purchase_price + purchase_costs
        roi = (annual_income / total_investment) * 100 if total_investment else 0
    elif property_type == 'long_term':
        monthly_rent = data.get('monthly_rent')
        try:
            monthly_rent = float(monthly_rent) if monthly_rent is not None else 0
        except (ValueError, TypeError):
            return jsonify({'error': 'Invalid monthly_rent'}), 400
        # –†–∞—Å—á–µ—Ç ROI –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã
        annual_income = monthly_rent * 12
        total_investment = purchase_price + purchase_costs
        roi = (annual_income / total_investment) * 100 if total_investment else 0
    else:
        return jsonify({'error': 'Invalid property type'}), 400
    
    return jsonify({
        'success': True,
        'roi': round(roi, 2),
        'annual_income': annual_income,
        'total_investment': total_investment
    })

@app.route('/api/similar_properties', methods=['POST'])
def api_similar_properties():
    """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    data = request.json or {}
    address = data.get('address')
    bedrooms = data.get('bedrooms')
    price = data.get('price')
    try:
        price = float(price) if price is not None else 0
    except (ValueError, TypeError):
        price = 0
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        
        similar_properties = [
            {
                'id': 1,
                'address': '—É–ª. –ê—Ç–∞—Ç—é—Ä–∫–∞, 125, –ê–Ω—Ç–∞–ª—å—è',
                'bedrooms': bedrooms,
                'price': price * 0.95,
                'similarity_score': 0.95
            },
            {
                'id': 2,
                'address': '—É–ª. –ê—Ç–∞—Ç—é—Ä–∫–∞, 127, –ê–Ω—Ç–∞–ª—å—è',
                'bedrooms': bedrooms,
                'price': price * 1.05,
                'similarity_score': 0.92
            }
        ]
        
        return jsonify({
            'success': True,
            'properties': similar_properties
        })
        
    except Exception as e:
        logger.error(f"Error finding similar properties: {e}")
        return jsonify({'error': 'Internal error'}), 500

def get_economic_data(country_code='TUR', years_back=10):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–í–í–ü –∏ –∏–Ω—Ñ–ª—è—Ü–∏—è) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã imf_economic_data
    
    Args:
        country_code (str): –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é TUR –¥–ª—è –¢—É—Ä—Ü–∏–∏)
        years_back (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –í–í–ü –∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ª–µ—Ç
        current_year = datetime.now().year
        start_year = current_year - years_back
        
        # –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ imf_economic_data –¥–ª—è –í–í–ü (NGDP_RPCH)
        gdp_query = supabase.table('imf_economic_data').select('*').eq('country_code', country_code).eq('indicator_code', 'NGDP_RPCH').gte('year', start_year).order('year', desc=True)
        gdp_result = gdp_query.execute()
        
        # –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ imf_economic_data –¥–ª—è –∏–Ω—Ñ–ª—è—Ü–∏–∏ (PCPIPCH)
        inflation_query = supabase.table('imf_economic_data').select('*').eq('country_code', country_code).eq('indicator_code', 'PCPIPCH').gte('year', start_year).order('year', desc=True)
        inflation_result = inflation_query.execute()
        
        if not gdp_result.data and not inflation_result.data:
            logger.warning(f"No economic data found for country {country_code}, using fallback data")
            # Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¢—É—Ä—Ü–∏–∏
            fallback_gdp_data = [
                {'year': 2020, 'value': -1.2, 'indicator_code': 'NGDP_RPCH', 'indicator_name': 'GDP growth'},
                {'year': 2021, 'value': 11.4, 'indicator_code': 'NGDP_RPCH', 'indicator_name': 'GDP growth'},
                {'year': 2022, 'value': 5.6, 'indicator_code': 'NGDP_RPCH', 'indicator_name': 'GDP growth'},
                {'year': 2023, 'value': 4.5, 'indicator_code': 'NGDP_RPCH', 'indicator_name': 'GDP growth'},
                {'year': 2024, 'value': 4.1, 'indicator_code': 'NGDP_RPCH', 'indicator_name': 'GDP growth'}
            ]
            
            fallback_inflation_data = [
                {'year': 2020, 'value': 12.3, 'indicator_code': 'PCPIPCH', 'indicator_name': 'Inflation'},
                {'year': 2021, 'value': 19.6, 'indicator_code': 'PCPIPCH', 'indicator_name': 'Inflation'},
                {'year': 2022, 'value': 72.3, 'indicator_code': 'PCPIPCH', 'indicator_name': 'Inflation'},
                {'year': 2023, 'value': 64.8, 'indicator_code': 'PCPIPCH', 'indicator_name': 'Inflation'},
                {'year': 2024, 'value': 58.2, 'indicator_code': 'PCPIPCH', 'indicator_name': 'Inflation'}
            ]
            
            gdp_data = fallback_gdp_data
            inflation_data = fallback_inflation_data
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –í–í–ü
            gdp_data = []
            for record in gdp_result.data:
                year = record.get('year')
                value = record.get('value')
                if year and value is not None:
                    gdp_data.append({
                        'year': year,
                        'value': float(value),  # –†–æ—Å—Ç –í–í–ü –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                        'indicator_code': record.get('indicator_code'),
                        'indicator_name': record.get('indicator_name')
                    })
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏
            inflation_data = []
            for record in inflation_result.data:
                year = record.get('year')
                value = record.get('value')
                if year and value is not None:
                    inflation_data.append({
                        'year': year,
                        'value': float(value),  # –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                        'indicator_code': record.get('indicator_code'),
                        'indicator_name': record.get('indicator_name')
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–æ–¥—É (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)
        gdp_data.sort(key=lambda x: x['year'])
        inflation_data.sort(key=lambda x: x['year'])
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã
        gdp_values = [d['value'] for d in gdp_data]
        inflation_values = [d['value'] for d in inflation_data]
        
        gdp_trend = calculate_trend(gdp_values) if gdp_values else 0
        inflation_trend = calculate_trend(inflation_values) if inflation_values else 0
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        detailed_calculations = generate_detailed_calculations(gdp_data, inflation_data)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        saved_interpretations, saved_calculations = load_interpretations_from_database(country_code)
        
        if saved_interpretations and saved_calculations:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            interpretations = saved_interpretations
            detailed_calculations.update(saved_calculations)
            logger.info(f"Using cached interpretations for {country_code}")
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ChatGPT
            interpretations = {}
            for lang in ['en', 'ru', 'tr', 'fr', 'de']:
                interpretations[lang] = generate_trend_interpretation_with_chatgpt(
                    gdp_trend, inflation_trend, gdp_data, inflation_data, lang
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                save_interpretations_to_database(country_code, interpretations, detailed_calculations)
            except Exception as e:
                logger.warning(f"Could not save interpretations to database: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
        country_name = gdp_result.data[0].get('country_name') if gdp_result.data else 'Turkey'
        
        return {
            'gdp_data': gdp_data,
            'inflation_data': inflation_data,
            'country_code': country_code,
            'country_name': country_name,
            'gdp_trend': gdp_trend,
            'inflation_trend': inflation_trend,
            'latest_gdp': gdp_data[-1] if gdp_data else None,
            'latest_inflation': inflation_data[-1] if inflation_data else None,
            'data_years': f"{start_year}-{current_year}",
            'detailed_calculations': detailed_calculations,
            'interpretations': interpretations
        }
        
    except Exception as e:
        logger.error(f"Error fetching economic data: {e}")
        return {
            'gdp_data': [],
            'inflation_data': [],
            'country_code': country_code,
            'country_name': 'Unknown',
            'error': str(e)
        }

def calculate_trend(values):
    """
    –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ (—Ä–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ) –¥–ª—è —Ä—è–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    
    Args:
        values (list): –°–ø–∏—Å–æ–∫ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        
    Returns:
        float: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–¥–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π = —Ä–æ—Å—Ç, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π = –ø–∞–¥–µ–Ω–∏–µ)
    """
    if len(values) < 2:
        return 0
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        changes = []
        for i in range(1, len(values)):
            if values[i-1] != 0:
                change = (values[i] - values[i-1]) / values[i-1]
                changes.append(change)
        
        return sum(changes) / len(changes) if changes else 0
    except Exception:
        return 0

def create_economic_chart_data(economic_data):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –í–í–ü –∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏
    
    Args:
        economic_data (dict): –î–∞–Ω–Ω—ã–µ –∏–∑ get_economic_data()
        
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    """
    gdp_data = economic_data.get('gdp_data', [])
    inflation_data = economic_data.get('inflation_data', [])
    country_name = economic_data.get('country_name', 'Unknown')
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –í–í–ü (—Ä–æ—Å—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
    gdp_chart = {
        'labels': [str(d['year']) for d in gdp_data],
        'datasets': [
            {
                'label': f'–†–æ—Å—Ç –í–í–ü (%) - {country_name}',
                'data': [d['value'] for d in gdp_data],  # –†–æ—Å—Ç –í–í–ü –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                'borderColor': '#667eea',
                'backgroundColor': 'rgba(102, 126, 234, 0.1)',
                'tension': 0.4,
                'fill': False
            }
        ]
    }
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–Ω—Ñ–ª—è—Ü–∏–∏
    inflation_chart = {
        'labels': [str(d['year']) for d in inflation_data],
        'datasets': [
            {
                'label': f'–ò–Ω—Ñ–ª—è—Ü–∏—è (%) - {country_name}',
                'data': [d['value'] for d in inflation_data],  # –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                'borderColor': '#dc3545',
                'backgroundColor': 'rgba(220, 53, 69, 0.1)',
                'tension': 0.4,
                'fill': False
            }
        ]
    }
    
    return {
        'gdp_chart': gdp_chart,
        'inflation_chart': inflation_chart,
        'trends': {
            'gdp_trend': economic_data.get('gdp_trend', 0),
            'inflation_trend': economic_data.get('inflation_trend', 0)
        },
        'latest': {
            'gdp': economic_data.get('latest_gdp'),
            'inflation': economic_data.get('latest_inflation')
        },
        'country_name': country_name,
        'country_code': economic_data.get('country_code', 'Unknown'),
        'detailed_calculations': economic_data.get('detailed_calculations', {}),
        'interpretations': economic_data.get('interpretations', {})
    }

@app.route('/api/full_report', methods=['POST'])
def api_full_report():
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    address = data.get('address')
    lat = data.get('lat')
    lng = data.get('lng')
    bedrooms = data.get('bedrooms')
    price = data.get('price')
    additional_data = data.get('additional_data', {})
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞
    area = data.get('area')
    logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∏–∑ POST-–¥–∞–Ω–Ω—ã—Ö: {area}")
    logger.info(f"üîç –í—Å–µ POST-–¥–∞–Ω–Ω—ã–µ: {data}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    additional_data = data.get('additional_data', {})
    age_id = additional_data.get('age')
    floor_id = additional_data.get('floor')
    heating_id = additional_data.get('heating')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π
    location_codes = data.get('location_codes', {})
    if not location_codes:
        # –ï—Å–ª–∏ –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –∏–∑ –∞–¥—Ä–µ—Å–∞–æ—Ç—á–µ—Ç
        try:
            location_codes = get_location_codes_from_address(address)
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –∏–∑ –∞–¥—Ä–µ—Å–∞: {location_codes}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –ª–æ–∫–∞—Ü–∏–π: {e}")
            location_codes = {}
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_language = 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    try:
        user_result = supabase.table('users').select('language').eq('telegram_id', telegram_id).execute()
        if user_result.data:
            user_language = user_result.data[0].get('language', 'ru')
            logger.info(f"üåç –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {user_language}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    try:
        price = float(price) if price is not None else 0
    except (ValueError, TypeError):
        price = 0
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º bedrooms –≤ —á–∏—Å–ª–æ
    try:
        bedrooms = int(bedrooms) if bedrooms is not None else 1
    except (ValueError, TypeError):
        bedrooms = 1
        
    logger.info(f"üîç –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è {address} —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {additional_data}")
    try:
        # --- –†–ê–°–ß–ï–¢ –ë–ê–ó–û–í–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í –ù–ê –û–°–ù–û–í–ï –¶–ï–ù–´ –ò –õ–û–ö–ê–¶–ò–ò ---
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∑–∞ –∫–≤.–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞ –∏ –ø–ª–æ—â–∞–¥–∏
        if area and area != 'unknown' and area != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
            try:
                area_value = float(area)
                avg_sqm = price / area_value if area_value > 0 else 0
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞: {area_value} –º¬≤")
            except (ValueError, TypeError):
                # Fallback –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                typical_size = 80 if bedrooms <= 2 else 120 if bedrooms <= 3 else 150
                avg_sqm = price / typical_size if typical_size > 0 else 0
                logger.info(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {typical_size} –º¬≤")
        else:
            # Fallback –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            typical_size = 80 if bedrooms <= 2 else 120 if bedrooms <= 3 else 150
            avg_sqm = price / typical_size if typical_size > 0 else 0
            logger.info(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {typical_size} –º¬≤")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –≤ –¢—É—Ä—Ü–∏–∏
        is_turkish = False
        currency_rate = None
        if location_codes:
            from currency_functions import is_turkish_location, get_current_currency_rate
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–æ–¥–∞–º –ª–æ–∫–∞—Ü–∏–∏
            country_id = location_codes.get('country_id')
            if country_id:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ ID
                try:
                    country_result = supabase.table('locations').select('country_name').eq('country_id', country_id).limit(1).execute()
                    if country_result.data:
                        country_name = country_result.data[0].get('country_name', '').lower()
                        is_turkish = country_name in ['turkey', 't√ºrkiye', 'tr', 'tur']
                        logger.info(f"üåç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω—ã –ø–æ ID {country_id}: {country_name}, –¢—É—Ä—Ü–∏—è: {is_turkish}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω—ã: {e}")
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ ID, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∞–¥—Ä–µ—Å—É
            if not is_turkish:
                try:
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    temp_location_components = {
                        'country': location_codes.get('country_name', ''),
                        'country_code': location_codes.get('country_code', '')
                    }
                    is_turkish = is_turkish_location(temp_location_components)
                    logger.info(f"üåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É: –¢—É—Ä—Ü–∏—è: {is_turkish}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –∞–¥—Ä–µ—Å—É: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –≤ –¢—É—Ä—Ü–∏–∏
            if is_turkish:
                currency_rate = get_current_currency_rate()
                if currency_rate:
                    logger.info(f"üí± –ü–æ–ª—É—á–µ–Ω –∫—É—Ä—Å –≤–∞–ª—é—Ç –¥–ª—è –¢—É—Ä—Ü–∏–∏: {currency_rate}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç –¥–ª—è –¢—É—Ä—Ü–∏–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        economic_data = get_economic_data('TUR', 10)  # –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–µ—Ç
        chart_data = create_economic_chart_data(economic_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω
        market_comparison_data = get_market_comparison_data(
            age_id, floor_id, heating_id, area, price, location_codes, bedrooms, is_turkish, currency_rate
        )
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {market_comparison_data}")
        
        # –ë–∞–∑–æ–≤—ã–µ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        inflation = economic_data.get('latest_inflation', {}).get('value', 35.9) if economic_data else 35.9
        eur_try = economic_data.get('latest_exchange_rate', {}).get('value', 35.2) if economic_data else 35.2
        refi_rate = economic_data.get('latest_interest_rate', {}).get('value', 45.0) if economic_data else 45.0
        gdp_growth = economic_data.get('latest_gdp', {}).get('value', 2.7) if economic_data else 2.7
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–æ—Å—Ç —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        price_growth = (inflation * 0.3 + gdp_growth * 0.4 + (refi_rate * 0.1)) / 100
        five_year_growth = price_growth * 5
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç –∞—Ä–µ–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –∏ –ª–æ–∫–∞—Ü–∏–∏
        base_monthly_rent = price * 0.008  # –±–∞–∑–æ–≤–∞—è –º–µ—Å—è—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ 0.8% –æ—Ç —Ü–µ–Ω—ã
        base_annual_rent = base_monthly_rent * 12
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω
        bedroom_multiplier = 1.0 + (bedrooms - 1) * 0.15  # –∫–∞–∂–¥–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–ø–∞–ª—å–Ω—è +15%
        short_term_income = int(base_monthly_rent * bedroom_multiplier * 1.2)  # –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ +20%
        long_term_income = int(base_annual_rent * bedroom_multiplier)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ (–ø–æ—Å–ª–µ –Ω–∞–ª–æ–≥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤)
        short_term_net = int(short_term_income * 0.8)  # 20% –Ω–∞ –Ω–∞–ª–æ–≥–∏ –∏ —Ä–∞—Å—Ö–æ–¥—ã
        long_term_net = int(long_term_income * 0.8)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ROI
        short_term_roi = ((short_term_income * 12 * 5) / price) * 100
        long_term_roi = ((long_term_income * 5) / price) * 100
        no_rent_roi = (five_year_growth / price) * 100
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        alt_deposit = (refi_rate * 0.8) / 100  # –¥–µ–ø–æ–∑–∏—Ç –Ω–∏–∂–µ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏
        alt_bonds = (refi_rate * 1.1) / 100    # –æ–±–ª–∏–≥–∞—Ü–∏–∏ –≤—ã—à–µ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏
        alt_stocks = (gdp_growth * 2.5) / 100  # –∞–∫—Ü–∏–∏ –∫–∞–∫ –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞ –í–í–ü
        alt_reits = (price_growth * 1.5) / 100 # REITs –∫–∞–∫ –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞ —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
        
        # –ù–∞–ª–æ–≥–∏ –∏ —Å–±–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞
        taxes = {
            'transfer_tax': 0.04,  # 4% –æ—Ç —Ü–µ–Ω—ã
            'stamp_duty': 0.015,   # 1.5% –æ—Ç —Ü–µ–Ω—ã
            'notary': min(1200, price * 0.01),  # –Ω–æ—Ç–∞—Ä–∏—É—Å: –º–∏–Ω–∏–º—É–º 1200 –∏–ª–∏ 1% –æ—Ç —Ü–µ–Ω—ã
            'annual_property_tax': 0.001,       # 0.1% –æ—Ç —Ü–µ–Ω—ã
            'annual_property_tax_max': 0.006,   # –º–∞–∫—Å–∏–º—É–º 0.6%
            'rental_income_tax': '15-35%',      # –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —à–∫–∞–ª–∞
            'capital_gains_tax': '15-40%'       # –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —à–∫–∞–ª–∞
        }
        
        # –†–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        risks = []
        if eur_try > 30:
            risks.append(f'–í–∞–ª—é—Ç–Ω—ã–π: TRY/EUR ‚ñ≤{((eur_try - 30) / 30 * 100):.1f}% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥')
        if refi_rate > 40:
            risks.append(f'–ú–æ–Ω–µ—Ç–∞—Ä–Ω—ã–π: –í—ã—Å–æ–∫–∞—è –∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ {refi_rate:.1f}%')
        if inflation > 30:
            risks.append(f'–ò–Ω—Ñ–ª—è—Ü–∏–æ–Ω–Ω—ã–π: –í—ã—Å–æ–∫–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è {inflation:.1f}%')
        if gdp_growth < 3:
            risks.append(f'–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π: –ù–∏–∑–∫–∏–π —Ä–æ—Å—Ç –í–í–ü {gdp_growth:.1f}%')
        
        # –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –∏ –ª–æ–∫–∞—Ü–∏–∏
        days_on_market = int(60 + (price / 10000) * 2)  # —á–µ–º –¥–æ—Ä–æ–∂–µ, —Ç–µ–º –¥–æ–ª—å—à–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è
        liquidity = f'–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏: {days_on_market} –¥–Ω–µ–π'
        
        # –†–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–π–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        development_projects = []
        if gdp_growth > 4:
            development_projects.append('–ê–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã')
        if refi_rate < 50:
            development_projects.append('–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è')
        if inflation < 40:
            development_projects.append('–°—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å—Ä–µ–¥–∞')
        
        district = ', '.join(development_projects) if development_projects else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–π–æ–Ω–∞'
        
        # –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        def translate_to_language_full_report(text, target_language):
            """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç—É—Ä–µ—Ü–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
            translations = {
                'ru': {
                    # –í–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞
                    '0-5 yƒ±l': '0-5 –ª–µ—Ç',
                    '5-10 yƒ±l': '5-10 –ª–µ—Ç', 
                    '10-20 yƒ±l': '10-20 –ª–µ—Ç',
                    '20+ yƒ±l': '20+ –ª–µ—Ç',
                    'Yeni': '–ù–æ–≤—ã–π',
                    'Eski': '–°—Ç–∞—Ä—ã–π',
                    '0-4': '0-4 –≥–æ–¥–∞',
                    '11-15': '11-15 –ª–µ—Ç',
                    '16 ve √ºzeri': '16 –∏ –±–æ–ª–µ–µ',
                    '0': '0 –ª–µ—Ç',
                    
                    # –≠—Ç–∞–∂
                    'Zemin kat': '–í—Ö–æ–¥–Ω–æ–π —ç—Ç–∞–∂',
                    '1. kat': '1 —ç—Ç–∞–∂',
                    '2. kat': '2 —ç—Ç–∞–∂',
                    '3. kat': '3 —ç—Ç–∞–∂',
                    '4. kat': '4 —ç—Ç–∞–∂',
                    '5. kat': '5 —ç—Ç–∞–∂',
                    '6-10 kat': '6-10 —ç—Ç–∞–∂',
                    '11-20 kat': '11-20 —ç—Ç–∞–∂',
                    'Penthouse': '–ü–µ–Ω—Ç—Ö–∞—É—Å',
                    '√úst kat': '–í–µ—Ä—Ö–Ω–∏–π —ç—Ç–∞–∂',
                    'Giri≈ü Altƒ±': '–ü–æ–¥–≤–∞–ª',
                    'Giri≈ü': '–í—Ö–æ–¥–Ω–æ–π —ç—Ç–∞–∂',
                    'Giri≈ü √úst√º': '–ú–µ–∂–¥—É—ç—Ç–∞–∂–Ω—ã–π',
                    'Ara Kat': '–°—Ä–µ–¥–Ω–∏–π —ç—Ç–∞–∂',
                    'Ara √úst√º': '–í–µ—Ä—Ö–Ω–∏–π —Å—Ä–µ–¥–Ω–∏–π',
                    'En √úst': '–°–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π',
                    'M√ºstakil': '–û—Ç–¥–µ–ª—å–Ω—ã–π',
                    
                    # –û—Ç–æ–ø–ª–µ–Ω–∏–µ
                    'Merkezi': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ',
                    'Doƒüalgaz': '–ì–∞–∑–æ–≤–æ–µ',
                    'Kombi': '–ö–æ—Ç–µ–ª',
                    'Elektrik': '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ',
                    'Yok': '–ë–µ–∑ –æ—Ç–æ–ø–ª–µ–Ω–∏—è',
                    'Klima': '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä',
                    
                    # –û–±—â–∏–µ
                    'Belirtilmemi≈ü': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    'Bilinmiyor': '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ'
                },
                'en': {
                    # Age
                    '0-5 yƒ±l': '0-5 years',
                    '5-10 yƒ±l': '5-10 years', 
                    '10-20 yƒ±l': '10-20 years',
                    '20+ yƒ±l': '20+ years',
                    'Yeni': 'New',
                    'Eski': 'Old',
                    '0-4': '0-4 years',
                    '11-15': '11-15 years',
                    '16 ve √ºzeri': '16 and over',
                    '0': '0 years',
                    
                    # Floor
                    'Zemin kat': 'Ground floor',
                    '1. kat': '1st floor',
                    '2. kat': '2nd floor',
                    '3. kat': '3rd floor',
                    '4. kat': '4th floor',
                    '5. kat': '5th floor',
                    '6-10 kat': '6-10 floors',
                    '11-20 kat': '11-20 floors',
                    'Penthouse': 'Penthouse',
                    '√úst kat': 'Top floor',
                    'Giri≈ü Altƒ±': 'Basement',
                    'Giri≈ü': 'Ground floor',
                    'Giri≈ü √úst√º': 'Mezzanine',
                    'Ara Kat': 'Middle floor',
                    'Ara √úst√º': 'Upper middle',
                    'En √úst': 'Topmost',
                    'M√ºstakil': 'Detached',
                    
                    # Heating
                    'Merkezi': 'Central',
                    'Doƒüalgaz': 'Gas',
                    'Kombi': 'Boiler',
                    'Elektrik': 'Electric',
                    'Yok': 'None',
                    'Klima': 'Air conditioning',
                    
                    # General
                    'Belirtilmemi≈ü': 'Not specified',
                    'Bilinmiyor': 'Unknown'
                },
                'de': {
                    # Alter
                    '0-5 yƒ±l': '0-5 Jahre',
                    '5-10 yƒ±l': '5-10 Jahre', 
                    '10-20 yƒ±l': '10-20 Jahre',
                    '20+ yƒ±l': '20+ Jahre',
                    'Yeni': 'Neu',
                    'Eski': 'Alt',
                    '0-4': '0-4 Jahre',
                    '11-15': '11-15 Jahre',
                    '16 ve √ºzeri': '16 und mehr',
                    '0': '0 Jahre',
                    
                    # Etage
                    'Zemin kat': 'Erdgeschoss',
                    '1. kat': '1. Etage',
                    '2. kat': '2. Etage',
                    '3. kat': '3. Etage',
                    '4. kat': '4. Etage',
                    '5. kat': '5. Etage',
                    '6-10 kat': '6-10 Etagen',
                    '11-20 kat': '11-20 Etagen',
                    'Penthouse': 'Penthouse',
                    '√úst kat': 'Obergeschoss',
                    'Giri≈ü Altƒ±': 'Keller',
                    'Giri≈ü': 'Erdgeschoss',
                    'Giri≈ü √úst√º': 'Zwischengeschoss',
                    'Ara Kat': 'Mittelgeschoss',
                    'Ara √úst√º': 'Oberes Mittelgeschoss',
                    'En √úst': 'Oberstes',
                    'M√ºstakil': 'Frei stehend',
                    
                    # Heizung
                    'Merkezi': 'Zentral',
                    'Doƒüalgaz': 'Gas',
                    'Kombi': 'Kessel',
                    'Elektrik': 'Elektrisch',
                    'Yok': 'Keine',
                    'Klima': 'Klimaanlage',
                    
                    # Allgemein
                    'Belirtilmemi≈ü': 'Nicht angegeben',
                    'Bilinmiyor': 'Unbekannt'
                },
                'fr': {
                    # √Çge
                    '0-5 yƒ±l': '0-5 ans',
                    '5-10 yƒ±l': '5-10 ans', 
                    '10-20 yƒ±l': '10-20 ans',
                    '20+ yƒ±l': '20+ ans',
                    'Yeni': 'Nouveau',
                    'Eski': 'Ancien',
                    '0-4': '0-4 ans',
                    '11-15': '11-15 ans',
                    '16 ve √ºzeri': '16 et plus',
                    '0': '0 ans',
                    
                    # √âtage
                    'Zemin kat': 'Rez-de-chauss√©e',
                    '1. kat': '1er √©tage',
                    '2. kat': '2e √©tage',
                    '3. kat': '3e √©tage',
                    '4. kat': '4e √©tage',
                    '5. kat': '5e √©tage',
                    '6-10 kat': '6-10 √©tages',
                    '11-20 kat': '11-20 √©tages',
                    'Penthouse': 'Penthouse',
                    '√úst kat': 'Dernier √©tage',
                    'Giri≈ü Altƒ±': 'Sous-sol',
                    'Giri≈ü': 'Rez-de-chauss√©e',
                    'Giri≈ü √úst√º': 'Entresol',
                    'Ara Kat': '√âtage interm√©diaire',
                    'Ara √úst√º': '√âtage sup√©rieur interm√©diaire',
                    'En √úst': 'Plus haut',
                    'M√ºstakil': 'Ind√©pendant',
                    
                    # Chauffage
                    'Merkezi': 'Central',
                    'Doƒüalgaz': 'Gaz',
                    'Kombi': 'Chaudi√®re',
                    'Elektrik': '√âlectrique',
                    'Yok': 'Aucun',
                    'Klima': 'Climatisation',
                    
                    # G√©n√©ral
                    'Belirtilmemi≈ü': 'Non sp√©cifi√©',
                    'Bilinmiyor': 'Inconnu'
                }
            }
            
            target_translations = translations.get(target_language, translations['en'])
            return target_translations.get(text, text)
        
        # --- –ê–ù–ê–õ–ò–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –î–ê–ù–ù–´–• ---
        additional_analysis = {}
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ ID
        def get_characteristic_name(table_name, characteristic_id, user_language):
            """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ ID –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
            try:
                if characteristic_id and characteristic_id != 'unknown':
                    result = supabase.table(table_name).select('*').eq('id', characteristic_id).execute()
                    if result.data:
                        raw_value = result.data[0].get('listing_type', '')
                        return translate_to_language_full_report(raw_value, user_language)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ {table_name}: {e}")
            return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
        if additional_data.get('age') and additional_data.get('age') != 'unknown':
            try:
                age_result = supabase.table('age_data').select('*').eq('id', additional_data['age']).execute()
                if age_result.data:
                    age_info = age_result.data[0]
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    age_value = translate_to_language_full_report(age_info.get('listing_type', ''), user_language)
                    additional_analysis['age'] = {
                        'range': age_value,
                        'impact': '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π' if age_value in ['0-5 –ª–µ—Ç', '5-10 –ª–µ—Ç', '0-5 years', '5-10 years', '0-5 Jahre', '5-10 Jahre', '0-5 ans', '5-10 ans'] else '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
                        'maintenance_cost': '–ù–∏–∑–∫–∏–µ' if age_value in ['0-5 –ª–µ—Ç', '0-5 years', '0-5 Jahre', '0-5 ans'] else '–°—Ä–µ–¥–Ω–∏–µ'
                    }
                    logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞: {age_value}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
        
        # –ê–Ω–∞–ª–∏–∑ —ç—Ç–∞–∂–∞
        if additional_data.get('floor') and additional_data.get('floor') != 'unknown':
            try:
                floor_result = supabase.table('floor_segment_data').select('*').eq('id', additional_data['floor']).execute()
                if floor_result.data:
                    floor_info = floor_result.data[0]
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    floor_value = translate_to_language_full_report(floor_info.get('listing_type', ''), user_language)
                    additional_analysis['floor'] = {
                        'type': floor_value,
                        'accessibility': '–í—ã—Å–æ–∫–∞—è' if floor_value in ['–í—Ö–æ–¥–Ω–æ–π —ç—Ç–∞–∂', '1 —ç—Ç–∞–∂', '2 —ç—Ç–∞–∂', 'Ground floor', '1st floor', '2nd floor', 'Erdgeschoss', '1. Etage', '2. Etage', 'Rez-de-chauss√©e', '1er √©tage', '2e √©tage'] else '–°—Ä–µ–¥–Ω—è—è',
                        'view': '–•–æ—Ä–æ—à–∏–π' if floor_value in ['–í–µ—Ä—Ö–Ω–∏–µ —ç—Ç–∞–∂–∏', '–ü–µ–Ω—Ç—Ö–∞—É—Å', 'Top floor', 'Penthouse', 'Obergeschoss', 'Penthouse', 'Dernier √©tage', 'Penthouse'] else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'
                    }
                    logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —ç—Ç–∞–∂–∞: {floor_value}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–∞–∂–∞: {e}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–æ–ø–ª–µ–Ω–∏—è
        if additional_data.get('heating') and additional_data.get('heating') != 'unknown':
            try:
                heating_result = supabase.table('heating_data').select('*').eq('id', additional_data['heating']).execute()
                if heating_result.data:
                    heating_info = heating_result.data[0]
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    heating_value = translate_to_language_full_report(heating_info.get('listing_type', ''), user_language)
                    additional_analysis['heating'] = {
                        'type': heating_value,
                        'efficiency': '–í—ã—Å–æ–∫–∞—è' if heating_value in ['–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –≥–∞–∑–æ–≤–æ–µ', 'Central', 'Individual gas', 'Zentral', 'Individuell Gas', 'Central', 'Gaz individuel'] else '–°—Ä–µ–¥–Ω—è—è',
                        'cost': '–ù–∏–∑–∫–∏–µ' if heating_value in ['–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ', 'Central', 'Zentral', 'Central'] else '–°—Ä–µ–¥–Ω–∏–µ'
                    }
                    logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –æ—Ç–æ–ø–ª–µ–Ω–∏—è: {heating_value}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è: {e}")
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º ROI –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if additional_analysis:
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
            if additional_analysis.get('age'):
                if additional_analysis['age']['impact'] == '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π':
                    short_term_income = int(short_term_income * 1.1)  # +10%
                    long_term_income = int(long_term_income * 1.05)   # +5%
                    logger.info("‚úÖ ROI —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω: –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∞–∂–∞
            if additional_analysis.get('floor'):
                if additional_analysis['floor']['view'] == '–•–æ—Ä–æ—à–∏–π':
                    short_term_income = int(short_term_income * 1.15)  # +15%
                    long_term_income = int(long_term_income * 1.08)    # +8%
                    logger.info("‚úÖ ROI —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω: —ç—Ç–∞–∂ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–æ–ø–ª–µ–Ω–∏—è
            if additional_analysis.get('heating'):
                if additional_analysis['heating']['efficiency'] == '–í—ã—Å–æ–∫–∞—è':
                    short_term_income = int(short_term_income * 1.05)  # +5%
                    long_term_income = int(long_term_income * 1.03)    # +3%
                    logger.info("‚úÖ ROI —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω: –æ—Ç–æ–ø–ª–µ–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
        
        # --- –ü–û–õ–£–ß–ê–ï–ú –î–ê–ù–ù–´–ï –û –¶–ï–ù–ê–• –ù–ê –†–´–ù–ö–ï ---
        market_price_data = {}
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
            if lat and lng:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –Ω–∞ —Ä—ã–Ω–∫–µ
                # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã
                market_price_data = {
                    'min_price_per_sqm': avg_sqm * 0.7,  # -30% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π
                    'avg_price_per_sqm': avg_sqm,
                    'max_price_per_sqm': avg_sqm * 1.3,  # +30% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π
                    'price_range': f'‚Ç¨{avg_sqm * 0.7:.0f} - ‚Ç¨{avg_sqm * 1.3:.0f} –∑–∞ –º¬≤',
                    'market_position': '–°—Ä–µ–¥–Ω–∏–π' if 400 <= avg_sqm <= 600 else '–ù–∏–∑–∫–∏–π' if avg_sqm < 400 else '–í—ã—Å–æ–∫–∏–π'
                }
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–∞ —Ä—ã–Ω–∫–µ –ø–æ–ª—É—á–µ–Ω—ã: {market_price_data['price_range']}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –Ω–∞ —Ä—ã–Ω–∫–µ: {e}")
            market_price_data = {
                'min_price_per_sqm': avg_sqm * 0.7,
                'avg_price_per_sqm': avg_sqm,
                'max_price_per_sqm': avg_sqm * 1.3,
                'price_range': f'‚Ç¨{avg_sqm * 0.7:.0f} - ‚Ç¨{avg_sqm * 1.3:.0f} –∑–∞ –º¬≤',
                'market_position': '–°—Ä–µ–¥–Ω–∏–π'
            }
        
        # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ ---
        full_report_data = {
            # 1. –ü–†–û–°–¢–û–ô –û–¢–ß–ï–¢ (–±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
            'simple_report': {
                'address': address,
                'bedrooms': bedrooms,
                'purchase_price': price,
                'area': area if area and area != 'unknown' else '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                'avg_price_per_sqm': avg_sqm,
                'location_summary': f'–õ–æ–∫–∞—Ü–∏—è: {address}',
                'property_summary': f'–û–±—ä–µ–∫—Ç: {bedrooms} —Å–ø–∞–ª–µ–Ω, {area if area and area != "unknown" else "–ø–ª–æ—â–∞–¥—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞"} –º¬≤, —Ü–µ–Ω–∞ ‚Ç¨{price:,.0f}',
                'price_per_sqm': f'–¶–µ–Ω–∞ –∑–∞ –º¬≤: ‚Ç¨{avg_sqm:.0f}'
            },
            
            # 2. –î–ï–¢–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ü–û –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê–ú
            'detailed_characteristics': {
                'age': {
                    'id': additional_data.get('age'),
                    'name': additional_analysis.get('age', {}).get('range', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                    'impact': additional_analysis.get('age', {}).get('impact', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'),
                    'maintenance_cost': additional_analysis.get('age', {}).get('maintenance_cost', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
                },
                'floor': {
                    'id': additional_data.get('floor'),
                    'name': additional_analysis.get('floor', {}).get('type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                    'accessibility': additional_analysis.get('floor', {}).get('accessibility', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'),
                    'view': additional_analysis.get('floor', {}).get('view', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
                },
                'heating': {
                    'id': additional_data.get('heating'),
                    'name': additional_analysis.get('heating', {}).get('type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                    'efficiency': additional_analysis.get('heating', {}).get('efficiency', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'),
                    'cost': additional_analysis.get('heating', {}).get('cost', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
                },
                'summary': '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±—ä–µ–∫—Ç–∞'
            },
            
            # 2.1. –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø –¶–ï–ù
            'market_comparison': market_comparison_data,
            'currency_info': {
                'is_turkish': is_turkish,
                'currency_rate': currency_rate,
                'conversion_applied': is_turkish and currency_rate is not None
            },
            
            # 3. –ê–ù–ê–õ–ò–ó –¶–ï–ù –ù–ê –†–´–ù–ö–ï
            'market_price_analysis': {
                'current_price': price,
                'price_per_sqm': avg_sqm,
                'min_price_per_sqm': market_price_data.get('min_price_per_sqm', avg_sqm * 0.7),
                'avg_price_per_sqm': market_price_data.get('avg_price_per_sqm', avg_sqm),
                'max_price_per_sqm': market_price_data.get('max_price_per_sqm', avg_sqm * 1.3),
                'price_range': market_price_data.get('price_range', f'‚Ç¨{avg_sqm * 0.7:.0f} - ‚Ç¨{avg_sqm * 1.3:.0f} –∑–∞ –º¬≤'),
                'price_level': market_price_data.get('market_position', '–°—Ä–µ–¥–Ω–∏–π'),
                'market_position': f'–¶–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ {avg_sqm/500*100:.0f}% –æ—Ç —Å—Ä–µ–¥–Ω–µ—Ä—ã–Ω–æ—á–Ω–æ–π',
                'price_recommendation': '–¶–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä—ã–Ω–∫—É' if 400 <= avg_sqm <= 600 else '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ—Ä–≥' if avg_sqm > 600 else '–•–æ—Ä–æ—à–∞—è —Ü–µ–Ω–∞',
                'price_comparison': {
                    'min': f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ: ‚Ç¨{market_price_data.get("min_price_per_sqm", avg_sqm * 0.7):.0f}/–º¬≤',
                    'avg': f'–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ: ‚Ç¨{market_price_data.get("avg_price_per_sqm", avg_sqm):.0f}/–º¬≤',
                    'max': f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ: ‚Ç¨{market_price_data.get("max_price_per_sqm", avg_sqm * 1.3):.0f}/–º¬≤'
                }
            },
            
            # 4. –ê–ù–ê–õ–ò–ó –ê–†–ï–ù–î–´
            'rental_analysis': {
                'max_monthly_rent': short_term_income,
                'max_annual_rent': long_term_income,
                'rental_yield': (short_term_income * 12) / price * 100,
                'rental_recommendation': f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã: ‚Ç¨{short_term_income:,.0f}/–º–µ—Å—è—Ü',
                'annual_yield': f'–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {(short_term_income * 12) / price * 100:.1f}%'
            },
            
            # 5. ROI –ê–ù–ê–õ–ò–ó (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª)
            'roi': {
                'short_term': {
                    'monthly_income': short_term_income,
                    'net_income': short_term_net,
                    'five_year_income': short_term_income * 12 * 5,
                    'final_value': price * (1 + five_year_growth),
                    'roi': short_term_roi
                },
                'long_term': {
                    'annual_income': long_term_income,
                    'net_income': long_term_net,
                    'five_year_income': long_term_income * 5,
                    'final_value': price * (1 + five_year_growth),
                    'roi': long_term_roi
                },
                'no_rent': {
                    'final_value': price * (1 + five_year_growth),
                    'roi': no_rent_roi
                },
                'price_growth': price_growth
            },
            
            # 6. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
            'alternatives': [
                {'name': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –¥–µ–ø–æ–∑–∏—Ç', 'yield': alt_deposit, 'source': 'TCMB API'},
                {'name': '–û–±–ª–∏–≥–∞—Ü–∏–∏ –¢—É—Ä—Ü–∏–∏', 'yield': alt_bonds, 'source': 'Investing.com API'},
                {'name': '–ê–∫—Ü–∏–∏ (BIST30)', 'yield': alt_stocks, 'source': 'Alpha Vantage API'},
                {'name': 'REITs (—Ñ–æ–Ω–¥—ã)', 'yield': alt_reits, 'source': 'Financial Modeling Prep'},
                {'name': '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', 'yield': short_term_roi / 100, 'source': '–í–∞—à –æ–±—ä–µ–∫—Ç'}
            ],
            'macro': {
                'inflation': inflation,
                'eur_try': eur_try,
                'refi_rate': refi_rate,
                'gdp_growth': gdp_growth
            },
            'economic_charts': chart_data,
            'taxes': taxes,
            'risks': risks,
            'liquidity': liquidity,
            'district': district,
            'yield': (short_term_income * 12) / price,
            'price_index': 1 + price_growth,
            'mortgage_rate': refi_rate / 100,
            'global_house_price_index': 1 + (gdp_growth / 100),
            'additional_analysis': additional_analysis,
            'summary': f'–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ IMF –∏ –∞–Ω–∞–ª–∏–∑–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±—ä–µ–∫—Ç–∞. ROI: {short_term_roi:.1f}% –∑–∞ 5 –ª–µ—Ç.'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        user_result = supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
        user_id = user_result.data[0]['id'] if user_result.data else telegram_id
        
        created_at = datetime.now().isoformat()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —á–∏—Å–ª–∞, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        try:
            latitude = float(lat) if lat and lat != "" else None
            longitude = float(lng) if lng and lng != "" else None
        except (ValueError, TypeError):
            latitude = None
            longitude = None
        
        report_data = {
            'user_id': user_id,
            'report_type': 'full',
            'title': f'–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: {address}',
            'description': f'–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–¥—Ä–µ—Å—É {address}, {bedrooms} —Å–ø–∞–ª–µ–Ω, {area if area and area != "unknown" else "–ø–ª–æ—â–∞–¥—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞"} –º¬≤, —Ü–µ–Ω–∞ {price}',
            'parameters': {
                'address': address,
                'bedrooms': bedrooms,
                'price': price,
                'area': area,
                'lat': latitude,
                'lng': longitude
            },
            'address': address,
            'latitude': latitude,
            'longitude': longitude,
            'bedrooms': bedrooms,
            'price': price,
            'area': area,
            'created_at': created_at,
            'full_report': full_report_data
        }
        result = supabase.table('user_reports').insert(report_data).execute()
        report_id = result.data[0]['id'] if hasattr(result, 'data') and result.data else None
        return jsonify({
            'success': True, 
            'full_report': full_report_data, 
            'created_at': created_at, 
            'from_cache': False,
            'report_id': report_id
        })
    except Exception as e:
        logger.error(f"Error in full_report: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/user_reports', methods=['POST'])
def api_user_reports():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    if not telegram_id:
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        user_result = safe_db_operation(
            lambda: supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
        )
        if user_result is None or not user_result.data:
            return jsonify({'error': 'User not found'}), 404
        user_id = user_result.data[0]['id']
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—É–¥–∞–ª–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (deleted_at IS NULL)
        result = safe_db_operation(
            lambda: supabase.table('user_reports').select('*').eq('user_id', user_id).is_('deleted_at', 'null').order('created_at', desc=True).execute()
        )
        if result is None:
            return jsonify({'error': 'Database connection error'}), 500
        reports = result.data if hasattr(result, 'data') else result
        return jsonify({'success': True, 'reports': reports})
    except Exception as e:
        logger.error(f"Error fetching user reports: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/get_additional_data_options', methods=['POST'])
def api_get_additional_data_options():
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç—á–µ—Ç–∞ (–≤–æ–∑—Ä–∞—Å—Ç, —ç—Ç–∞–∂, –æ—Ç–æ–ø–ª–µ–Ω–∏–µ)"""
    try:
        data = request.json or {}
        location_codes = data.get('location_codes', {})
        telegram_id = data.get('telegram_id')
        
        if not location_codes:
            return jsonify({'error': 'Location codes required'}), 400
        
        logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {location_codes}")
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_language = 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        if telegram_id:
            try:
                user_result = supabase.table('users').select('language').eq('telegram_id', telegram_id).execute()
                if user_result.data:
                    user_language = user_result.data[0].get('language', 'ru')
                    logger.info(f"üåç –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_language}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        def translate_to_language(text, target_language):
            """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç—É—Ä–µ—Ü–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫"""
            translations = {
                'ru': {
                    # –í–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞
                    '0-5 yƒ±l': '0-5 –ª–µ—Ç',
                    '5-10 yƒ±l': '5-10 –ª–µ—Ç', 
                    '10-20 yƒ±l': '10-20 –ª–µ—Ç',
                    '20+ yƒ±l': '20+ –ª–µ—Ç',
                    'Yeni': '–ù–æ–≤—ã–π',
                    'Eski': '–°—Ç–∞—Ä—ã–π',
                    '0-4': '0-4 –≥–æ–¥–∞',
                    '11-15': '11-15 –ª–µ—Ç',
                    '16 ve √ºzeri': '16 –∏ –±–æ–ª–µ–µ',
                    '0': '0 –ª–µ—Ç',
                    
                    # –≠—Ç–∞–∂
                    'Zemin kat': '–í—Ö–æ–¥–Ω–æ–π —ç—Ç–∞–∂',
                    '1. kat': '1 —ç—Ç–∞–∂',
                    '2. kat': '2 —ç—Ç–∞–∂',
                    '3. kat': '3 —ç—Ç–∞–∂',
                    '4. kat': '4 —ç—Ç–∞–∂',
                    '5. kat': '5 —ç—Ç–∞–∂',
                    '6-10 kat': '6-10 —ç—Ç–∞–∂',
                    '11-20 kat': '11-20 —ç—Ç–∞–∂',
                    'Penthouse': '–ü–µ–Ω—Ç—Ö–∞—É—Å',
                    '√úst kat': '–í–µ—Ä—Ö–Ω–∏–π —ç—Ç–∞–∂',
                    'Giri≈ü Altƒ±': '–ü–æ–¥–≤–∞–ª',
                    'Giri≈ü': '–í—Ö–æ–¥–Ω–æ–π —ç—Ç–∞–∂',
                    'Giri≈ü √úst√º': '–ú–µ–∂–¥—É—ç—Ç–∞–∂–Ω—ã–π',
                    'Ara Kat': '–°—Ä–µ–¥–Ω–∏–π —ç—Ç–∞–∂',
                    'Ara √úst√º': '–í–µ—Ä—Ö–Ω–∏–π —Å—Ä–µ–¥–Ω–∏–π',
                    'En √úst': '–°–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π',
                    'M√ºstakil': '–û—Ç–¥–µ–ª—å–Ω—ã–π',
                    
                    # –û—Ç–æ–ø–ª–µ–Ω–∏–µ
                    'Merkezi': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ',
                    'Doƒüalgaz': '–ì–∞–∑–æ–≤–æ–µ',
                    'Kombi': '–ö–æ—Ç–µ–ª',
                    'Elektrik': '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ',
                    'Yok': '–ë–µ–∑ –æ—Ç–æ–ø–ª–µ–Ω–∏—è',
                    'Klima': '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä',
                    
                    # –û–±—â–∏–µ
                    'Belirtilmemi≈ü': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    'Bilinmiyor': '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ'
                },
                'en': {
                    # Age
                    '0-5 yƒ±l': '0-5 years',
                    '5-10 yƒ±l': '5-10 years', 
                    '10-20 yƒ±l': '10-20 years',
                    '20+ yƒ±l': '20+ years',
                    'Yeni': 'New',
                    'Eski': 'Old',
                    '0-4': '0-4 years',
                    '11-15': '11-15 years',
                    '16 ve √ºzeri': '16 and over',
                    '0': '0 years',
                    
                    # Floor
                    'Zemin kat': 'Ground floor',
                    '1. kat': '1st floor',
                    '2. kat': '2nd floor',
                    '3. kat': '3rd floor',
                    '4. kat': '4th floor',
                    '5. kat': '5th floor',
                    '6-10 kat': '6-10 floors',
                    '11-20 kat': '11-20 floors',
                    'Penthouse': 'Penthouse',
                    '√úst kat': 'Top floor',
                    'Giri≈ü Altƒ±': 'Basement',
                    'Giri≈ü': 'Ground floor',
                    'Giri≈ü √úst√º': 'Mezzanine',
                    'Ara Kat': 'Middle floor',
                    'Ara √úst√º': 'Upper middle',
                    'En √úst': 'Topmost',
                    'M√ºstakil': 'Detached',
                    
                    # Heating
                    'Merkezi': 'Central',
                    'Doƒüalgaz': 'Gas',
                    'Kombi': 'Boiler',
                    'Elektrik': 'Electric',
                    'Yok': 'None',
                    'Klima': 'Air conditioning',
                    
                    # General
                    'Belirtilmemi≈ü': 'Not specified',
                    'Bilinmiyor': 'Unknown'
                },
                'de': {
                    # Alter
                    '0-5 yƒ±l': '0-5 Jahre',
                    '5-10 yƒ±l': '5-10 Jahre', 
                    '10-20 yƒ±l': '10-20 Jahre',
                    '20+ yƒ±l': '20+ Jahre',
                    'Yeni': 'Neu',
                    'Eski': 'Alt',
                    '0-4': '0-4 Jahre',
                    '11-15': '11-15 Jahre',
                    '16 ve √ºzeri': '16 und mehr',
                    '0': '0 Jahre',
                    
                    # Etage
                    'Zemin kat': 'Erdgeschoss',
                    '1. kat': '1. Etage',
                    '2. kat': '2. Etage',
                    '3. kat': '3. Etage',
                    '4. kat': '4. Etage',
                    '5. kat': '5. Etage',
                    '6-10 kat': '6-10 Etagen',
                    '11-20 kat': '11-20 Etagen',
                    'Penthouse': 'Penthouse',
                    '√úst kat': 'Obergeschoss',
                    'Giri≈ü Altƒ±': 'Keller',
                    'Giri≈ü': 'Erdgeschoss',
                    'Giri≈ü √úst√º': 'Zwischengeschoss',
                    'Ara Kat': 'Mittelgeschoss',
                    'Ara √úst√º': 'Oberes Mittelgeschoss',
                    'En √úst': 'Oberstes',
                    'M√ºstakil': 'Frei stehend',
                    
                    # Heizung
                    'Merkezi': 'Zentral',
                    'Doƒüalgaz': 'Gas',
                    'Kombi': 'Kessel',
                    'Elektrik': 'Elektrisch',
                    'Yok': 'Keine',
                    'Klima': 'Klimaanlage',
                    
                    # Allgemein
                    'Belirtilmemi≈ü': 'Nicht angegeben',
                    'Bilinmiyor': 'Unbekannt'
                },
                'fr': {
                    # √Çge
                    '0-5 yƒ±l': '0-5 ans',
                    '5-10 yƒ±l': '5-10 ans', 
                    '10-20 yƒ±l': '10-20 ans',
                    '20+ yƒ±l': '20+ ans',
                    'Yeni': 'Nouveau',
                    'Eski': 'Ancien',
                    '0-4': '0-4 ans',
                    '11-15': '11-15 ans',
                    '16 ve √ºzeri': '16 et plus',
                    '0': '0 ans',
                    
                    # √âtage
                    'Zemin kat': 'Rez-de-chauss√©e',
                    '1. kat': '1er √©tage',
                    '2. kat': '2e √©tage',
                    '3. kat': '3e √©tage',
                    '4. kat': '4e √©tage',
                    '5. kat': '5e √©tage',
                    '6-10 kat': '6-10 √©tages',
                    '11-20 kat': '11-20 √©tages',
                    'Penthouse': 'Penthouse',
                    '√úst kat': 'Dernier √©tage',
                    'Giri≈ü Altƒ±': 'Sous-sol',
                    'Giri≈ü': 'Rez-de-chauss√©e',
                    'Giri≈ü √úst√º': 'Entresol',
                    'Ara Kat': '√âtage interm√©diaire',
                    'Ara √úst√º': '√âtage sup√©rieur interm√©diaire',
                    'En √úst': 'Plus haut',
                    'M√ºstakil': 'Ind√©pendant',
                    
                    # Chauffage
                    'Merkezi': 'Central',
                    'Doƒüalgaz': 'Gaz',
                    'Kombi': 'Chaudi√®re',
                    'Elektrik': '√âlectrique',
                    'Yok': 'Aucun',
                    'Klima': 'Climatisation',
                    
                    # G√©n√©ral
                    'Belirtilmemi≈ü': 'Non sp√©cifi√©',
                    'Bilinmiyor': 'Inconnu'
                }
            }
            
            target_translations = translations.get(target_language, translations['en'])
            return target_translations.get(text, text)
        
        def remove_duplicates(options_list):
            """–£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ—Å—Ç–∞–≤–ª—è—è –ø–µ—Ä–≤—ã–π –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã–π"""
            seen_names = set()
            unique_options = []
            
            for option in options_list:
                name = option.get('name', '')
                if name not in seen_names:
                    seen_names.add(name)
                    unique_options.append(option)
            
            return unique_options
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
        age_options = []
        try:
            age_result = supabase.table('age_data').select('*').eq('country_id', location_codes.get('country_id')).eq('city_id', location_codes.get('city_id')).eq('county_id', location_codes.get('county_id')).eq('district_id', location_codes.get('district_id')).execute()
            if age_result.data:
                age_options = [{'id': item.get('id'), 'name': translate_to_language(item.get('listing_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), user_language)} for item in age_result.data]
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –æ–ø—Ü–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞: {len(age_options)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ —ç—Ç–∞–∂–µ–π
        floor_options = []
        try:
            floor_result = supabase.table('floor_segment_data').select('*').eq('country_id', location_codes.get('country_id')).eq('city_id', location_codes.get('city_id')).eq('county_id', location_codes.get('county_id')).eq('district_id', location_codes.get('district_id')).execute()
            if floor_result.data:
                floor_options = [{'id': item.get('id'), 'name': translate_to_language(item.get('listing_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), user_language)} for item in floor_result.data]
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –æ–ø—Ü–∏–∏ —ç—Ç–∞–∂–µ–π: {len(floor_options)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π —ç—Ç–∞–∂–µ–π: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –æ—Ç–æ–ø–ª–µ–Ω–∏—è
        heating_options = []
        try:
            heating_result = supabase.table('heating_data').select('*').eq('country_id', location_codes.get('country_id')).eq('city_id', location_codes.get('city_id')).eq('county_id', location_codes.get('county_id')).eq('district_id', location_codes.get('district_id')).execute()
            if heating_result.data:
                heating_options = [{'id': item.get('id'), 'name': translate_to_language(item.get('listing_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), user_language)} for item in heating_result.data]
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –æ–ø—Ü–∏–∏ –æ—Ç–æ–ø–ª–µ–Ω–∏—è: {len(heating_options)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π –æ—Ç–æ–ø–ª–µ–Ω–∏—è: {e}")
        
        # –ï—Å–ª–∏ –æ–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –ª–æ–∫–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏
        if not age_options:
            logger.info("‚ö†Ô∏è –û–ø—Ü–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –ª–æ–∫–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ")
            base_age_options = {
                'ru': [
                    {'id': 'new', 'name': '0-5 –ª–µ—Ç'},
                    {'id': 'recent', 'name': '5-10 –ª–µ—Ç'},
                    {'id': 'modern', 'name': '10-20 –ª–µ—Ç'},
                    {'id': 'old', 'name': '20+ –ª–µ—Ç'}
                ],
                'en': [
                    {'id': 'new', 'name': '0-5 years'},
                    {'id': 'recent', 'name': '5-10 years'},
                    {'id': 'modern', 'name': '10-20 years'},
                    {'id': 'old', 'name': '20+ years'}
                ],
                'de': [
                    {'id': 'new', 'name': '0-5 Jahre'},
                    {'id': 'recent', 'name': '5-10 Jahre'},
                    {'id': 'modern', 'name': '10-20 Jahre'},
                    {'id': 'old', 'name': '20+ Jahre'}
                ],
                'fr': [
                    {'id': 'new', 'name': '0-5 ans'},
                    {'id': 'recent', 'name': '5-10 ans'},
                    {'id': 'modern', 'name': '10-20 ans'},
                    {'id': 'old', 'name': '20+ ans'}
                ]
            }
            age_options = base_age_options.get(user_language, base_age_options['en'])
        
        if not floor_options:
            logger.info("‚ö†Ô∏è –û–ø—Ü–∏–∏ —ç—Ç–∞–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –ª–æ–∫–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ")
            base_floor_options = {
                'ru': [
                    {'id': 'ground', 'name': '–í—Ö–æ–¥–Ω–æ–π —ç—Ç–∞–∂'},
                    {'id': 'low', 'name': '2-5 —ç—Ç–∞–∂'},
                    {'id': 'middle', 'name': '6-10 —ç—Ç–∞–∂'},
                    {'id': 'high', 'name': '11-20 —ç—Ç–∞–∂'},
                    {'id': 'penthouse', 'name': '–ü–µ–Ω—Ç—Ö–∞—É—Å'}
                ],
                'en': [
                    {'id': 'ground', 'name': 'Ground floor'},
                    {'id': 'low', 'name': '2-5 floors'},
                    {'id': 'middle', 'name': '6-10 floors'},
                    {'id': 'high', 'name': '11-20 floors'},
                    {'id': 'penthouse', 'name': 'Penthouse'}
                ],
                'de': [
                    {'id': 'ground', 'name': 'Erdgeschoss'},
                    {'id': 'low', 'name': '2-5 Etagen'},
                    {'id': 'middle', 'name': '6-10 Etagen'},
                    {'id': 'high', 'name': '11-20 Etagen'},
                    {'id': 'penthouse', 'name': 'Penthouse'}
                ],
                'fr': [
                    {'id': 'ground', 'name': 'Rez-de-chauss√©e'},
                    {'id': 'low', 'name': '2-5 √©tages'},
                    {'id': 'middle', 'name': '6-10 √©tages'},
                    {'id': 'high', 'name': '11-20 √©tages'},
                    {'id': 'penthouse', 'name': 'Penthouse'}
                ]
            }
            floor_options = base_floor_options.get(user_language, base_floor_options['en'])
        
        if not heating_options:
            logger.info("‚ö†Ô∏è –û–ø—Ü–∏–∏ –æ—Ç–æ–ø–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –ª–æ–∫–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ")
            base_heating_options = {
                'ru': [
                    {'id': 'central', 'name': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ'},
                    {'id': 'gas', 'name': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –≥–∞–∑–æ–≤–æ–µ'},
                    {'id': 'electric', 'name': '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ'},
                    {'id': 'none', 'name': '–ë–µ–∑ –æ—Ç–æ–ø–ª–µ–Ω–∏—è'}
                ],
                'en': [
                    {'id': 'central', 'name': 'Central'},
                    {'id': 'gas', 'name': 'Individual gas'},
                    {'id': 'electric', 'name': 'Electric'},
                    {'id': 'none', 'name': 'None'}
                ],
                'de': [
                    {'id': 'central', 'name': 'Zentral'},
                    {'id': 'gas', 'name': 'Individuell Gas'},
                    {'id': 'electric', 'name': 'Elektrisch'},
                    {'id': 'none', 'name': 'Keine'}
                ],
                'fr': [
                    {'id': 'central', 'name': 'Central'},
                    {'id': 'gas', 'name': 'Gaz individuel'},
                    {'id': 'electric', 'name': '√âlectrique'},
                    {'id': 'none', 'name': 'Aucun'}
                ]
            }
            heating_options = base_heating_options.get(user_language, base_heating_options['en'])
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        age_options = remove_duplicates(age_options)
        floor_options = remove_duplicates(floor_options)
        heating_options = remove_duplicates(heating_options)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ" –∫ –∫–∞–∂–¥–æ–º—É —Å–ø–∏—Å–∫—É
        unknown_options = {
            'ru': '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ',
            'en': 'Unknown',
            'de': 'Unbekannt',
            'fr': 'Inconnu'
        }
        unknown_name = unknown_options.get(user_language, 'Unknown')
        
        age_options.append({'id': 'unknown', 'name': unknown_name})
        floor_options.append({'id': 'unknown', 'name': unknown_name})
        heating_options.append({'id': 'unknown', 'name': unknown_name})
        
        logger.info(f"‚úÖ –û–ø—Ü–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: –≤–æ–∑—Ä–∞—Å—Ç({len(age_options)}), —ç—Ç–∞–∂({len(floor_options)}), –æ—Ç–æ–ø–ª–µ–Ω–∏–µ({len(heating_options)})")
        
        return jsonify({
            'success': True,
            'age_options': age_options,
            'floor_options': floor_options,
            'heating_options': heating_options
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/delete_user_report', methods=['POST'])
@app.route('/api/delete_report', methods=['POST'])
def api_delete_user_report():
    """Soft delete –æ—Ç—á–µ—Ç–∞: –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç deleted_at"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    report_id = data.get('report_id')
    if not telegram_id or not report_id:
        return jsonify({'error': 'Missing required data'}), 400
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id
        user_result = safe_db_operation(
            lambda: supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
        )
        if user_result is None or not user_result.data:
            logger.error(f"User with telegram_id {telegram_id} not found for report deletion")
            return jsonify({'error': 'User not found'}), 404
        user_id = user_result.data[0]['id']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –Ω–µ —É–¥–∞–ª—ë–Ω
        report_result = safe_db_operation(
            lambda: supabase.table('user_reports').select('id').eq('id', report_id).eq('user_id', user_id).is_('deleted_at', 'null').execute()
        )
        if report_result is None or not report_result.data:
            logger.error(f"Report {report_id} not found or not owned by user_id {user_id} or already deleted")
            return jsonify({'error': 'Report not found or not owned by user'}), 404
        # Soft delete: –≤—ã—Å—Ç–∞–≤–ª—è–µ–º deleted_at
        now = datetime.utcnow().isoformat()
        delete_result = safe_db_operation(
            lambda: supabase.table('user_reports').update({'deleted_at': now}).eq('id', report_id).execute()
        )
        if delete_result is None:
            return jsonify({'error': 'Database connection error'}), 500
        return jsonify({'success': True})
    except Exception as e:
        logger.error(f"Error deleting user report: {e}")
        return jsonify({'error': f'Internal error: {str(e)}'}), 500

@app.route('/api/save_object', methods=['POST'])
def api_save_object():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    object_data = data.get('object_data')
    
    if not telegram_id or not object_data:
        return jsonify({'error': 'Missing required data'}), 400
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        user_result = supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
        user_id = user_result.data[0]['id'] if user_result.data else telegram_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        saved_object = {
            'user_id': user_id,
            'object_data': object_data,
            'saved_at': datetime.now().isoformat()
        }
        
        supabase.table('saved_objects').insert(saved_object).execute()
        
        return jsonify({'success': True})
        
    except Exception as e:
        logger.error(f"Error saving object: {e}")
        return jsonify({'error': 'Internal error'}), 500

def send_pdf_to_telegram(pdf_path, telegram_id, bot_token=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF-—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    import requests
    import os
    logger = logging.getLogger(__name__)
    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω
    bot_token = '7215676549:AAFS86JbRCqwzTKQG-dF96JX-C1aWNvBoLo'
    send_url = f'https://api.telegram.org/bot{bot_token}/sendDocument'
    try:
        with open(pdf_path, 'rb') as pdf_file:
            files = {'document': pdf_file}
            data_send = {'chat_id': telegram_id}
            resp = requests.post(send_url, data=data_send, files=files)
            if resp.status_code == 200 and resp.json().get('ok'):
                return 'sent'
            else:
                logger.error(f"Telegram sendDocument error: {resp.text}")
                return f'error: {resp.text}'
    except Exception as e:
        logger.error(f"Error sending PDF via Telegram bot: {e}")
        return f'error: {e}'

@app.route('/api/generate_pdf_report', methods=['POST'])
def api_generate_pdf_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode (DejaVu) –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞"""
    data = request.json or {}
    logger.info(f"PDF request data: {data}")
    report = data.get('report')
    profile = data.get('profile') or {}
    client_name = data.get('client_name')
    report_id = data.get('report_id')
    telegram_id = data.get('telegram_id')
    if not report_id:
        logger.error(f"PDF generation error: report_id not provided. Incoming data: {data}")
        return jsonify({'error': 'report_id required for PDF generation', 'details': data}), 400
    try:
        pdf = FPDF()
        pdf.add_page()
        # –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç—ã DejaVu
        pdf.add_font('DejaVu', '', 'fonts/DejaVuSans.ttf')
        pdf.add_font('DejaVu', 'B', 'fonts/DejaVuSans-Bold.ttf')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–≤–µ—Ä—Ö—É)
        try:
            pdf.image('logo-sqv.png', x=85, y=10, w=40)  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø
            pdf.ln(35)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –ª–æ–≥–æ—Ç–∏–ø–∞
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}")
            pdf.ln(35)  # –û—Ç—Å—Ç—É–ø –¥–∞–∂–µ –µ—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        
        pdf.set_font('DejaVu', 'B', 16)
        if client_name:
            pdf.cell(0, 10, f'–ö–ª–∏–µ–Ω—Ç: {client_name}', new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C')
        pdf.ln(2)
        pdf.cell(0, 10, '–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C')
        pdf.ln(10)
        if report.get('object'):
            pdf.set_font('DejaVu', 'B', 12)
            pdf.cell(0, 10, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ:', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 10)
            obj = report['object']
            pdf.cell(0, 8, f'–ê–¥—Ä–µ—Å: {obj.get("address", "–ù–µ —É–∫–∞–∑–∞–Ω")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f'–°–ø–∞–ª–µ–Ω: {obj.get("bedrooms", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f'–¶–µ–Ω–∞: ‚Ç¨{obj.get("purchase_price", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ü–µ—á–∞—Ç–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –æ—Ç—á—ë—Ç–∞ (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏)
        # ROI –∞–Ω–∞–ª–∏–∑
        if 'roi' in report:
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(200, 10, text="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (ROI):", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            pdf.cell(200, 8, text=f"–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞: ROI {report['roi']['short_term']['roi']}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 8, text=f"–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞: ROI {report['roi']['long_term']['roi']}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 8, text=f"–ë–µ–∑ –∞—Ä–µ–Ω–¥—ã: ROI {report['roi']['no_rent']['roi']}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –±–ª–æ–∫)
        if 'macro' in report or 'economic_charts' in report:
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(200, 10, text="–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            
            # –ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –∏–∑ macro
        if 'macro' in report:
            pdf.cell(200, 8, text=f"–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {report['macro']['refi_rate']}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ economic_charts
            if 'economic_charts' in report:
                economic_charts = report['economic_charts']
                country_name = economic_charts.get('country_name', 'Unknown')
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                latest = economic_charts.get('latest', {})
                if latest.get('gdp'):
                    gdp_data = latest['gdp']
                    pdf.cell(200, 8, text=f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–æ—Å—Ç –í–í–ü ({gdp_data['year']}): {gdp_data['value']}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                if latest.get('inflation'):
                    inflation_data = latest['inflation']
                    pdf.cell(200, 8, text=f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–Ω—Ñ–ª—è—Ü–∏—è ({inflation_data['year']}): {inflation_data['value']}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä–µ–Ω–¥—ã
                trends = economic_charts.get('trends', {})
                if trends.get('gdp_trend') is not None:
                    gdp_trend = trends['gdp_trend'] * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    trend_text = f"–¢—Ä–µ–Ω–¥ —Ä–æ—Å—Ç–∞ –í–í–ü: {gdp_trend:.1f}%"
                    pdf.cell(200, 8, text=trend_text, new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                if trends.get('inflation_trend') is not None:
                    inflation_trend = trends['inflation_trend'] * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    trend_text = f"–¢—Ä–µ–Ω–¥ –∏–Ω—Ñ–ª—è—Ü–∏–∏: {inflation_trend:.1f}%"
                    pdf.cell(200, 8, text=trend_text, new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
                detailed_calculations = economic_charts.get('detailed_calculations', {})
                if detailed_calculations:
                    pdf.ln(5)
                    pdf.set_font("DejaVu", 'B', 12)
                    pdf.cell(200, 8, text="–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ç—Ä–µ–Ω–¥–æ–≤:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.set_font("DejaVu", size=8)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ 3 —Å—Ç–æ–ª–±—Ü–∞
                    gdp_calcs = detailed_calculations.get('gdp_calculations', [])
                    inflation_calcs = detailed_calculations.get('inflation_calculations', [])
                    
                    if gdp_calcs or inflation_calcs:
                        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                        pdf.set_font("DejaVu", 'B', 9)
                        pdf.cell(60, 6, text="–ü–µ—Ä–∏–æ–¥", new_x=XPos.RIGHT, new_y=YPos.TOP)
                        pdf.cell(60, 6, text="–†–∞—Å—á–µ—Ç", new_x=XPos.RIGHT, new_y=YPos.TOP)
                        pdf.cell(60, 6, text="–†–µ–∑—É–ª—å—Ç–∞—Ç", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                        pdf.set_font("DejaVu", size=8)
                        
                        # –í–í–ü —Ä–∞—Å—á–µ—Ç—ã
                        if gdp_calcs:
                            pdf.cell(200, 4, text="", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                            pdf.set_font("DejaVu", 'B', 8)
                            pdf.cell(200, 5, text="–í–í–ü:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                            pdf.set_font("DejaVu", size=7)
                            
                            for calc in gdp_calcs:
                                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                                pdf.cell(60, 4, text=calc['years'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                                pdf.cell(60, 4, text=calc['calculation'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                                pdf.cell(60, 4, text=calc['result'], new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                        
                        # –ò–Ω—Ñ–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç—ã
                        if inflation_calcs:
                            pdf.cell(200, 4, text="", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                            pdf.set_font("DejaVu", 'B', 8)
                            pdf.cell(200, 5, text="–ò–Ω—Ñ–ª—è—Ü–∏—è:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                            pdf.set_font("DejaVu", size=7)
                            
                            for calc in inflation_calcs:
                                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                                pdf.cell(60, 4, text=calc['years'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                                pdf.cell(60, 4, text=calc['calculation'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                                pdf.cell(60, 4, text=calc['result'], new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
                interpretations = economic_charts.get('interpretations', {})
                if interpretations and 'ru' in interpretations:
                    pdf.ln(5)
                    pdf.set_font("DejaVu", 'B', 12)
                    pdf.cell(200, 8, text="–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.set_font("DejaVu", size=10)
                    
                    ru_interp = interpretations['ru']
                    if 'gdp_interpretation' in ru_interp:
                        pdf.cell(200, 6, text=f"–í–í–ü: {ru_interp['gdp_interpretation']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    if 'inflation_interpretation' in ru_interp:
                        pdf.cell(200, 6, text=f"–ò–Ω—Ñ–ª—è—Ü–∏—è: {ru_interp['inflation_interpretation']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    if 'recent_comparison' in ru_interp:
                        pdf.cell(200, 6, text=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: {ru_interp['recent_comparison']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            try:
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                chart_data = {
                    'labels': economic_charts.get('gdp_chart', {}).get('labels', []),
                    'gdp_chart': economic_charts.get('gdp_chart', {}),
                    'inflation_chart': economic_charts.get('inflation_chart', {})
                }
                
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è PDF: {len(chart_data.get('labels', []))} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
                
                chart_buffer = create_chart_image_for_pdf(chart_data, f"–î–∏–Ω–∞–º–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π ({country_name})")
                if chart_buffer:
                    logger.info("–ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ PDF")
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ PDF
                    pdf.ln(5)
                    pdf.image(chart_buffer, x=10, y=pdf.get_y(), w=190)
                    pdf.ln(85)  # –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –≥—Ä–∞—Ñ–∏–∫–∞
                    chart_buffer.close()
                else:
                    logger.warning("–ì—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    # –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    pdf.ln(3)
                    pdf.set_font("DejaVu", 'B', 12)
                    pdf.cell(200, 8, text=f"–î–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞ –í–í–ü ({country_name}):", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.set_font("DejaVu", size=10)
                    
                    gdp_chart = economic_charts.get('gdp_chart', {})
                    if gdp_chart.get('labels') and gdp_chart.get('datasets'):
                        labels = gdp_chart['labels']
                        data = gdp_chart['datasets'][0]['data'] if gdp_chart['datasets'] else []
                        
                        for i, (year, value) in enumerate(zip(labels, data)):
                            if i < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç
                                pdf.cell(200, 6, text=f"{year}: {value}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    inflation_chart = economic_charts.get('inflation_chart', {})
                    if inflation_chart.get('labels') and inflation_chart.get('datasets'):
                        pdf.ln(3)
                        pdf.set_font("DejaVu", 'B', 12)
                        pdf.cell(200, 8, text=f"–î–∏–Ω–∞–º–∏–∫–∞ –∏–Ω—Ñ–ª—è—Ü–∏–∏ ({country_name}):", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                        pdf.set_font("DejaVu", size=10)
                        
                        labels = inflation_chart['labels']
                        data = inflation_chart['datasets'][0]['data'] if inflation_chart['datasets'] else []
                        
                        for i, (year, value) in enumerate(zip(labels, data)):
                            if i < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç
                                pdf.cell(200, 6, text=f"{year}: {value}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ PDF: {e}")
                # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
                pdf.ln(3)
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(200, 8, text=f"–î–∏–Ω–∞–º–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π ({country_name}):", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=10)
                
                gdp_chart = economic_charts.get('gdp_chart', {})
                if gdp_chart.get('labels') and gdp_chart.get('datasets'):
                    labels = gdp_chart['labels']
                    data = gdp_chart['datasets'][0]['data'] if gdp_chart['datasets'] else []
                    
                    for i, (year, value) in enumerate(zip(labels, data)):
                        if i < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç
                            pdf.cell(200, 6, text=f"{year}: {value}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            pdf.ln(5)
        
        # –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if report.get('object') and report['object'].get('address'):
            address = report['object']['address']
            location_data = extract_location_from_address(address)
            
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(200, 10, text="–¢—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            
            if location_data['city_name']:
                trends_data, trends_message = get_property_trends_data(
                    location_data['city_name'],
                    location_data['district_name'],
                    location_data['county_name']
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                historical_data = get_historical_property_trends(
                    location_data['city_name'],
                    location_data['district_name'],
                    location_data['county_name']
                )
                
                # –î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–µ
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(200, 8, text="–î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=10)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                if trends_message:
                    pdf.cell(200, 6, text=f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {trends_message}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                if trends_data:
                    if trends_data.get('unit_price_for_sale'):
                        pdf.cell(200, 6, text=f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): ‚Ç¨{trends_data['unit_price_for_sale']:,.2f}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('price_change_sale'):
                        change_percent = trends_data['price_change_sale'] * 100
                        pdf.cell(200, 6, text=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): {change_percent:+.2f}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('listing_period_for_sale'):
                        pdf.cell(200, 6, text=f"–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: {trends_data['listing_period_for_sale']} –¥–Ω–µ–π", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('count_for_sale'):
                        pdf.cell(200, 6, text=f"–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {trends_data['count_for_sale']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                else:
                    pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(200, 6, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(200, 6, text="–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                # –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                if historical_data:
                    sale_chart_buffer = create_property_trends_chart(historical_data, 'sale', 180, 80)
                    if sale_chart_buffer:
                        pdf.ln(3)
                        pdf.image(sale_chart_buffer, x=15, w=180)
                        pdf.ln(3)
                
            pdf.ln(5)
            
            # –î–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä–µ–Ω–¥–µ (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è)
            pdf.set_font("DejaVu", 'B', 12)
            pdf.cell(200, 8, text="–î–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=10)
            
            if trends_data:
                    if trends_data.get('unit_price_for_rent'):
                        pdf.cell(200, 6, text=f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): ‚Ç¨{trends_data['unit_price_for_rent']:,.2f}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('price_change_rent'):
                        change_percent = trends_data['price_change_rent'] * 100
                        pdf.cell(200, 6, text=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): {change_percent:+.2f}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('listing_period_for_rent'):
                        pdf.cell(200, 6, text=f"–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: {trends_data['listing_period_for_rent']} –¥–Ω–µ–π", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('count_for_rent'):
                        pdf.cell(200, 6, text=f"–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: {trends_data['count_for_rent']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                    if trends_data.get('yield'):
                        yield_percent = trends_data['yield'] * 100
                        pdf.cell(200, 6, text=f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {yield_percent:.2f}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(200, 6, text="–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            else:
                pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(200, 6, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(200, 6, text="–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(200, 6, text="–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            # –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞—Ä–µ–Ω–¥—É
            if historical_data:
                rent_chart_buffer = create_property_trends_chart(historical_data, 'rent', 180, 80)
                if rent_chart_buffer:
                    pdf.ln(3)
                    pdf.image(rent_chart_buffer, x=15, w=180)
                    pdf.ln(3)
        else:
            # –ê–¥—Ä–µ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–Ω/–¥" –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
            pdf.set_font("DejaVu", 'B', 12)
            pdf.cell(200, 8, text="–î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=10)
            pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 6, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 6, text="–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            pdf.ln(5)
                
            pdf.set_font("DejaVu", 'B', 12)
            pdf.cell(200, 8, text="–î–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=10)
            pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 6, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 6, text="–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 6, text="–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 6, text="–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            pdf.ln(5)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤
        if 'taxes' in report:
            pdf.add_page()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
            try:
                pdf.image('logo-flt.png', x=170, y=10, w=30)  # –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–ª–æ–≥–æ–≤: {e}")
            
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(200, 10, text="–ù–∞–ª–æ–≥–∏ –∏ —Å–±–æ—Ä—ã:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            pdf.cell(200, 8, text=f"–ù–∞–ª–æ–≥ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: {report['taxes']['transfer_tax']*100}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 8, text=f"–ì–µ—Ä–±–æ–≤—ã–π —Å–±–æ—Ä: {report['taxes']['stamp_duty']*100}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(200, 8, text=f"–ù–æ—Ç–∞—Ä–∏—É—Å: ‚Ç¨{report['taxes']['notary']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ë–ª–æ–∫: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        if 'alternatives' in report and isinstance(report['alternatives'], list):
            pdf.set_font('DejaVu', 'B', 14)
            pdf.cell(0, 10, '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏ (5 –ª–µ—Ç):', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 12)
            for alt in report['alternatives']:
                name = alt.get('name', '-')
                yld = alt.get('yield', 0)
                pdf.cell(0, 8, f'{name}: {round(yld*100, 1)}%', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ë–ª–æ–∫: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if 'yield' in report or 'price_index' in report or 'mortgage_rate' in report or 'global_house_price_index' in report:
            pdf.set_font('DejaVu', 'B', 14)
            pdf.cell(0, 10, '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 12)
            if 'yield' in report:
                pdf.cell(0, 8, f'Yield: {round(report["yield"]*100, 1)}%', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'price_index' in report:
                pdf.cell(0, 8, f'–ò–Ω–¥–µ–∫—Å —Ü–µ–Ω: {report["price_index"]}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'mortgage_rate' in report:
                pdf.cell(0, 8, f'–ò–ø–æ—Ç–µ—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {round(report["mortgage_rate"]*100, 1)}%', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'global_house_price_index' in report:
                pdf.cell(0, 8, f'–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ü–µ–Ω: {report["global_house_price_index"]}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ë–ª–æ–∫: –†–∏—Å–∫–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–π–æ–Ω–∞
        if 'risks' in report or 'liquidity' in report or 'district' in report:
            pdf.set_font('DejaVu', 'B', 14)
            pdf.cell(0, 10, '–†–∏—Å–∫–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–π–æ–Ω–∞:', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 12)
            if 'risks' in report and isinstance(report['risks'], list):
                for idx, risk in enumerate(report['risks']):
                    pdf.cell(0, 8, f'–†–∏—Å–∫ {idx+1}: {risk}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'liquidity' in report:
                pdf.cell(0, 8, f'–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {report["liquidity"]}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'district' in report:
                pdf.cell(0, 8, f'–†–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–π–æ–Ω–∞: {report["district"]}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ summary/–∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        # if 'summary' in report:
        #     pdf.set_font("DejaVu", 'B', 14)
        #     pdf.cell(200, 10, txt="–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:", ln=True)
        #     pdf.set_font("DejaVu", size=12)
        #     pdf.multi_cell(200, 8, txt=report.get('summary', '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω'))
        # –ü–æ–¥–≤–∞–ª: –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if profile:
            pdf.set_y(-60)
            pdf.set_font('DejaVu', 'B', 11)
            pdf.cell(0, 8, '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∏–µ–ª—Ç–æ—Ä–∞:', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 10)
            if profile.get('tg_name') or profile.get('last_name'):
                pdf.cell(0, 8, f"–ò–º—è: {profile.get('tg_name','')} {profile.get('last_name','')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if profile.get('company'):
                pdf.cell(0, 8, f"–ö–æ–º–ø–∞–Ω–∏—è: {profile.get('company')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if profile.get('position'):
                pdf.cell(0, 8, f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {profile.get('position')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if profile.get('phone'):
                pdf.cell(0, 8, f"–¢–µ–ª–µ—Ñ–æ–Ω: {profile.get('phone')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if profile.get('email'):
                pdf.cell(0, 8, f"Email: {profile.get('email')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if profile.get('website'):
                pdf.cell(0, 8, f"–°–∞–π—Ç: {profile.get('website')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if profile.get('about_me'):
                pdf.multi_cell(0, 8, f"–û —Å–µ–±–µ: {profile.get('about_me')}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
        pdf.output(temp_file.name)
        temp_file.close()
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º PDF –≤ static/reports/
        reports_dir = os.path.join(app.root_path, 'static', 'reports')
        os.makedirs(reports_dir, exist_ok=True)
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏
        file_id = ''.join(random.choices(string.digits, k=12))
        final_pdf_name = f'{file_id}.pdf'
        final_pdf_path = os.path.join(reports_dir, final_pdf_name)
        import shutil
        shutil.move(temp_file.name, final_pdf_path)
        pdf_url = f'/static/reports/{final_pdf_name}'
        supabase.table('user_reports').update({'pdf_path': pdf_url}).eq('id', report_id).execute()
        # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞
        send_status = None
        if telegram_id:
            send_status = send_pdf_to_telegram(final_pdf_path, telegram_id)
        return jsonify({
            'success': True,
            'pdf_path': pdf_url,
            'telegram_send_status': send_status,
            'message': 'PDF —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!'
        })
    except Exception as e:
        logger.error(f"Error generating PDF: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/download_pdf', methods=['POST'])
def api_download_pdf():
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF –æ—Ç—á–µ—Ç–∞"""
    data = request.json or {}
    pdf_path = data.get('pdf_path')
    
    if not pdf_path or not os.path.exists(pdf_path):
        return jsonify({'error': 'PDF file not found'}), 404
    
    try:
        return send_file(pdf_path, as_attachment=True, download_name='full_report.pdf')
    except Exception as e:
        logger.error(f"Error downloading PDF: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/user_balance', methods=['POST'])
def api_user_balance():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    deduct = data.get('deduct', False)
    if not telegram_id:
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        result = supabase.table('users').select('balance').eq('telegram_id', telegram_id).execute()
        if result.data:
            balance = result.data[0].get('balance', 0)
        else:
            balance = 0
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å $1
        if deduct:
            if balance >= 1:
                new_balance = balance - 1
                update_result = supabase.table('users').update({'balance': new_balance}).eq('telegram_id', telegram_id).execute()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                if hasattr(update_result, 'data') or update_result:
                    return jsonify({'success': True, 'balance': new_balance})
                else:
                    return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å'}), 500
            else:
                return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'balance': balance}), 400
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å
        return jsonify({'balance': balance})
    except Exception as e:
        logger.error(f"Error getting/updating user balance: {e}")
        return jsonify({'error': 'Internal error'}), 500

# === –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ã –≤—ã—à–µ –∑–∞–ø—É—Å–∫–∞ Flask ===
@app.route('/api/full_report_access', methods=['POST'])
def api_full_report_access():
    data = request.json or {}
    logger.info(f"/api/full_report_access incoming data: {data}")
    telegram_id = data.get('telegram_id')
    if telegram_id is None or str(telegram_id).strip() == '':
        logger.warning("/api/full_report_access: telegram_id missing or empty in request")
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        telegram_id = int(telegram_id)
    except (TypeError, ValueError):
        logger.warning(f"/api/full_report_access: telegram_id not convertible to int: {telegram_id}")
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        user_result = supabase.table('users').select('period_start, period_end, balance').eq('telegram_id', telegram_id).execute()
        logger.info(f"/api/full_report_access user_result: {user_result.data}")
        user = user_result.data[0] if user_result.data else None
        if not user:
            logger.warning(f"/api/full_report_access: User not found for telegram_id {telegram_id}")
            return jsonify({'error': 'User not found'}), 404
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        tariff_result = supabase.table('tariffs').select('price').eq('name', 'full report').execute()
        tariff = tariff_result.data[0] if tariff_result.data else None
        full_report_price = float(tariff['price']) if tariff and 'price' in tariff else 3.0
        return jsonify({
            'period_start': user.get('period_start'),
            'period_end': user.get('period_end'),
            'balance': user.get('balance', 0),
            'full_report_price': full_report_price
        })
    except Exception as e:
        logger.error(f"Error in full_report_access: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/deduct_balance', methods=['POST'])
def api_deduct_balance():
    data = request.json or {}
    telegram_id = data.get('telegram_id')
    amount = data.get('amount')
    logger.info(f"/api/deduct_balance incoming data: {data}")
    if telegram_id is None or str(telegram_id).strip() == '' or amount is None:
        logger.warning("/api/deduct_balance: telegram_id or amount missing in request")
        return jsonify({'error': 'telegram_id and amount required'}), 400
    try:
        telegram_id = int(telegram_id)
        amount = float(amount)
    except (TypeError, ValueError):
        logger.warning(f"/api/deduct_balance: telegram_id or amount not convertible: {telegram_id}, {amount}")
        return jsonify({'error': 'Invalid telegram_id or amount'}), 400
    try:
        user_result = supabase.table('users').select('balance').eq('telegram_id', telegram_id).execute()
        user = user_result.data[0] if user_result.data else None
        if not user:
            logger.warning(f"/api/deduct_balance: user not found for telegram_id {telegram_id}")
            return jsonify({'error': 'User not found'}), 404
        old_balance = user['balance']
        new_balance = old_balance - amount
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ int –¥–ª—è smallint
        new_balance_int = int(new_balance)
        logger.info(f"/api/deduct_balance: old_balance={old_balance}, amount={amount}, new_balance_int={new_balance_int}")
        update_result = supabase.table('users').update({'balance': new_balance_int}).eq('telegram_id', telegram_id).execute()
        logger.info(f"/api/deduct_balance: update_result={update_result}")
        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è ‚Äî —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
        return jsonify({'success': True, 'new_balance': new_balance_int})
    except Exception as e:
        logger.error(f"Error in deduct_balance: {e}")
        return jsonify({'error': 'Internal server error', 'details': str(e)}), 500
@app.route('/api/update_user_report', methods=['POST'])
def api_update_user_report():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ø–∏—Å–∞–Ω–∏–µ $1, –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    report_id = data.get('report_id')
    if not telegram_id or not report_id:
        return jsonify({'error': 'Missing required data'}), 400
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id
        user_result = supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
        user_id = user_result.data[0]['id'] if user_result.data else telegram_id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        report_result = supabase.table('user_reports').select('*').eq('id', report_id).eq('user_id', user_id).execute()
        if not report_result.data:
            return jsonify({'error': 'Report not found or not owned by user'}), 404
        report = report_result.data[0]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance_result = supabase.table('users').select('balance').eq('telegram_id', telegram_id).execute()
        balance = balance_result.data[0].get('balance', 0) if balance_result.data else 0
        if balance < 1:
            return jsonify({'error': 'Insufficient balance', 'balance': balance}), 400
        # –°–ø–∏—Å—ã–≤–∞–µ–º $1
        new_balance = balance - 1
        supabase.table('users').update({'balance': new_balance}).eq('telegram_id', telegram_id).execute()
        # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
        # TODO: –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
        supabase.table('user_reports').update({
            'updated_at': datetime.now().isoformat()
        }).eq('id', report_id).execute()
        return jsonify({'success': True, 'balance': new_balance})
    except Exception as e:
        logger.error(f"Error updating user report: {e}")
        return jsonify({'error': 'Internal error'}), 500 

@app.route('/api/user_reports/save', methods=['POST'])
def api_save_user_report():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç report_id"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    full_report = data.get('full_report')
    address = data.get('address')
    report_type = data.get('report_type', 'full')
    if not telegram_id or not full_report:
        return jsonify({'error': 'Missing required data'}), 400
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id
        try:
            user_result = safe_db_operation(
                lambda: supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
            )
            if user_result is None:
                return jsonify({'error': 'Database connection error'}), 500
            user_id = user_result.data[0]['id'] if user_result.data else telegram_id
        except Exception as e:
            logger.error(f"Error getting user_id: {e}")
            return jsonify({'error': 'Database connection error'}), 500
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_data = {
            'user_id': user_id,
            'report_type': report_type,
            'address': address,
            'full_report': full_report,
            'created_at': datetime.now().isoformat(),
            'updated_at': datetime.now().isoformat()
        }
        try:
            result = safe_db_operation(
                lambda: supabase.table('user_reports').insert(report_data).execute()
            )
            if result is None:
                return jsonify({'error': 'Database connection error'}), 500
            new_id = result.data[0]['id'] if hasattr(result, 'data') and result.data else None
            return jsonify({'success': True, 'report_id': new_id})
        except Exception as e:
            logger.error(f"Error saving report: {e}")
            return jsonify({'error': 'Database connection error'}), 500
    except Exception as e:
        logger.error(f"Error saving user report: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/save_html_report', methods=['POST'])
def api_save_html_report():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –∫–∞–∫ HTML —Ñ–∞–π–ª –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º —Å—Ç–∏–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É"""
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'Invalid telegram_id'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    
    report_content = data.get('report_content')
    location_info = data.get('location_info', '')
    report_data = data.get('report_data', {})  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
    include_realtor_info = data.get('include_realtor_info', False)
    include_property_info = data.get('include_property_info', False)
    property_info = data.get('property_info', {})
    
    if not report_content:
        return jsonify({'error': 'Report content required'}), 400
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        random_suffix = ''.join(random.choices(string.digits, k=5))
        report_number = f"RPT-{timestamp}-{random_suffix}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏
        file_id = ''.join(random.choices(string.digits, k=12))
        filename = f"{file_id}.html"
        file_path = os.path.join('reports', filename)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        user_info = None
        try:
            if include_realtor_info:
                user_result = safe_db_operation(
                    lambda: supabase.table('users').select('*').eq('telegram_id', telegram_id).execute()
                )
                if user_result and user_result.data:
                    user_info = user_result.data[0]
                    user_id = user_info['id']
                else:
                    logger.error("Failed to get user info from database")
                    user_id = telegram_id
            else:
                user_result = safe_db_operation(
                    lambda: supabase.table('users').select('id').eq('telegram_id', telegram_id).execute()
                )
                if user_result is None:
                    logger.error("Failed to get user_id from database")
                    user_id = telegram_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –∫–∞–∫ fallback
                else:
                    user_id = user_result.data[0]['id'] if user_result.data else telegram_id
        except Exception as e:
            logger.error(f"Error getting user info: {e}")
            user_id = telegram_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –∫–∞–∫ fallback
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        db_report_data = {
            'user_id': user_id,
            'report_type': 'property_evaluation',
            'title': f'–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ - {location_info}',
            'description': f'–û—Ç—á–µ—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ {location_info}',
            'parameters': report_data.get('parameters', {}),
            'address': location_info,
            'latitude': report_data.get('latitude'),
            'longitude': report_data.get('longitude'),
            'price_range_min': report_data.get('price_range_min'),
            'price_range_max': report_data.get('price_range_max'),
            'price': report_data.get('price'),
            'area': report_data.get('area'),
            'report_url': f"/reports/{filename}",
            'full_report': {
                'content': report_content,
                'location_info': location_info,
                'report_number': report_number,
                'generated_at': datetime.now().isoformat()
            }
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ bedrooms - –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "2+1"
        bedrooms_raw = report_data.get('bedrooms')
        if bedrooms_raw:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "2+1" -> 2
                bedrooms_match = re.search(r'(\d+)', str(bedrooms_raw))
                if bedrooms_match:
                    db_report_data['bedrooms'] = int(bedrooms_match.group(1))
                else:
                    db_report_data['bedrooms'] = None
            except (ValueError, TypeError):
                db_report_data['bedrooms'] = None
        else:
            db_report_data['bedrooms'] = None
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
        numeric_fields = ['price_range_min', 'price_range_max', 'price', 'area', 'latitude', 'longitude', 'bedrooms']
        for field in numeric_fields:
            if db_report_data.get(field) is None:
                db_report_data.pop(field, None)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            db_result = safe_db_operation(
                lambda: supabase.table('user_reports').insert(db_report_data).execute()
            )
            if db_result is None:
                logger.error("Failed to save report to database")
                report_id = None
            else:
                report_id = db_result.data[0]['id'] if db_result.data else None
        except Exception as e:
            logger.error(f"Error saving to database: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            report_id = None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification_url = f"{request.host_url.rstrip('/')}/reports/{filename}"
        qr_code_svg = generate_qr_code_svg(verification_url)
        
        # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        def generate_realtor_section(user_info):
            if not user_info:
                return ""
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∏—ç–ª—Ç–æ—Ä–∞
            full_name = user_info.get('full_name') or f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip()
            if not full_name:
                full_name = user_info.get('tg_name', '–†–∏—ç–ª—Ç–æ—Ä')
            
            position = user_info.get('position', '–í–µ–¥—É—â–∏–π —Ä–∏—ç–ª—Ç–æ—Ä')
            company_name = user_info.get('company_name', 'RealtyCompany')
            about_me = user_info.get('about_me', '–û–ø—ã—Ç–Ω—ã–π —Ä–∏—ç–ª—Ç–æ—Ä —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.')
            phone = user_info.get('phone', '')
            email = user_info.get('email', '')
            website_url = user_info.get('website_url', '')
            whatsapp_link = user_info.get('whatsapp_link', '')
            telegram_link = user_info.get('telegram_link', '')
            facebook_link = user_info.get('facebook_link', '')
            instagram_link = user_info.get('instagram_link', '')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —Ä–∏—ç–ª—Ç–æ—Ä–∞
            photo_html = ''
            if user_info.get('avatar_filename') or user_info.get('photo_url'):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º avatar_filename –∏–∑ –ë–î (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã)
                photo_url = user_info.get('avatar_filename') or user_info.get('photo_url')
                # –ï—Å–ª–∏ avatar_filename - —ç—Ç–æ —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
                if photo_url and not photo_url.startswith('http'):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ API /user/<telegram_id>/<filename>
                    telegram_id = user_info.get('telegram_id', '')
                    photo_url = f"/user/{telegram_id}/{photo_url}"
                photo_html = f'<img src="{photo_url}" alt="{full_name}" class="realtor-photo">'
            else:
                # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Ñ–æ—Ç–æ
                photo_html = '<div class="realtor-photo-placeholder">üë§</div>'
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
            contacts_html = ''
            if phone:
                contacts_html += f'''
                <div class="contact-item">
                    <svg class="contact-icon" viewBox="0 0 24 24" fill="#3498db">
                        <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
                    </svg>
                    <div class="contact-text">
                        <a href="tel:{phone}" class="contact-link">{phone}</a>
                    </div>
                </div>
                '''
            
            if email:
                contacts_html += f'''
                <div class="contact-item">
                    <svg class="contact-icon" viewBox="0 0 24 24" fill="#3498db">
                        <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
                    </svg>
                    <div class="contact-text">
                        <a href="mailto:{email}" class="contact-link">{email}</a>
                    </div>
                </div>
                '''
            
            if whatsapp_link:
                contacts_html += f'''
                <div class="contact-item">
                    <svg class="contact-icon" viewBox="0 0 24 24" fill="#25D366">
                        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"/>
                    </svg>
                    <div class="contact-text">
                        <a href="{whatsapp_link}" class="contact-link" target="_blank">WhatsApp</a>
                    </div>
                </div>
                '''
            
            if telegram_link:
                contacts_html += f'''
                <div class="contact-item">
                    <svg class="contact-icon" viewBox="0 0 24 24" fill="#0088cc">
                        <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm5.568 8.16c-.169 1.858-.896 3.461-2.189 4.689-1.293 1.228-2.896 1.955-4.755 2.124-1.858.169-3.461-.896-4.689-2.189-1.228-1.293-1.955-2.896-2.124-4.755-.169-1.858.896-3.461 2.189-4.689 1.293-1.228 2.896-1.955 4.755-2.124 1.858-.169 3.461.896 4.689 2.189 1.228 1.293 1.955 2.896 2.124 4.755z"/>
                    </svg>
                    <div class="contact-text">
                        <a href="{telegram_link}" class="contact-link" target="_blank">Telegram</a>
                    </div>
                </div>
                '''
            
            if facebook_link:
                contacts_html += f'''
                <div class="contact-item">
                    <svg class="contact-icon" viewBox="0 0 24 24" fill="#1877f2">
                        <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                    </svg>
                    <div class="contact-text">
                        <a href="{facebook_link}" class="contact-link" target="_blank">Facebook</a>
                    </div>
                </div>
                '''
            
            if instagram_link:
                contacts_html += f'''
                <div class="contact-item">
                    <svg class="contact-icon" viewBox="0 0 24 24" fill="#e4405f">
                        <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
                    </svg>
                    <div class="contact-text">
                        <a href="{instagram_link}" class="contact-link" target="_blank">Instagram</a>
                    </div>
                </div>
                '''
            
            return f'''
        <!-- –ë–ª–æ–∫ —Ä–∏—ç–ª—Ç–æ—Ä–∞ -->
        <div class="realtor-section">
            <div class="realtor-header">
                {photo_html}
                <div class="realtor-info">
                    <div class="realtor-name">{full_name}</div>
                    <div class="realtor-title">{position}</div>
                    <div class="realtor-company">{company_name}</div>
                    {f'<div class="realtor-web">{website_url}</div>' if website_url else ''}
                </div>
            </div>
            
            <div class="realtor-description">
                <strong>{about_me}</strong>
            </div>
            
            <div class="realtor-contacts">
                {contacts_html}
            </div>
        </div>
            '''
        
        def generate_property_section(property_info):
            if not property_info or (not property_info.get('photos') and not property_info.get('url')):
                return ""
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–ª–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            photos_html = ''
            if property_info.get('photos'):
                photos_slides = ''
                photos_dots = ''
                for i, photo in enumerate(property_info['photos']):
                    active_class = 'active' if i == 0 else ''
                    photos_slides += f'''
                        <div class="photo-slide {active_class}">
                            <img src="{photo.get('data', '')}" alt="–§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞ {i+1}">
                        </div>
                    '''
                    photos_dots += f'<span class="carousel-dot {active_class}" onclick="currentSlide({i+1})"></span>'
                
                photos_html = f'''
                    <div class="photos-container">
                        <div class="photo-carousel" id="photoCarousel">
                            {photos_slides}
                            
                            <!-- –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–∞—Ä—É—Å–µ–ª–∏ -->
                            <button class="carousel-nav carousel-prev" onclick="changeSlide(-1)">‚Äπ</button>
                            <button class="carousel-nav carousel-next" onclick="changeSlide(1)">‚Ä∫</button>
                            
                            <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã -->
                            <div class="carousel-controls">
                                {photos_dots}
                            </div>
                        </div>
                    </div>
                '''
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            property_link_html = ''
            if property_info.get('url'):
                property_link_html = f'''
                    <div class="property-link-section">
                        <div class="property-link-title">–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ</div>
                        <a href="{property_info['url']}" 
                           class="property-link" 
                           target="_blank">
                            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                        </a>
                    </div>
                '''
            
            if photos_html or property_link_html:
                return f'''
        <!-- –ë–ª–æ–∫ –∫–∞—Ä—Ç—ã –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π -->
        <div class="location-visual-section">
            <h3 class="location-visual-title">–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä–µ–∫—Ç–∞</h3>
            
            <div class="location-visual-grid">
                <!-- –ö–∞—Ä—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞) -->
                <div class="map-container">
                    <div style="display: flex; align-items: center; justify-content: center; height: 100%; background: #f8f9fa; color: #6c757d;">
                        üìç –ö–∞—Ä—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏
                    </div>
                </div>
                
                <!-- –ö–∞—Ä—É—Å–µ–ª—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π -->
                {photos_html}
            </div>
            
            <!-- –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ -->
            {property_link_html}
        </div>
                '''
            return ""
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π HTML –æ—Ç—á–µ—Ç
        html_template = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ - {location_info}</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}

        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #ffffff;
            color: #2c3e50;
            line-height: 1.6;
            font-size: 14px;
        }}

        .document {{
            max-width: 900px;
            margin: 0 auto;
            background: white;
            min-height: 100vh;
            border: 1px solid #e0e0e0;
        }}

        /* –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */
        .corporate-header {{
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 40px 30px;
            text-align: center;
            border-bottom: 4px solid #3498db;
        }}

        .company-logo {{
            width: 100px;
            height: auto;
            margin-bottom: 20px;
            filter: brightness(0) invert(1);
        }}

        .document-title {{
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }}

        .document-subtitle {{
            font-size: 16px;
            opacity: 0.9;
            margin-bottom: 15px;
        }}

        /* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ */
        .report-metadata {{
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            margin: 0;
            padding: 25px 30px;
        }}

        .metadata-grid {{
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }}

        .metadata-item {{
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #e9ecef;
        }}

        .metadata-label {{
            font-weight: 600;
            color: #495057;
        }}

        .metadata-value {{
            color: #6c757d;
            text-align: right;
        }}

        .qr-section {{
            text-align: center;
            margin-top: 20px;
            padding: 15px;
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 8px;
        }}

        .qr-code {{
            margin: 10px 0;
        }}

        .qr-label {{
            font-size: 12px;
            color: #6c757d;
            margin-top: 5px;
        }}

        /* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */
        .report-content {{
            padding: 30px;
        }}

        /* –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç—á–µ—Ç–∞ */
        
        /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π */
        .data-section-title {{
            font-size: 18px;
            font-weight: 700;
            color: #2c3e50;
            margin: 25px 0 15px 0;
            padding: 10px 0;
            border-bottom: 2px solid #3498db;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        
        /* Market Indicators Table */
        .market-indicators-table {{
            margin: 20px 0;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }}
        
        .market-data-table {{
            width: 100%;
            border-collapse: collapse;
            font-size: 13px;
        }}
        
        .market-data-table .category-header {{
            background: #2c3e50;
            color: white;
            padding: 15px;
            font-weight: 700;
            text-align: center;
            font-size: 16px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        
        .market-data-table .data-cell {{
            padding: 15px;
            border-bottom: 1px solid #dee2e6;
            background: #ffffff;
            vertical-align: top;
        }}
        
        .market-data-table tr:nth-child(even) .data-cell {{
            background: #f8f9fa;
        }}
        
        .cell-label {{
            font-weight: 600;
            color: #495057;
            margin-bottom: 5px;
            font-size: 12px;
        }}
        
        .cell-value {{
            font-weight: 700;
            color: #2c3e50;
            font-size: 14px;
        }}
        
        /* Market Analysis Text Block */
        .market-analysis-text-block {{
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-left: 4px solid #3498db;
            padding: 20px;
            margin: 20px 0;
            border-radius: 4px;
        }}
        
        .market-analysis-text-title {{
            font-size: 16px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 15px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        
        .market-analysis-text-content p {{
            margin-bottom: 10px;
            line-height: 1.6;
            color: #495057;
            font-size: 13px;
        }}
        
        .market-analysis-text-content strong {{
            color: #2c3e50;
            font-weight: 700;
        }}
        
        /* Trends Grid */
        .trends-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }}
        
        .trend-card {{
            background: #ffffff;
            border: 1px solid #dee2e6;
            border-left: 4px solid #27ae60;
            padding: 20px;
            border-radius: 4px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }}
        
        .trend-card-price_trend {{
            border-left-color: #3498db;
        }}
        
        .trend-title {{
            font-size: 14px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        
        .trend-value {{
            font-size: 20px;
            font-weight: 700;
            color: #27ae60;
            margin-bottom: 10px;
        }}
        
        .trend-change {{
            font-size: 12px;
            color: #6c757d;
            line-height: 1.4;
        }}
        
        /* Trends Table */
        .trends-table-section {{
            margin: 30px 0;
        }}
        
        .trends-table-title {{
            font-size: 16px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 15px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        
        .trends-table {{
            width: 100%;
            border-collapse: collapse;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            font-size: 12px;
        }}
        
        .trends-table th {{
            background: #2c3e50;
            color: white;
            padding: 12px 8px;
            font-weight: 700;
            text-align: center;
            font-size: 11px;
            text-transform: uppercase;
            letter-spacing: 0.3px;
        }}
        
        .trends-table td {{
            padding: 10px 8px;
            text-align: center;
            border-bottom: 1px solid #dee2e6;
            background: #ffffff;
        }}
        
        .trends-table .current-month-row {{
            background: #e3f2fd !important;
            font-weight: 700;
        }}
        
        .trends-table .forecast-row {{
            background: #f0f8ff !important;
        }}
        
        .trends-table .filter-info {{
            background: #f8f9fa !important;
            font-style: italic;
            color: #6c757d;
        }}
        
        /* Object Summary */
        .object-summary-section {{
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-left: 4px solid #e74c3c;
            padding: 20px;
            margin: 25px 0;
            border-radius: 4px;
        }}
        
        .object-summary-title {{
            font-size: 16px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 15px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        
        .object-comparison-table {{
            width: 100%;
            border-collapse: collapse;
        }}
        
        .object-comparison-table td {{
            padding: 8px 0;
            border-bottom: 1px solid #dee2e6;
        }}
        
        .comparison-label {{
            font-weight: 600;
            color: #495057;
            width: 60%;
        }}
        
        .comparison-value {{
            font-weight: 700;
            color: #2c3e50;
            text-align: right;
        }}
        
        .comparison-expensive {{
            color: #e74c3c;
        }}
        
        .comparison-cheaper {{
            color: #27ae60;
        }}
        
        .comparison-smaller {{
            color: #f39c12;
        }}
        
        .object-analysis-text {{
            margin-top: 15px;
            padding: 15px;
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 4px;
            font-size: 13px;
            color: #856404;
            line-height: 1.5;
        }}
        
        /* Forecast Tables */
        .forecast-table-section {{
            margin: 30px 0;
        }}
        
        .forecast-table-title {{
            font-size: 16px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 15px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        
        .forecast-table {{
            width: 100%;
            border-collapse: collapse;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            font-size: 12px;
        }}
        
        .forecast-table th {{
            background: #2c3e50;
            color: white;
            padding: 12px 8px;
            font-weight: 700;
            text-align: center;
            font-size: 11px;
            text-transform: uppercase;
            letter-spacing: 0.3px;
        }}
        
        .forecast-table td {{
            padding: 10px 8px;
            text-align: center;
            border-bottom: 1px solid #dee2e6;
            background: #ffffff;
        }}
        
        .forecast-table .current-month-row {{
            background: #e3f2fd !important;
            font-weight: 700;
        }}
        
        .forecast-table .forecast-row {{
            background: #f0f8ff !important;
        }}
        
        /* Price Forecast Market Table */
        .price-forecast-market-table {{
            width: 100%;
            border-collapse: collapse;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            margin: 20px 0;
        }}
        
        .forecast-category-header {{
            background: #2c3e50;
            color: white;
            padding: 15px;
            font-weight: 700;
            text-align: center;
            font-size: 16px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        
        .forecast-data-cell {{
            padding: 20px;
            border-bottom: 1px solid #dee2e6;
            background: #ffffff;
            vertical-align: top;
        }}
        
        .forecast-cell-label {{
            font-weight: 600;
            color: #495057;
            margin-bottom: 8px;
            font-size: 13px;
        }}
        
        .forecast-cell-value {{
            font-weight: 700;
            color: #2c3e50;
            font-size: 16px;
            margin-bottom: 5px;
        }}
        
        .forecast-cell-value.user-price {{
            color: #3498db;
        }}
        
        .forecast-cell-value.market-price {{
            color: #9b59b6;
        }}
        
        .forecast-cell-growth {{
            font-size: 12px;
            font-weight: 600;
            padding: 2px 6px;
            border-radius: 4px;
            display: inline-block;
        }}
        
        .forecast-cell-growth.positive {{
            background: #d4edda;
            color: #155724;
        }}
        
        .forecast-cell-growth.negative {{
            background: #f8d7da;
            color: #721c24;
        }}
        
        /* Analysis Sections */
        .trends-analysis-section,
        .forecast-analysis-section {{
            background: #e8f5e8;
            border: 1px solid #c3e6c3;
            border-left: 4px solid #28a745;
            padding: 20px;
            margin: 25px 0;
            border-radius: 4px;
        }}
        
        .trends-analysis-title,
        .forecast-analysis-title {{
            font-size: 16px;
            font-weight: 700;
            color: #155724;
            margin-bottom: 15px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        
        .trends-analysis-content,
        .forecast-analysis-content {{
            color: #155724;
            line-height: 1.6;
            font-size: 13px;
        }}
        
        .trends-analysis-content p,
        .forecast-analysis-content p {{
            margin-bottom: 10px;
        }}
        
        .trends-analysis-content strong,
        .forecast-analysis-content strong {{
            font-weight: 700;
        }}
        
        /* Key Metrics */
        .forecast-metrics-compact-section {{
            margin: 20px 0;
            padding: 20px;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
        }}
        
        .forecast-metrics-compact-title {{
            font-size: 14px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 15px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        
        .forecast-metrics-compact-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }}
        
        .metric-compact-item {{
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #dee2e6;
        }}
        
        .metric-compact-label {{
            font-weight: 600;
            color: #495057;
            font-size: 12px;
        }}
        
        .metric-compact-value {{
            font-weight: 700;
            color: #2c3e50;
            font-size: 12px;
        }}
        
        .metric-compact-value.positive {{
            color: #27ae60;
        }}
        
        .metric-compact-value.negative {{
            color: #e74c3c;
        }}
        
        /* Chart Replacements */
        .chart-container {{
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 40px;
            text-align: center;
            margin: 20px 0;
        }}
        
        .chart-placeholder {{
            background: #ffffff;
            border: 2px dashed #3498db;
            border-radius: 8px;
            padding: 40px;
            color: #6c757d;
            font-style: italic;
        }}
        
        .chart-info {{
            margin-top: 10px;
            font-size: 11px;
            color: #6c757d;
            font-style: italic;
            text-align: center;
        }}
        
        /* Additional spacing */
        .block-spacing {{
            height: 20px;
        }}
        
        .section-spacing {{
            height: 10px;
        }}
        
        /* Price forecast info */
        .price-forecast-date {{
            text-align: center;
            font-weight: 700;
            color: #2c3e50;
            margin: 15px 0;
            font-size: 14px;
        }}
        
        .price-forecast-currency-info {{
            text-align: center;
            font-size: 12px;
            color: #6c757d;
            margin: 10px 0;
        }}
        
        .price-forecast-disclaimer {{
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 4px;
            padding: 15px;
            font-size: 11px;
            color: #856404;
            text-align: center;
            font-style: italic;
            margin: 15px 0;
        }}

        /* Location and Object Info */
        .location-object-info {{
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            margin: 0;
            padding: 25px 30px;
        }}
        
        .location-info-section {{
            margin-bottom: 20px;
        }}
        
        .info-section-title {{
            font-size: 16px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 15px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            border-bottom: 2px solid #3498db;
            padding-bottom: 8px;
        }}
        
        .info-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 15px;
        }}
        
        .info-item {{
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #dee2e6;
        }}
        
        .info-label {{
            font-weight: 600;
            color: #495057;
        }}
        
        .info-value {{
            color: #2c3e50;
            font-weight: 500;
            text-align: right;
        }}

        /* –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ñ—É—Ç–µ—Ä */
        .corporate-footer {{
            background: #f8f9fa;
            border-top: 3px solid #3498db;
            padding: 30px;
            margin-top: 40px;
        }}

        .disclaimer {{
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-left: 4px solid #f39c12;
            padding: 20px;
            margin: 20px 0;
            border-radius: 4px;
        }}

        .disclaimer-title {{
            font-weight: 700;
            color: #856404;
            margin-bottom: 10px;
            font-size: 16px;
        }}

        .disclaimer-text {{
            color: #856404;
            font-size: 13px;
            line-height: 1.5;
        }}

        .verification-section {{
            background: #e8f5e8;
            border: 1px solid #c3e6c3;
            border-left: 4px solid #28a745;
            padding: 20px;
            margin: 20px 0;
            border-radius: 4px;
        }}

        .verification-title {{
            font-weight: 700;
            color: #155724;
            margin-bottom: 10px;
        }}

        .verification-link {{
            color: #0066cc;
            text-decoration: none;
            font-weight: 500;
        }}

        .verification-link:hover {{
            text-decoration: underline;
        }}

        .footer-info {{
            text-align: center;
            color: #6c757d;
            font-size: 12px;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #dee2e6;
        }}

        /* –ë–ª–æ–∫ —Ä–∏—ç–ª—Ç–æ—Ä–∞ */
        .realtor-section {{
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border: 1px solid #dee2e6;
            border-left: 4px solid #3498db;
            padding: 25px;
            margin: 30px 0;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }}

        .realtor-header {{
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }}

        .realtor-photo {{
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid #3498db;
            margin-right: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }}

        .realtor-photo-placeholder {{
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 30px;
            color: #6c757d;
            margin-right: 20px;
            border: 3px solid #3498db;
        }}

        .realtor-info {{
            flex: 1;
        }}

        .realtor-name {{
            font-size: 18px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 5px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}

        .realtor-title {{
            font-size: 14px;
            color: #3498db;
            font-weight: 600;
            margin-bottom: 8px;
        }}

        .realtor-company {{
            font-size: 12px;
            color: #6c757d;
            font-weight: 500;
        }}

        .realtor-web {{
            font-size: 12px;
            color: #6c757d;
            font-weight: 500;
        }}

        .realtor-description {{
            background: #ffffff;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            padding: 15px;
            margin-bottom: 20px;
            font-size: 13px;
            line-height: 1.5;
            color: #495057;
        }}

        .realtor-description strong {{
            color: #2c3e50;
            font-weight: 700;
        }}

        .realtor-contacts {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }}

        .contact-item {{
            display: flex;
            align-items: center;
            padding: 10px;
            background: #ffffff;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            transition: all 0.3s ease;
        }}

        .contact-item:hover {{
            background: #f8f9fa;
            border-color: #3498db;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(52, 152, 219, 0.1);
        }}

        .contact-icon {{
            width: 20px;
            height: 20px;
            margin-right: 10px;
            flex-shrink: 0;
        }}

        .contact-text {{
            font-size: 12px;
            color: #2c3e50;
            font-weight: 500;
        }}

        .contact-link {{
            color: #3498db;
            text-decoration: none;
            font-weight: 600;
        }}

        .contact-link:hover {{
            color: #2980b9;
            text-decoration: underline;
        }}

        @media print {{
            body {{ background: white; }}
            .document {{ border: none; box-shadow: none; }}
            .corporate-header {{ background: #2c3e50 !important; }}
        }}
    </style>
</head>
<body>
    <div class="document">
        <!-- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ -->
        <div class="corporate-header">
            <img src="logo-flt.png" alt="Aaadviser" class="company-logo" />
            <div class="document-title">–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</div>
            <div class="document-subtitle">{location_info}</div>
        </div>

        <!-- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ -->
        <div class="report-metadata">
            <div class="metadata-grid">
                <div>
                    <div class="metadata-item">
                        <span class="metadata-label">–ù–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞:</span>
                        <span class="metadata-value">{report_number}</span>
                    </div>
                    <div class="metadata-item">
                        <span class="metadata-label">–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</span>
                        <span class="metadata-value">{datetime.now().strftime("%d.%m.%Y")}</span>
                    </div>
                    <div class="metadata-item">
                        <span class="metadata-label">–í—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</span>
                        <span class="metadata-value">{datetime.now().strftime("%H:%M:%S")} UTC</span>
                    </div>
                </div>
                <div>
                    <div class="metadata-item">
                        <span class="metadata-label">–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞:</span>
                        <span class="metadata-value">Aaadviser v2.0</span>
                    </div>
                    <div class="metadata-item">
                        <span class="metadata-label">–¢–∏–ø –æ—Ç—á–µ—Ç–∞:</span>
                        <span class="metadata-value">–û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</span>
                    </div>
                    <div class="metadata-item">
                        <span class="metadata-label">–°—Ç–∞—Ç—É—Å:</span>
                        <span class="metadata-value">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω</span>
                    </div>
                </div>
            </div>
            
            <div class="qr-section">
                <div class="qr-code">
                    {qr_code_svg}
                </div>
                <div class="qr-label">QR-–∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞</div>
            </div>
        </div>
        
        <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏ –∏ –æ–±—ä–µ–∫—Ç–µ -->
        <div class="location-object-info">
            <div class="location-info-section">
                <h3 class="info-section-title">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏</h3>
                <div class="info-grid">
                    <div class="info-item">
                        <span class="info-label">–†–µ–≥–∏–æ–Ω:</span>
                        <span class="info-value">{location_info}</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:</span>
                        <span class="info-value">–û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω:</span>
                        <span class="info-value">{report_data.get('bedrooms', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">–≠—Ç–∞–∂:</span>
                        <span class="info-value">{report_data.get('floor', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">–í–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞:</span>
                        <span class="info-value">{report_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">–¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è:</span>
                        <span class="info-value">{report_data.get('heating', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">–¶–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞:</span>
                        <span class="info-value">{report_data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">–ü–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞:</span>
                        <span class="info-value">{report_data.get('area', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞) -->
        {generate_property_section(property_info) if include_property_info else ''}

        <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç—á–µ—Ç–∞ -->
                        <div class="report-content">
                    {report_content}
                </div>
        
        <!-- –ë–ª–æ–∫ —Ä–∏—ç–ª—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω) -->
        {generate_realtor_section(user_info) if include_realtor_info else ''}
                
                <!-- –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ -->
                <script>
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç—Ä–µ–Ω–¥–æ–≤
                    function addChartControls() {{
                        const trendsChartContainer = document.querySelector('#trendsChart').parentElement;
                        if (trendsChartContainer && !trendsChartContainer.querySelector('.chart-controls')) {{
                            const controlsHtml = `
                                <div class="chart-controls" style="margin-bottom: 15px; text-align: center;">
                                    <button class="chart-button active" data-chart-type="sale" onclick="switchTrendsChartType('sale')" style="background: #28a745; color: white; border: none; padding: 8px 16px; margin: 0 5px; border-radius: 4px; cursor: pointer; font-size: 12px;">
                                        –¶–µ–Ω–∞ –º¬≤ –ø—Ä–æ–¥–∞–∂–∏
                                    </button>
                                    <button class="chart-button" data-chart-type="rent" onclick="switchTrendsChartType('rent')" style="background: #6c757d; color: white; border: none; padding: 8px 16px; margin: 0 5px; border-radius: 4px; cursor: pointer; font-size: 12px;">
                                        –¶–µ–Ω–∞ –º¬≤ –∞—Ä–µ–Ω–¥—ã
                                    </button>
                                </div>
                            `;
                            trendsChartContainer.insertAdjacentHTML('beforebegin', controlsHtml);
                        }}
                        
                        const forecastChartContainer = document.querySelector('#forecastChart').parentElement;
                        if (forecastChartContainer && !forecastChartContainer.querySelector('.chart-controls')) {{
                            const controlsHtml = `
                                <div class="chart-controls" style="margin-bottom: 15px; text-align: center;">
                                    <button class="chart-button active" data-chart-type="sale" onclick="switchForecastChartType('sale')" style="background: #9b59b6; color: white; border: none; padding: 8px 16px; margin: 0 5px; border-radius: 4px; cursor: pointer; font-size: 12px;">
                                        –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂–∏
                                    </button>
                                    <button class="chart-button" data-chart-type="rent" onclick="switchForecastChartType('rent')" style="background: #6c757d; color: white; border: none; padding: 8px 16px; margin: 0 5px; border-radius: 4px; cursor: pointer; font-size: 12px;">
                                        –ü—Ä–æ–≥–Ω–æ–∑ –∞—Ä–µ–Ω–¥—ã
                                    </button>
                                </div>
                            `;
                            forecastChartContainer.insertAdjacentHTML('beforebegin', controlsHtml);
                        }}
                    }}
                    
                    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤
                    function switchTrendsChartType(chartType) {{
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                        const buttons = document.querySelectorAll('.chart-controls button[data-chart-type]');
                        buttons.forEach(btn => {{
                            btn.classList.remove('active');
                            btn.style.background = '#6c757d';
                        }});
                        event.target.classList.add('active');
                        event.target.style.background = chartType === 'sale' ? '#28a745' : '#ffc107';
                        
                        const canvas = document.getElementById('trendsChart');
                        if (canvas) {{
                            const chartData = JSON.parse(canvas.getAttribute('data-chart-data'));
                            if (chartData && chartData[chartType]) {{
                                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
                                const newData = chartData[chartType];
                                
                                // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                                const ctx = canvas.getContext('2d');
                                if (window.trendsChart) {{
                                    window.trendsChart.destroy();
                                }}
                                window.trendsChart = new Chart(ctx, {{
                                    type: 'line',
                                    data: newData.data,
                                    options: newData.options
                                }});
                            }}
                        }}
                    }}
                    
                    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    function switchForecastChartType(chartType) {{
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                        const buttons = document.querySelectorAll('.chart-controls button[data-chart-type]');
                        buttons.forEach(btn => {{
                            btn.classList.remove('active');
                            btn.style.background = '#6c757d';
                        }});
                        event.target.classList.add('active');
                        event.target.style.background = chartType === 'sale' ? '#9b59b6' : '#f39c12';
                        
                        const canvas = document.getElementById('forecastChart');
                        if (canvas) {{
                            const chartData = JSON.parse(canvas.getAttribute('data-chart-data'));
                            if (chartData && chartData[chartType]) {{
                                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
                                const newData = chartData[chartType];
                                
                                // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                                const ctx = canvas.getContext('2d');
                                if (window.forecastChart) {{
                                    window.forecastChart.destroy();
                                }}
                                window.forecastChart = new Chart(ctx, {{
                                    type: 'line',
                                    data: newData.data,
                                    options: newData.options
                                }});
                            }}
                        }}
                    }}
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    document.addEventListener('DOMContentLoaded', function() {{
                        setTimeout(addChartControls, 100);
                    }});
                </script>
        
        <!-- –î–∏—Å–∫–ª–µ–π–º–µ—Ä –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
        <div class="corporate-footer">
            <div class="disclaimer">
                <div class="disclaimer-title">–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
                <div class="disclaimer-text">
                    –î–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π Aaadviser –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂. –ê–Ω–∞–ª–∏–∑ –Ω–æ—Å–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏.
                </div>
            </div>
            
            <div class="verification-section">
                <div class="verification-title">–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö</div>
                <div>
                    –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: 
                    <a href="{verification_url}" class="verification-link" target="_blank">{verification_url}</a>
                </div>
            </div>
            
            <div class="footer-info">
                <strong>Aaadviser</strong> - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏<br>
                –û—Ç—á–µ—Ç ‚Ññ{report_number} | –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω {datetime.now().strftime("%d.%m.%Y –≤ %H:%M:%S")}<br>
                ¬© 2024 Aaadviser. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
            </div>
        </div>
    </div>
    
    <script>
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–º –æ—Ç—á–µ—Ç–µ
        document.addEventListener('DOMContentLoaded', function() {{
            restoreCharts();
        }});
        
        function restoreCharts() {{
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ canvas —ç–ª–µ–º–µ–Ω—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            const canvasElements = document.querySelectorAll('canvas[data-chart-data]');
            
            canvasElements.forEach(canvas => {{
                try {{
                    const chartData = JSON.parse(canvas.getAttribute('data-chart-data'));
                    const chartType = canvas.getAttribute('data-chart-type') || 'line';
                    const chartId = canvas.getAttribute('data-chart-id') || 'chart';
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                    if (chartData) {{
                        const ctx = canvas.getContext('2d');
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö —É –Ω–∞—Å –µ—Å—Ç—å
                        let chartConfig;
                        if (chartData.sale && chartData.rent) {{
                            // –£ –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–∞–∂—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            chartConfig = chartData.sale;
                        }} else if (chartData.data) {{
                            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
                            chartConfig = chartData;
                        }} else {{
                            console.error('Invalid chart data format');
                            return;
                        }}
                        
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        if (chartId === 'trendsChart') {{
                            window.trendsChart = new Chart(ctx, {{
                                type: chartType,
                                data: chartConfig.data,
                                options: chartConfig.options
                            }});
                        }} else if (chartId === 'forecastChart') {{
                            window.forecastChart = new Chart(ctx, {{
                                type: chartType,
                                data: chartConfig.data,
                                options: chartConfig.options
                            }});
                        }} else {{
                            new Chart(ctx, {{
                                type: chartType,
                                data: chartConfig.data,
                                options: chartConfig.options || {{
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    plugins: {{
                                        legend: {{
                                            position: 'top',
                                            labels: {{
                                                font: {{
                                                    size: 12
                                                }},
                                                color: '#2c3e50'
                                            }}
                                        }},
                                        title: {{
                                            display: true,
                                            text: getChartTitle(chartId),
                                            color: '#2c3e50',
                                            font: {{
                                                size: 16,
                                                weight: 'bold'
                                            }}
                                        }}
                                    }},
                                    scales: {{
                                        x: {{
                                            grid: {{
                                                color: '#e9ecef'
                                            }},
                                            ticks: {{
                                                color: '#6c757d',
                                                font: {{
                                                    size: 11
                                                }}
                                            }}
                                        }},
                                        y: {{
                                            grid: {{
                                                color: '#e9ecef'
                                            }},
                                            ticks: {{
                                                color: '#6c757d',
                                                font: {{
                                                    size: 11
                                                }}
                                            }}
                                        }}
                                    }}
                                }}
                            }});
                        }}
                    }}
                }} catch (error) {{
                    console.error('Error restoring chart:', error);
                    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
                    showChartPlaceholder(canvas);
                }}
            }});
        }}
        
        function getChartTitle(chartId) {{
            const titles = {{
                'trendsChart': '–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
                'forecastChart': '–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
                'priceChart': '–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω',
                'default': '–ì—Ä–∞—Ñ–∏–∫ –¥–∞–Ω–Ω—ã—Ö'
            }};
            return titles[chartId] || titles['default'];
        }}
        
        function showChartPlaceholder(canvas) {{
            const placeholder = document.createElement('div');
            placeholder.className = 'chart-placeholder';
            placeholder.innerHTML = `
                <div style="font-size: 16px; font-weight: 600; margin-bottom: 10px;">
                    üìä –ì—Ä–∞—Ñ–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                </div>
                <div style="font-size: 13px; color: #6c757d;">
                    –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –≤—ã—à–µ
                </div>
            `;
            canvas.parentNode.replaceChild(placeholder, canvas);
        }}
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª—å—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        let currentPhotoIndex = 0;
        const photoSlides = document.querySelectorAll('.photo-slide');
        const totalPhotos = photoSlides.length;
        
        function showSlide(index) {{
            const slides = document.querySelectorAll('.photo-slide');
            const dots = document.querySelectorAll('.carousel-dot');
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Å–ª–∞–π–¥–æ–≤ –∏ —Ç–æ—á–µ–∫
            slides.forEach(slide => slide.classList.remove('active'));
            dots.forEach(dot => dot.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–º—É —Å–ª–∞–π–¥—É –∏ —Ç–æ—á–∫–µ
            if (slides[index] && dots[index]) {{
                slides[index].classList.add('active');
                dots[index].classList.add('active');
            }}
        }}
        
        function changeSlide(direction) {{
            if (totalPhotos === 0) return;
            
            currentPhotoIndex += direction;
            
            if (currentPhotoIndex >= totalPhotos) {{
                currentPhotoIndex = 0;
            }} else if (currentPhotoIndex < 0) {{
                currentPhotoIndex = totalPhotos - 1;
            }}
            
            showSlide(currentPhotoIndex);
        }}
        
        function currentSlide(index) {{
            currentPhotoIndex = index - 1;
            showSlide(currentPhotoIndex);
        }}
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ —Å–ª–∞–π–¥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)
        if (totalPhotos > 1) {{
            function autoSlide() {{
                changeSlide(1);
            }}
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            let slideInterval = setInterval(autoSlide, 5000);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            const carousel = document.getElementById('photoCarousel');
            if (carousel) {{
                carousel.addEventListener('mouseenter', function() {{
                    clearInterval(slideInterval);
                }});
                
                // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞
                carousel.addEventListener('mouseleave', function() {{
                    slideInterval = setInterval(autoSlide, 5000);
                }});
            }}
        }}
    </script>
</body>
</html>"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(html_template)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        base_url = request.host_url.rstrip('/')
        report_url = f"{base_url}/reports/{filename}"
        
        return jsonify({
            'success': True,
            'report_url': report_url,
            'filename': filename,
            'report_id': report_id,
            'report_number': report_number
        })
        
    except Exception as e:
        logger.error(f"Error saving HTML report: {e}")
        return jsonify({'error': 'Internal error'}), 500

def generate_qr_code_svg(url):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG"""
    try:
        import qrcode
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(url)
        qr.make(fit=True)
        
        # –°–æ–∑–¥–∞–µ–º SVG
        svg_string = qr.make_svg(fill_color="black", back_color="white")
        return svg_string
    except ImportError:
        # Fallback –µ—Å–ª–∏ qrcode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π SVG QR-–∫–æ–¥
        return f'''<svg width="80" height="80" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="25" height="25" fill="white"/>
            <path d="M1 1h3v3H1V1zm5 0h1v1H6V1zm2 0h3v1H8V1zm5 0h1v1h-1V1zm2 0h3v3h-2V1zm5 0h3v3h-3V1zM1 2h1v1H1V2zm3 0h1v1H4V2zm5 0h1v1H9V2zm2 0h1v1h-1V2zm7 0h1v1h-1V2zM1 3h1v1H1V3zm3 0h1v1H4V3zm7 0h1v1h-1V3zm3 0h1v1h-1V3zm5 0h1v1h-1V3zM1 5h3v3H1V5zm5 0h1v1H6V5zm3 0h1v1H9V5zm2 0h1v1h-1V5zm3 0h1v1h-1V5zm6 0h3v3h-3V5zM1 6h1v1H1V6zm3 0h1v1H4V6zm5 0h3v1H9V6zm4 0h1v1h-1V6zm7 0h1v1h-1V6zM1 7h1v1H1V7zm3 0h1v1H4V7zm8 0h1v1h-1V7zm3 0h1v1h-1V7zm5 0h1v1h-1V7zM6 9h1v1H6V9zm2 0h1v1H8V9zm3 0h1v1h-1V9zm2 0h1v1h-1V9zm3 0h1v1h-1V9zm3 0h1v1h-1V9zM1 10h1v1H1v-1zm2 0h1v1H3v-1zm4 0h1v1H7v-1zm4 0h3v1h-3v-1zm5 0h1v1h-1v-1zm3 0h1v1h-1v-1zM2 11h1v1H2v-1zm2 0h3v1H4v-1zm3 0h1v1H7v-1zm3 0h1v1h-1v-1zm4 0h1v1h-1v-1zm3 0h1v1h-1v-1zM1 12h1v1H1v-1zm4 0h1v1H5v-1zm2 0h1v1H7v-1zm4 0h1v1h-1v-1zm2 0h1v1h-1v-1zm4 0h1v1h-1v-1zm3 0h1v1h-1v-1zM3 13h1v1H3v-1zm2 0h1v1H5v-1zm3 0h1v1H8v-1zm4 0h1v1h-1v-1zm3 0h1v1h-1v-1zm3 0h1v1h-1v-1zM1 14h1v1H1v-1zm3 0h1v1H4v-1zm2 0h1v1H6v-1zm3 0h1v1H9v-1zm2 0h1v1h-1v-1zm5 0h1v1h-1v-1zm3 0h1v1h-1v-1zM2 15h1v1H2v-1zm2 0h1v1H4v-1zm3 0h1v1H7v-1zm3 0h1v1h-1v-1zm3 0h1v1h-1v-1zm4 0h1v1h-1v-1zM1 17h3v3H1v-3zm5 0h1v1H6v-1zm3 0h1v1H9v-1zm2 0h1v1h-1v-1zm3 0h1v1h-1v-1zm4 0h1v1h-1v-1zM1 18h1v1H1v-1zm3 0h1v1H4v-1zm5 0h1v1H9v-1zm3 0h1v1h-1v-1zm3 0h1v1h-1v-1zm4 0h1v1h-1v-1zM1 19h1v1H1v-1zm3 0h1v1H4v-1zm6 0h1v1h-1v-1zm2 0h1v1h-1v-1zm4 0h3v1h-3v-1zm4 0h1v1h-1v-1zM6 21h1v1H6v-1zm3 0h1v1H9v-1zm2 0h1v1h-1v-1zm3 0h1v1h-1v-1zm3 0h1v1h-1v-1zm3 0h1v1h-1v-1zM1 22h1v1H1v-1zm2 0h1v1H3v-1zm3 0h1v1H6v-1zm3 0h1v1h-1v-1zm3 0h1v1h-1v-1zm4 0h1v1h-1v-1zm4 0h1v1h-1v-1zM2 23h3v1H2v-1zm3 0h1v1H5v-1zm3 0h1v1H8v-1zm3 0h1v1h-1v-1zm3 0h1v1h-1v-1zm3 0h1v1h-1v-1z" fill="#2c3e50"/>
        </svg>'''

@app.route('/api/send_saved_report_pdf', methods=['POST'])
def api_send_saved_report_pdf():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram (–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤)"""
    data = request.json or {}
    report_id = data.get('report_id')
    telegram_id = data.get('telegram_id')
    if not report_id or not telegram_id:
        return jsonify({'error': 'report_id and telegram_id required'}), 400
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç –∏–∑ –±–∞–∑—ã
        report_result = supabase.table('user_reports').select('full_report').eq('id', report_id).execute()
        if not report_result.data or not report_result.data[0].get('full_report'):
            return jsonify({'error': 'Report not found'}), 404
        report = report_result.data[0]['full_report']
        if not isinstance(report, dict):
            return jsonify({'error': 'Invalid report data'}), 500
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF (–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤)
        from fpdf import FPDF
        import tempfile, shutil
        pdf = FPDF()
        pdf.add_page()
        pdf.add_font('DejaVu', '', 'fonts/DejaVuSans.ttf')
        pdf.add_font('DejaVu', 'B', 'fonts/DejaVuSans-Bold.ttf')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–≤–µ—Ä—Ö—É)
        try:
            pdf.image('logo-sqv.png', x=85, y=10, w=40)  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø
            pdf.ln(35)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –ª–æ–≥–æ—Ç–∏–ø–∞
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}")
            pdf.ln(35)  # –û—Ç—Å—Ç—É–ø –¥–∞–∂–µ –µ—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        
        pdf.set_font('DejaVu', 'B', 16)
        pdf.cell(0, 10, '–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C')
        pdf.ln(10)
        obj = report.get('object') or {}
        pdf.set_font('DejaVu', 'B', 12)
        pdf.cell(0, 10, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ:', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.set_font('DejaVu', '', 10)
        pdf.cell(0, 8, f'–ê–¥—Ä–µ—Å: {obj.get("address", "–ù–µ —É–∫–∞–∑–∞–Ω")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, f'–°–ø–∞–ª–µ–Ω: {obj.get("bedrooms", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, f'–¶–µ–Ω–∞: ‚Ç¨{obj.get("purchase_price", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.ln(5)
        # ROI –∞–Ω–∞–ª–∏–∑
        roi = report.get('roi')
        if roi:
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(0, 10, "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (ROI):", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            st = roi.get('short_term', {})
            lt = roi.get('long_term', {})
            nr = roi.get('no_rent', {})
            pdf.cell(0, 8, f"–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞: ROI {st.get('roi', '-')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f"–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞: ROI {lt.get('roi', '-')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f"–ë–µ–∑ –∞—Ä–µ–Ω–¥—ã: ROI {nr.get('roi', '-')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞
        macro = report.get('macro')
        if macro:
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(0, 10, "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            pdf.cell(0, 8, f"–ò–Ω—Ñ–ª—è—Ü–∏—è: {macro.get('inflation', '-')}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f"–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {macro.get('refi_rate', '-')}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f"–†–æ—Å—Ç –í–í–ü: {macro.get('gdp_growth', '-')}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        
        # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ç—Ä–µ–Ω–¥—ã
        if 'economic_charts' in report:
            economic_charts = report['economic_charts']
            country_name = economic_charts.get('country_name', 'Unknown')
            
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(0, 10, f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã ({country_name}):", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä–µ–Ω–¥—ã
            trends = economic_charts.get('trends', {})
            if trends.get('gdp_trend') is not None:
                gdp_trend = trends['gdp_trend'] * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                trend_text = f"–¢—Ä–µ–Ω–¥ —Ä–æ—Å—Ç–∞ –í–í–ü: {gdp_trend:.1f}%"
                pdf.cell(200, 8, text=trend_text, new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            if trends.get('inflation_trend') is not None:
                inflation_trend = trends['inflation_trend'] * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                trend_text = f"–¢—Ä–µ–Ω–¥ –∏–Ω—Ñ–ª—è—Ü–∏–∏: {inflation_trend:.1f}%"
                pdf.cell(200, 8, text=trend_text, new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
            detailed_calculations = economic_charts.get('detailed_calculations', {})
            if detailed_calculations:
                pdf.ln(5)
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(200, 8, text="–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ç—Ä–µ–Ω–¥–æ–≤:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=8)
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ 3 —Å—Ç–æ–ª–±—Ü–∞
                gdp_calcs = detailed_calculations.get('gdp_calculations', [])
                inflation_calcs = detailed_calculations.get('inflation_calculations', [])
                
                if gdp_calcs or inflation_calcs:
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                    pdf.set_font("DejaVu", 'B', 9)
                    pdf.cell(60, 6, text="–ü–µ—Ä–∏–æ–¥", new_x=XPos.RIGHT, new_y=YPos.TOP)
                    pdf.cell(60, 6, text="–†–∞—Å—á–µ—Ç", new_x=XPos.RIGHT, new_y=YPos.TOP)
                    pdf.cell(60, 6, text="–†–µ–∑—É–ª—å—Ç–∞—Ç", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.set_font("DejaVu", size=8)
                    
                    # –í–í–ü —Ä–∞—Å—á–µ—Ç—ã
                    if gdp_calcs:
                        pdf.cell(200, 4, text="", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                        pdf.set_font("DejaVu", 'B', 8)
                        pdf.cell(200, 5, text="–í–í–ü:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                        pdf.set_font("DejaVu", size=7)
                        
                        for calc in gdp_calcs:
                            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                            pdf.cell(60, 4, text=calc['years'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                            pdf.cell(60, 4, text=calc['calculation'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                            pdf.cell(60, 4, text=calc['result'], new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    # –ò–Ω—Ñ–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç—ã
                    if inflation_calcs:
                        pdf.cell(200, 4, text="", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                        pdf.set_font("DejaVu", 'B', 8)
                        pdf.cell(200, 5, text="–ò–Ω—Ñ–ª—è—Ü–∏—è:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                        pdf.set_font("DejaVu", size=7)
                        
                        for calc in inflation_calcs:
                            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                            pdf.cell(60, 4, text=calc['years'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                            pdf.cell(60, 4, text=calc['calculation'], new_x=XPos.RIGHT, new_y=YPos.TOP)
                            pdf.cell(60, 4, text=calc['result'], new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            interpretations = economic_charts.get('interpretations', {})
            if interpretations and 'ru' in interpretations:
                pdf.ln(5)
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(200, 8, text="–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=10)
                
                ru_interp = interpretations['ru']
                if 'gdp_interpretation' in ru_interp:
                    pdf.cell(200, 6, text=f"–í–í–ü: {ru_interp['gdp_interpretation']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                if 'inflation_interpretation' in ru_interp:
                    pdf.cell(200, 6, text=f"–ò–Ω—Ñ–ª—è—Ü–∏—è: {ru_interp['inflation_interpretation']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                if 'recent_comparison' in ru_interp:
                    pdf.cell(200, 6, text=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: {ru_interp['recent_comparison']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            pdf.ln(5)
        
        # –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if report.get('object') and report['object'].get('address'):
            address = report['object']['address']
            location_data = extract_location_from_address(address)
            
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(0, 10, "–¢—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            
            if location_data['city_name']:
                trends_data, trends_message = get_property_trends_data(
                    location_data['city_name'],
                    location_data['district_name'],
                    location_data['county_name']
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                historical_data = get_historical_property_trends(
                    location_data['city_name'],
                    location_data['district_name'],
                    location_data['county_name']
                )
                
                # –î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–µ
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(0, 8, "–î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=10)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                if trends_message:
                    pdf.cell(0, 6, f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {trends_message}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                if trends_data:
                    if trends_data.get('unit_price_for_sale'):
                        pdf.cell(0, 6, f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): ‚Ç¨{trends_data['unit_price_for_sale']:,.2f}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('price_change_sale'):
                        change_percent = trends_data['price_change_sale'] * 100
                        pdf.cell(0, 6, f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): {change_percent:+.2f}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('listing_period_for_sale'):
                        pdf.cell(0, 6, f"–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: {trends_data['listing_period_for_sale']} –¥–Ω–µ–π", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('count_for_sale'):
                        pdf.cell(0, 6, f"–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {trends_data['count_for_sale']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                else:
                    pdf.cell(0, 6, "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(0, 6, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(0, 6, "–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(0, 6, "–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                # –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                if historical_data:
                    sale_chart_buffer = create_property_trends_chart(historical_data, 'sale', 180, 80)
                    if sale_chart_buffer:
                        pdf.ln(3)
                        pdf.image(sale_chart_buffer, x=15, w=180)
                        pdf.ln(3)
                
                pdf.ln(5)
                
                # –î–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä–µ–Ω–¥–µ (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è)
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(0, 8, "–î–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=10)
                
                if trends_data:
                    if trends_data.get('unit_price_for_rent'):
                        pdf.cell(0, 6, f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): ‚Ç¨{trends_data['unit_price_for_rent']:,.2f}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('price_change_rent'):
                        change_percent = trends_data['price_change_rent'] * 100
                        pdf.cell(0, 6, f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): {change_percent:+.2f}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('listing_period_for_rent'):
                        pdf.cell(0, 6, f"–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: {trends_data['listing_period_for_rent']} –¥–Ω–µ–π", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    if trends_data.get('count_for_rent'):
                        pdf.cell(0, 6, f"–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: {trends_data['count_for_rent']}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    
                    # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                    if trends_data.get('yield'):
                        yield_percent = trends_data['yield'] * 100
                        pdf.cell(0, 6, f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {yield_percent:.2f}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    else:
                        pdf.cell(0, 6, "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                else:
                    pdf.cell(0, 6, "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(0, 6, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(0, 6, "–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(0, 6, "–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                    pdf.cell(0, 6, "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                # –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞—Ä–µ–Ω–¥—É
                if historical_data:
                    rent_chart_buffer = create_property_trends_chart(historical_data, 'rent', 180, 80)
                    if rent_chart_buffer:
                        pdf.ln(3)
                        pdf.image(rent_chart_buffer, x=15, w=180)
                        pdf.ln(3)
            else:
                # –ê–¥—Ä–µ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–Ω/–¥" –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(0, 8, "–î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=10)
                pdf.cell(0, 6, "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(0, 6, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–ø—Ä–æ–¥–∞–∂–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(0, 6, "–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂–∏: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(0, 6, "–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                
                pdf.ln(5)
                
                pdf.set_font("DejaVu", 'B', 12)
                pdf.cell(0, 8, "–î–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_font("DejaVu", size=10)
                pdf.cell(0, 6, "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤ (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(0, 6, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (–∞—Ä–µ–Ω–¥–∞): –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(0, 6, "–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(0, 6, "–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.cell(0, 6, "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: –Ω/–¥", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            
            pdf.ln(5)
        
        # –ù–∞–ª–æ–≥–∏
        taxes = report.get('taxes')
        if taxes:
            pdf.set_font("DejaVu", 'B', 14)
            pdf.cell(0, 10, "–ù–∞–ª–æ–≥–∏ –∏ —Å–±–æ—Ä—ã:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font("DejaVu", size=12)
            pdf.cell(0, 8, f"–ù–∞–ª–æ–≥ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: {taxes.get('transfer_tax', 0)*100}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f"–ì–µ—Ä–±–æ–≤—ã–π —Å–±–æ—Ä: {taxes.get('stamp_duty', 0)*100}%", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.cell(0, 8, f"–ù–æ—Ç–∞—Ä–∏—É—Å: ‚Ç¨{taxes.get('notary', '-')}" , new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        alternatives = report.get('alternatives')
        if isinstance(alternatives, list):
            pdf.set_font('DejaVu', 'B', 14)
            pdf.cell(0, 10, '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏ (5 –ª–µ—Ç):', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 12)
            for alt in alternatives:
                name = alt.get('name', '-')
                yld = alt.get('yield', 0)
                pdf.cell(0, 8, f'{name}: {round(yld*100, 1)}%', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if any(k in report for k in ['yield', 'price_index', 'mortgage_rate', 'global_house_price_index']):
            pdf.set_font('DejaVu', 'B', 14)
            pdf.cell(0, 10, '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 12)
            if 'yield' in report:
                pdf.cell(0, 8, f'Yield: {round(report.get("yield", 0)*100, 1)}%', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'price_index' in report:
                pdf.cell(0, 8, f'–ò–Ω–¥–µ–∫—Å —Ü–µ–Ω: {report.get("price_index", "-")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'mortgage_rate' in report:
                pdf.cell(0, 8, f'–ò–ø–æ—Ç–µ—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {round(report.get("mortgage_rate", 0)*100, 1)}%', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'global_house_price_index' in report:
                pdf.cell(0, 8, f'–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ü–µ–Ω: {report.get("global_house_price_index", "-")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –†–∏—Å–∫–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–π–æ–Ω–∞
        if any(k in report for k in ['risks', 'liquidity', 'district']):
            pdf.set_font('DejaVu', 'B', 14)
            pdf.cell(0, 10, '–†–∏—Å–∫–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–π–æ–Ω–∞:', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.set_font('DejaVu', '', 12)
            risks = report.get('risks')
            if isinstance(risks, list):
                for idx, risk in enumerate(risks):
                    pdf.cell(0, 8, f'–†–∏—Å–∫ {idx+1}: {risk}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'liquidity' in report:
                pdf.cell(0, 8, f'–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {report.get("liquidity", "-")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            if 'district' in report:
                pdf.cell(0, 8, f'–†–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–π–æ–Ω–∞: {report.get("district", "-")}', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
        pdf.output(temp_file.name)
        temp_file.close()
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º PDF –≤ static/reports/
        reports_dir = os.path.join(app.root_path, 'static', 'reports')
        os.makedirs(reports_dir, exist_ok=True)
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏
        file_id = ''.join(random.choices(string.digits, k=12))
        final_pdf_name = f'{file_id}.pdf'
        final_pdf_path = os.path.join(reports_dir, final_pdf_name)
        shutil.move(temp_file.name, final_pdf_path)
        pdf_url = f'/static/reports/{final_pdf_name}'
        supabase.table('user_reports').update({'pdf_path': pdf_url}).eq('id', report_id).execute()
        # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é)
        send_status = None
        if telegram_id:
            send_status = send_pdf_to_telegram(final_pdf_path, telegram_id)
        return jsonify({
            'success': True,
            'pdf_path': pdf_url,
            'telegram_send_status': send_status,
            'message': 'PDF —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'
        })
    except Exception as e:
        logger.error(f"Error generating/sending PDF: {e}")
        return jsonify({'error': 'Internal error'}), 500

@app.route('/api/admin_balance_100', methods=['POST'])
def api_admin_balance_100():
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    user_result = supabase.table('users').select('*').eq('telegram_id', telegram_id).execute()
    user = user_result.data[0] if user_result.data else None
    if not user or user.get('user_status') != 'admin':
        return jsonify({'error': 'not admin'}), 403
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    try:
        supabase.table('users').update({'balance': 100}).eq('telegram_id', telegram_id).execute()
        return jsonify({'success': True, 'balance': 100})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin_users_stats', methods=['GET'])
def api_admin_users_stats():
    import datetime
    from dateutil.relativedelta import relativedelta
    now = datetime.now()
    today = now.date()
    week_ago = today - datetime.timedelta(days=7)
    month_ago = today - relativedelta(months=1)
    quarter_ago = today - relativedelta(months=3)
    year_ago = today - relativedelta(years=1)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = supabase.table('users').select('*').execute().data or []
    user_reports = supabase.table('user_reports').select('*').execute().data or []
    tariffs = supabase.table('tariffs').select('*').execute().data or []

    # –§–∏–ª—å—Ç—Ä—ã
    non_admin_users = [u for u in users if u.get('user_status') != 'admin']
    admin_users = [u for u in users if u.get('user_status') == 'admin']
    def parse_date(val):
        if not val: return None
        try:
            return datetime.strptime(val[:10], '%Y-%m-%d').date()
        except Exception:
            return None

    # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    def count_new(users, since):
        return sum(1 for u in users if parse_date(u.get('created_at')) and parse_date(u.get('created_at')) >= since)

    # –ë–∞–ª–∞–Ω—Å—ã
    total_balance = sum(u.get('balance', 0) or 0 for u in non_admin_users)
    expired_users = [u for u in non_admin_users if (parse_date(u.get('period_end')) is None or parse_date(u.get('period_end')) < today) and u.get('period_end')]
    active_users = [u for u in non_admin_users if not ((parse_date(u.get('period_end')) is None or parse_date(u.get('period_end')) < today) and u.get('period_end'))]
    expired_balance = sum(u.get('balance', 0) or 0 for u in expired_users)
    active_balance = total_balance - expired_balance

    # –û—Ç—á—ë—Ç—ã
    def count_reports(since):
        return sum(1 for r in user_reports if parse_date(r.get('created_at')) and parse_date(r.get('created_at')) >= since and not r.get('deleted_at'))
    def count_deleted_reports():
        return sum(1 for r in user_reports if r.get('deleted_at'))
    def reports_by_users(users_list):
        ids = set(u.get('telegram_id') for u in users_list)
        return [r for r in user_reports if r.get('user_id') in ids]
    expired_reports = reports_by_users(expired_users)
    active_reports = reports_by_users(active_users)
    avg_expired_reports = len(expired_reports) / len(expired_users) if expired_users else 0
    # –°—Ç–æ–∏–º–æ—Å—Ç—å full –∏–∑ tariffs
    full_price = 0
    for t in tariffs:
        if t.get('name') == 'full':
            full_price = t.get('price', 0)
            break
    active_reports_count = len(active_reports)
    active_reports_cost = active_reports_count * full_price

    return jsonify({
        'total_users': len(non_admin_users),
        'new_users_week': count_new(non_admin_users, week_ago),
        'new_users_month': count_new(non_admin_users, month_ago),
        'new_users_quarter': count_new(non_admin_users, quarter_ago),
        'new_users_year': count_new(non_admin_users, year_ago),
        'total_balance': total_balance,
        'expired_balance': expired_balance,
        'active_balance': active_balance,
        'reports_week': count_reports(week_ago),
        'reports_month': count_reports(month_ago),
        'reports_quarter': count_reports(quarter_ago),
        'reports_year': count_reports(year_ago),
        'deleted_reports': count_deleted_reports(),
        'expired_reports_count': len(expired_reports),
        'avg_expired_reports': avg_expired_reports,
        'active_reports_count': active_reports_count,
        'active_reports_cost': active_reports_cost,
        'admin_count': len(admin_users),
    })

@app.route('/api/admin_publication', methods=['POST'])
def api_admin_publication():
    import requests
    data = request.json or {}
    text = data.get('text', '').strip()
    only_admins = data.get('only_admins', True)
    save_to_db = data.get('save_to_db', False)
    auto_translate = data.get('auto_translate', False)
    test_send = data.get('test_send', False)
    if not text:
        return jsonify({'error': 'text required'}), 400
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = supabase.table('users').select('telegram_id, user_status, language').execute().data or []
    # –ü–æ–ª—É—á–∞–µ–º OpenAI API –∫–ª—é—á
    openai_key = get_openai_api_key()
    # –Ø–∑—ã–∫–∏ –∏ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    lang_map = {'ru': 'ru', 'en': 'us', 'de': 'de', 'fr': 'ft', 'tr': 'tr'}
    translations = {'ru': text, 'us': '', 'de': '', 'ft': '', 'tr': ''}
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    print(f"DEBUG: auto_translate={auto_translate}, openai_key={'–µ—Å—Ç—å' if openai_key else '–Ω–µ—Ç'}")
    # –í—Ä–µ–º–µ–Ω–Ω–æ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if True:
        logger.info(f"auto_translate={auto_translate}, openai_key={'–µ—Å—Ç—å' if openai_key else '–Ω–µ—Ç'}")
        def gpt_translate(prompt, target_lang):
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è {target_lang}")
            if not OPENAI_AVAILABLE:
                logger.warning("OpenAI library not available, using fallback")
                return f"[–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {target_lang}]"
            try:
                from openai import OpenAI
                client = OpenAI(api_key=openai_key)
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": f"You are a professional translator. Translate the following text to {target_lang} (no explanation, only translation):"},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=1024,
                    temperature=0.3
                )
                result = response.choices[0].message.content.strip()
                logger.info(f"–ü–µ—Ä–µ–≤–æ–¥ {target_lang}: {result}")
                return result
            except Exception as e:
                logger.error(f"OpenAI API exception for {target_lang}: {e}")
                return f"[–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ {target_lang}]"
        translations['us'] = gpt_translate(text, 'English')
        translations['de'] = gpt_translate(text, 'German')
        translations['ft'] = gpt_translate(text, 'French')
        translations['tr'] = gpt_translate(text, 'Turkish')
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    recipients = []
    if test_send:
        # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã, –Ω–æ –∫–∞–∂–¥–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        recipients = [u for u in users if u.get('user_status') == 'admin']
    elif only_admins:
        recipients = [u for u in users if u.get('user_status') == 'admin']
    else:
        recipients = users
    # –†–∞—Å—Å—ã–ª–∫–∞
    bot_token = '7215676549:AAFS86JbRCqwzTKQG-dF96JX-C1aWNvBoLo'
    send_url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    lang_stats = {'ru': 0, 'us': 0, 'de': 0, 'ft': 0, 'tr': 0}
    admin_count = 0
    user_count = 0
    total = 0
    for u in recipients:
        tid = u.get('telegram_id')
        if not tid:
            continue
        lang = (u.get('language') or 'ru')[:2]
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ ‚Äî –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        if test_send:
            for l, field in lang_map.items():
                msg = translations[field] if translations[field] else text
                data_send = {'chat_id': tid, 'text': msg, 'parse_mode': 'HTML', 'disable_web_page_preview': True}
                resp = requests.post(send_url, data=data_send)
                if resp.status_code == 200 and resp.json().get('ok'):
                    lang_stats[field] += 1
                    if u.get('user_status') == 'admin':
                        admin_count += 1
                    else:
                        user_count += 1
                    total += 1
        else:
            # –û–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ‚Äî –∫–∞–∂–¥–æ–º—É –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –µ—Å—Ç—å
            field = lang_map.get(lang, 'ru')
            msg = translations[field] if translations[field] else text
            data_send = {'chat_id': tid, 'text': msg, 'parse_mode': 'HTML', 'disable_web_page_preview': True}
            resp = requests.post(send_url, data=data_send)
            if resp.status_code == 200 and resp.json().get('ok'):
                lang_stats[field] += 1
                if u.get('user_status') == 'admin':
                    admin_count += 1
                else:
                    user_count += 1
                total += 1
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if save_to_db or test_send:
        supabase.table('texts_promo').insert({
            'base': text,
            'ru': translations['ru'],
            'us': translations['us'],
            'de': translations['de'],
            'ft': translations['ft'],
            'tr': translations['tr'],
            'qtty_ru': lang_stats['ru'],
            'qtty_us': lang_stats['us'],
            'qtty_de': lang_stats['de'],
            'qtty_ft': lang_stats['ft'],
            'qtty_tr': lang_stats['tr'],
        }).execute()
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É-–æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result_message = f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {user_count}\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {admin_count}"
    return jsonify({
        'success': True,
        'total': total,
        'users': user_count,
        'admins': admin_count,
        'result_message': result_message,
        'lang_stats': lang_stats
    })

@app.route('/api/admin_add_apikey', methods=['POST'])
def api_admin_add_apikey():
    data = request.json or {}
    key_name = data.get('key_name', '').strip()
    key_value = data.get('key_value', '').strip()
    if not key_name or not key_value:
        return jsonify({'error': 'key_name and key_value required'}), 400
    # –ù–µ –¥–∞—ë–º –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    used_keys = ['SUPABASE_URL', 'SUPABASE_ANON_KEY', 'TELEGRAM_BOT_TOKEN', 'GOOGLE_MAPS_API_KEY']
    if key_name in used_keys:
        return jsonify({'error': '–≠—Ç–æ—Ç –∫–ª—é—á —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º'}), 400
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–ª—é—á
    exists = supabase.table('api_keys').select('*').eq('key_name', key_name).execute().data
    if exists:
        return jsonify({'error': '–ö–ª—é—á —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400
    try:
        supabase.table('api_keys').insert({'key_name': key_name, 'key_value': key_value}).execute()
        return jsonify({'success': True})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin_list_apikeys', methods=['GET'])
def api_admin_list_apikeys():
    used_keys = ['SUPABASE_URL', 'SUPABASE_ANON_KEY', 'TELEGRAM_BOT_TOKEN', 'GOOGLE_MAPS_API_KEY']
    all_keys = supabase.table('api_keys').select('*').execute().data or []
    new_keys = [k for k in all_keys if k.get('key_name') not in used_keys]
    return jsonify({'keys': new_keys})

# === –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print("\n=== Flask ROUTES ===")
    for rule in app.url_map.iter_rules():
        print(f"{rule.methods} {rule}")
    print("====================\n")
    app.run(host='0.0.0.0', port=8080, debug=False)

@app.route('/webapp_admin')
def webapp_admin():
    with open('webapp_admin.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_admin_users')
def webapp_admin_users():
    with open('webapp_admin_users.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_admin_settings')
def webapp_admin_settings():
    with open('webapp_admin_settings.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_admin_publication')
def webapp_admin_publication():
    with open('webapp_admin_publication.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_about')
def webapp_about():
    with open('webapp_about.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_instruction')
def webapp_instruction():
    with open('webapp_instruction.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_geography')
def webapp_geography():
    with open('webapp_geography.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_support')
def webapp_support():
    with open('webapp_support.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_referral')
def webapp_referral():
    with open('webapp_referral.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_additional_data')
def webapp_additional_data():
    with open('webapp_additional_data.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/webapp_full_report')
def webapp_full_report():
    with open('webapp_full_report.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/api/referral_info', methods=['POST'])
def api_referral_info():
    data = request.json or {}
    telegram_id_raw = data.get('telegram_id')
    if telegram_id_raw is None:
        return jsonify({'error': 'telegram_id required'}), 400
    try:
        telegram_id = int(telegram_id_raw)
    except (TypeError, ValueError):
        return jsonify({'error': 'Invalid telegram_id'}), 400
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_result = supabase.table('users').select('*').eq('telegram_id', telegram_id).execute()
    user = user_result.data[0] if user_result.data else None
    if not user:
        return jsonify({'error': 'User not found'}), 404
    invite_code = user.get('invite_code')
    # –ï—Å–ª–∏ invite_code –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
    if not invite_code:
        def generate_invite_code():
            return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ invite_code
        while True:
            invite_code = generate_invite_code()
            code_check = supabase.table('users').select('invite_code').eq('invite_code', invite_code).execute()
            if not code_check.data:
                break
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º invite_code
        supabase.table('users').update({'invite_code': invite_code}).eq('telegram_id', telegram_id).execute()
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    bot_link = f'https://t.me/Aaadviser_bot?start={invite_code}'
    # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ –∏–∑ tariffs
    tariffs_result = supabase.table('tariffs').select('*').execute()
    bonus = None
    if tariffs_result.data:
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å —Ç–∏–ø–æ–º invite –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–º
        for tariff in tariffs_result.data:
            if tariff.get('type') == 'invite' or tariff.get('name') == 'invite' or 'invite' in str(tariff.get('description', '')).lower():
                bonus = tariff.get('price')
                break
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
        if bonus is None and tariffs_result.data:
            bonus = tariffs_result.data[0].get('price')
    referral_terms = (
        f'–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n'
        f'–ó–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∏ –æ—Ñ–æ—Ä–º–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –Ω–∞ –±–∞–ª–∞–Ω—Å.'
    )
    if bonus:
        referral_terms += f' –†–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞: {bonus}.'
    referral_terms += '\n–ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–º.'
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    invited_result = supabase.table('users').select('*').eq('referal', invite_code).execute()
    invited = []
    for invited_user in invited_result.data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç
        reports_result = supabase.table('reports').select('*').eq('user_id', invited_user['telegram_id']).eq('is_paid', True).execute()
        completed = bool(reports_result.data)
        invited.append({
            'tg_name': invited_user.get('tg_name'),
            'username': invited_user.get('username'),
            'telegram_id': invited_user.get('telegram_id'),
            'completed': completed
        })
    return jsonify({
        'invite_code': invite_code,
        'bot_link': bot_link,
        'referral_terms': referral_terms,
        'invited': invited
    })

@app.route('/api/tariffs', methods=['GET'])
def api_tariffs():
    try:
        tariffs_result = supabase.table('tariffs').select('*').execute()
        tariffs = []
        for t in tariffs_result.data:
            tariffs.append({
                'description': t.get('description'),
                'price': t.get('price'),
                'tariff_type': t.get('tariff_type'),
                'period_days': t.get('period_days'),
                'name': t.get('name'),
            })
        return jsonify({'tariffs': tariffs})
    except Exception as e:
        logger.error(f"Error loading tariffs: {e}")
        return jsonify({'tariffs': []}), 500

@app.route('/api/economic_data', methods=['POST'])
def api_economic_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–í–í–ü –∏ –∏–Ω—Ñ–ª—è—Ü–∏—è) –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    data = request.json or {}
    country_code = data.get('country_code', 'TUR')
    years_back = data.get('years_back', 10)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        economic_data = get_economic_data(country_code, years_back)
        chart_data = create_economic_chart_data(economic_data)
        
        return jsonify({
            'success': True,
            'economic_data': economic_data,
            'chart_data': chart_data,
            'country_code': country_code,
            'years_back': years_back
        })
        
    except Exception as e:
        logger.error(f"Error in economic_data API: {e}")
        return jsonify({'error': 'Internal error'}), 500

def create_economic_chart_image(economic_charts_data):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)
    """
    logger.info("–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è")
    return None

def create_chart_image_for_pdf(chart_data, title, width=180, height=100):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ PDF (–∑–∞–≥–ª—É—à–∫–∞)
    """
    logger.info(f"–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è: {title}")
    return None

def get_market_data_by_location_ids(location_codes, target_year=None, target_month=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ ID –ª–æ–∫–∞—Ü–∏–π
    
    Args:
        location_codes (dict): –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π (country_id, city_id, district_id, county_id)
        target_year (int): –ì–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)
        target_month (int): –ú–µ—Å—è—Ü (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)
    
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    """
    try:
        from datetime import datetime
        
        # –ï—Å–ª–∏ –≥–æ–¥ –∏ –º–µ—Å—è—Ü –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ
        if target_year is None or target_month is None:
            now = datetime.now()
            target_year = target_year or now.year
            target_month = target_month or now.month
        
        logger.info(f"–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –¥–ª—è {target_year}-{target_month:02d}")
        logger.info(f"–ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π: {location_codes}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        required_codes = ['country_id', 'city_id', 'district_id', 'county_id']
        missing_codes = [code for code in required_codes if not location_codes.get(code)]
        if missing_codes:
            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π: {missing_codes}")
            return None
        
        market_data = {
            'property_trends': None,
            'age_data': None,
            'floor_segment_data': None,
            'general_data': None,
            'heating_data': None,
            'house_type_data': None
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ property_trends
        try:
            query = supabase.table('property_trends').select('*')
            if location_codes.get('country_id'):
                query = query.eq('country_id', location_codes['country_id'])
            if location_codes.get('city_id'):
                query = query.eq('city_id', location_codes['city_id'])
            if location_codes.get('district_id'):
                query = query.eq('district_id', location_codes['district_id'])
            if location_codes.get('county_id'):
                query = query.eq('county_id', location_codes['county_id'])
            
            result = query.execute()
            if result.data:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
                valid_records = [r for r in result.data if r.get('trend_date')]
                if valid_records:
                    # –ë–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–ø–∏—Å—å
                    latest_record = max(valid_records, key=lambda x: x.get('trend_date', ''))
                    market_data['property_trends'] = latest_record
                    logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ property_trends: {len(result.data)} –∑–∞–ø–∏—Å–µ–π, –≤—ã–±—Ä–∞–Ω–∞ —Å–∞–º–∞—è —Å–≤–µ–∂–∞—è: {latest_record.get('trend_date')}")
                else:
                    logger.warning("–í—Å–µ –∑–∞–ø–∏—Å–∏ property_trends –∏–º–µ—é—Ç –ø—É—Å—Ç—ã–µ –¥–∞—Ç—ã")
                    market_data['property_trends'] = result.data[0] if result.data else None
            else:
                logger.info("–î–∞–Ω–Ω—ã–µ property_trends –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è property_trends: {e}")
            market_data['property_trends'] = None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ age_data
        try:
            query = supabase.table('age_data').select('*')
            if location_codes.get('country_id'):
                query = query.eq('country_id', location_codes['country_id'])
            if location_codes.get('city_id'):
                query = query.eq('city_id', location_codes['city_id'])
            if location_codes.get('district_id'):
                query = query.eq('district_id', location_codes['district_id'])
            if location_codes.get('county_id'):
                query = query.eq('county_id', location_codes['county_id'])
            
            result = query.execute()
            if result.data:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ listing_type –∏ –±–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                records_by_type = {}
                for record in result.data:
                    listing_type = record.get('listing_type')
                    if listing_type:
                        if listing_type not in records_by_type:
                            records_by_type[listing_type] = record
                        else:
                            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
                            existing_date = records_by_type[listing_type].get('trend_date', '')
                            current_date = record.get('trend_date', '')
                            if existing_date and current_date and current_date > existing_date:
                                records_by_type[listing_type] = record
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ listing_type)
                market_data['age_data'] = list(records_by_type.values())
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ age_data: {len(result.data)} –∑–∞–ø–∏—Å–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ {len(records_by_type)} —Ç–∏–ø–∞–º –≤–æ–∑—Ä–∞—Å—Ç–∞")
            else:
                logger.info("–î–∞–Ω–Ω—ã–µ age_data –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è age_data: {e}")
            market_data['age_data'] = None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ floor_segment_data
        try:
            query = supabase.table('floor_segment_data').select('*')
            if location_codes.get('country_id'):
                query = query.eq('country_id', location_codes['country_id'])
            if location_codes.get('city_id'):
                query = query.eq('city_id', location_codes['city_id'])
            if location_codes.get('district_id'):
                query = query.eq('district_id', location_codes['district_id'])
            if location_codes.get('county_id'):
                query = query.eq('county_id', location_codes['county_id'])
            
            result = query.execute()
            if result.data:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ listing_type –∏ –±–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                records_by_type = {}
                for record in result.data:
                    listing_type = record.get('listing_type')
                    if listing_type:
                        if listing_type not in records_by_type:
                            records_by_type[listing_type] = record
                        else:
                            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
                            existing_date = records_by_type[listing_type].get('trend_date', '')
                            current_date = record.get('trend_date', '')
                            if existing_date and current_date and current_date > existing_date:
                                records_by_type[listing_type] = record
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ listing_type)
                market_data['floor_segment_data'] = list(records_by_type.values())
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ floor_segment_data: {len(result.data)} –∑–∞–ø–∏—Å–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ {len(records_by_type)} —Ç–∏–ø–∞–º —ç—Ç–∞–∂–µ–π")
            else:
                logger.info("–î–∞–Ω–Ω—ã–µ floor_segment_data –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è floor_segment_data: {e}")
            market_data['floor_segment_data'] = None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ general_data
        try:
            query = supabase.table('general_data').select('*')
            if location_codes.get('country_id'):
                query = query.eq('country_id', location_codes['country_id'])
            if location_codes.get('city_id'):
                query = query.eq('city_id', location_codes['city_id'])
            if location_codes.get('district_id'):
                query = query.eq('district_id', location_codes['district_id'])
            if location_codes.get('county_id'):
                query = query.eq('county_id', location_codes['county_id'])
            
            result = query.execute()
            if result.data:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
                valid_records = [r for r in result.data if r.get('trend_date')]
                if valid_records:
                    # –ë–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–ø–∏—Å—å
                    latest_record = max(valid_records, key=lambda x: x.get('trend_date', ''))
                    market_data['general_data'] = latest_record
                    logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ general_data: {len(result.data)} –∑–∞–ø–∏—Å–µ–π, –≤—ã–±—Ä–∞–Ω–∞ —Å–∞–º–∞—è —Å–≤–µ–∂–∞—è: {latest_record.get('trend_date')}")
                else:
                    logger.warning("–í—Å–µ –∑–∞–ø–∏—Å–∏ general_data –∏–º–µ—é—Ç –ø—É—Å—Ç—ã–µ –¥–∞—Ç—ã")
                    market_data['general_data'] = result.data[0] if result.data else None
            else:
                logger.info("–î–∞–Ω–Ω—ã–µ general_data –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è general_data: {e}")
            market_data['general_data'] = None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ heating_data
        try:
            query = supabase.table('heating_data').select('*')
            if location_codes.get('country_id'):
                query = query.eq('country_id', location_codes['country_id'])
            if location_codes.get('city_id'):
                query = query.eq('city_id', location_codes['city_id'])
            if location_codes.get('district_id'):
                query = query.eq('district_id', location_codes['district_id'])
            if location_codes.get('county_id'):
                query = query.eq('county_id', location_codes['county_id'])
            
            result = query.execute()
            if result.data:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ listing_type –∏ –±–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                records_by_type = {}
                for record in result.data:
                    listing_type = record.get('listing_type')
                    if listing_type:
                        if listing_type not in records_by_type:
                            records_by_type[listing_type] = record
                        else:
                            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
                            existing_date = records_by_type[listing_type].get('trend_date', '')
                            current_date = record.get('trend_date', '')
                            if existing_date and current_date and current_date > existing_date:
                                records_by_type[listing_type] = record
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ listing_type)
                market_data['heating_data'] = list(records_by_type.values())
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ heating_data: {len(result.data)} –∑–∞–ø–∏—Å–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ {len(records_by_type)} —Ç–∏–ø–∞–º –æ—Ç–æ–ø–ª–µ–Ω–∏—è")
            else:
                logger.info("–î–∞–Ω–Ω—ã–µ heating_data –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è heating_data: {e}")
            market_data['heating_data'] = None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ house_type_data
        try:
            query = supabase.table('house_type_data').select('*')
            if location_codes.get('country_id'):
                query = query.eq('country_id', location_codes['country_id'])
            if location_codes.get('city_id'):
                query = query.eq('city_id', location_codes['city_id'])
            if location_codes.get('district_id'):
                query = query.eq('district_id', location_codes['district_id'])
            if location_codes.get('county_id'):
                query = query.eq('county_id', location_codes['county_id'])
            
            result = query.execute()
            if result.data:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ listing_type –∏ –±–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                records_by_type = {}
                for record in result.data:
                    listing_type = record.get('listing_type')
                    if listing_type:
                        if listing_type not in records_by_type:
                            records_by_type[listing_type] = record
                        else:
                            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
                            existing_date = records_by_type[listing_type].get('trend_date', '')
                            current_date = record.get('trend_date', '')
                            if existing_date and current_date and current_date > existing_date:
                                records_by_type[listing_type] = record
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ listing_type)
                market_data['house_type_data'] = list(records_by_type.values())
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ house_type_data: {len(result.data)} –∑–∞–ø–∏—Å–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ {len(records_by_type)} —Ç–∏–ø–∞–º —Å–ø–∞–ª–µ–Ω")
            else:
                logger.info("–î–∞–Ω–Ω—ã–µ house_type_data –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è house_type_data: {e}")
            market_data['house_type_data'] = None
        
        return market_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞: {e}")
        return None

def get_location_codes(city_name, district_name, county_name):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã locations –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
    
    Args:
        city_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        district_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
        county_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–∞/–ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–¥–∞–º–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    """
    try:
        location_codes = {
            'city_code': None,
            'district_code': None,
            'county_code': None,
            'country_code': None
        }
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        query = supabase.table('locations').select('*')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        if city_name:
            query = query.eq('city_name', city_name)
        if district_name:
            query = query.eq('district_name', district_name)
        if county_name:
            query = query.eq('county_name', county_name)
            
        result = query.execute()
        
        if result.data:
            # –ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å
            record = result.data[0]
            location_codes['city_code'] = record.get('city_id')
            location_codes['district_code'] = record.get('district_id')
            location_codes['county_code'] = record.get('county_id')
            location_codes['country_code'] = record.get('country_id')
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π: {location_codes}")
            return location_codes
        else:
            # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            logger.warning(f"–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
            
            # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–π–æ–Ω—É
            if district_name:
                district_result = supabase.table('locations').select('*').eq('district_name', district_name).execute()
                if district_result.data:
                    location_codes['district_code'] = district_result.data[0].get('district_id')
            
            # –ü–æ–∏—Å–∫ –ø–æ –æ–∫—Ä—É–≥—É
            if county_name:
                county_result = supabase.table('locations').select('*').eq('county_name', county_name).execute()
                if county_result.data:
                    location_codes['county_code'] = county_result.data[0].get('county_id')
            
            # –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É
            if city_name:
                city_result = supabase.table('locations').select('*').eq('city_name', city_name).execute()
                if city_result.data:
                    location_codes['city_code'] = city_result.data[0].get('city_id')
        
        return location_codes
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –ª–æ–∫–∞—Ü–∏–π: {e}")
        return None

def get_property_trends_data(city_name, district_name, county_name):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã property_trends
    
    Args:
        city_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        district_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
        county_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–∞/–ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
    
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞
        from datetime import datetime
        current_date = datetime.now()
        current_year = current_date.year
        current_month = current_date.month
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —è–Ω–≤–∞—Ä—å, –±–µ—Ä–µ–º –¥–µ–∫–∞–±—Ä—å –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
        if current_month == 1:
            target_year = current_year - 1
            target_month = 12
        else:
            target_year = current_year
            target_month = current_month - 1
        
        logger.info(f"–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è: {city_name}, {district_name}, {county_name}")
        logger.info(f"–¶–µ–ª–µ–≤–æ–π –ø–µ—Ä–∏–æ–¥: {target_month}/{target_year}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π
        location_codes = get_location_codes(city_name, district_name, county_name)
        
        if not location_codes:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π")
            return None
        
        # –ö–∞—Å–∫–∞–¥–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
        trends_data, message = get_cascading_trends_data(location_codes, target_year, target_month)
        
        if trends_data:
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤: {message}")
            return trends_data, message
        else:
            logger.warning(f"–î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {message}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
            fallback_data = {
                'property_year': target_year,
                'property_month': target_month,
                'avg_price_per_sqm': 15000,
                'price_change_percent': 4.2,
                'transaction_count': 25,
                'days_on_market': 68,
                'rental_yield': 8.1,
                'price_trend': 'stable',
                'market_activity': 'moderate'
            }
            return fallback_data, "Fallback –¥–∞–Ω–Ω—ã–µ (–Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {e}")
        return None, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"

def get_cascading_trends_data(location_codes, target_year, target_month):
    """
    –ö–∞—Å–∫–∞–¥–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ —Å fallback –ª–æ–≥–∏–∫–æ–π
    
    Args:
        location_codes (dict): –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–¥–∞–º–∏ –ª–æ–∫–∞—Ü–∏–π
        target_year (int): –¶–µ–ª–µ–≤–æ–π –≥–æ–¥
        target_month (int): –¶–µ–ª–µ–≤–æ–π –º–µ—Å—è—Ü
    
    Returns:
        tuple: (data, message) - –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∏–ø–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        city_code = location_codes.get('city_code')
        district_code = location_codes.get('district_code')
        county_code = location_codes.get('county_code')
        country_id = 1  # T√ºrkiye
        
        # 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if city_code and district_code and county_code:
            query = supabase.table('property_trends').select('*').eq('city_id', city_code).eq('district_id', district_code).eq('county_id', county_code).eq('property_year', target_year).eq('property_month', target_month)
            result = query.execute()
            
            if result.data:
                logger.info("–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é")
                return result.data[0], f"–î–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–π–æ–Ω—É (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)"
        
        # 2. –ï—Å–ª–∏ district_code –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ county_code
        if county_code:
            query = supabase.table('property_trends').select('*').eq('county_id', county_code).is_('city_id', 'null').is_('district_id', 'null').eq('property_year', target_year).eq('property_month', target_month)
            result = query.execute()
            
            if result.data:
                logger.info("–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–∫—Ä—É–≥—É")
                return result.data[0], f"–î–∞–Ω–Ω—ã–µ –ø–æ –æ–∫—Ä—É–≥—É (county_id={county_code})"
        
        # 3. –ï—Å–ª–∏ county_code –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ city_code
        if city_code:
            query = supabase.table('property_trends').select('*').eq('city_id', city_code).is_('district_id', 'null').is_('county_id', 'null').eq('property_year', target_year).eq('property_month', target_month)
            result = query.execute()
            
            if result.data:
                logger.info("–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥—É")
                return result.data[0], f"–î–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥—É (city_id={city_code})"
        
        # 4. –ï—Å–ª–∏ city_code –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ country_id
        query = supabase.table('property_trends').select('*').eq('country_id', country_id).is_('city_id', 'null').is_('district_id', 'null').is_('county_id', 'null').eq('property_year', target_year).eq('property_month', target_month)
        result = query.execute()
        
        if result.data:
            logger.info("–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ")
            return result.data[0], f"–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ (country_id={country_id})"
        
        # 5. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        logger.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö")
        return None, "–ü–æ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö"

def get_nominatim_location(address):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Nominatim API
    
    Args:
        address (str): –ê–¥—Ä–µ—Å –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Returns:
        dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ None
    """
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ Nominatim API
        url = "https://nominatim.openstreetmap.org/search"
        params = {
            'q': address,
            'format': 'json',
            'addressdetails': 1,
            'limit': 1
        }
        headers = {
            'User-Agent': 'Aaadviser/1.0'
        }
        
        try:
            logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ Nominatim API: {url}")
            logger.info(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {params}")
            response = requests.get(url, params=params, headers=headers, timeout=30)
            logger.info(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Nominatim API: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ Nominatim: {len(str(result))} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                logger.error(f"‚ùå Nominatim API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                return None
                
        except requests.exceptions.Timeout:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Nominatim API (30 —Å–µ–∫—É–Ω–¥)")
            return None
        except requests.exceptions.ConnectionError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Nominatim API: {e}")
            return None
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Nominatim API: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Nominatim API: {e}")
            return None
        
        if result and len(result) > 0:
            location = result[0]
            address_details = location.get('address', {})
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            location_data = {
                'country': address_details.get('country'),
                'country_code': address_details.get('country_code'),
                'city': address_details.get('city') or address_details.get('town'),
                'district': address_details.get('suburb') or address_details.get('neighbourhood'),
                'county': address_details.get('county') or address_details.get('state'),
                'postal_code': address_details.get('postcode'),
                'road': address_details.get('road'),
                'house_number': address_details.get('house_number'),
                'lat': location.get('lat'),
                'lon': location.get('lon'),
                'display_name': location.get('display_name')
            }
            
            logger.info(f"‚úÖ Nominatim –¥–∞–Ω–Ω—ã–µ: {location_data}")
            return location_data
        else:
            logger.warning(f"‚ö†Ô∏è Nominatim API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Nominatim API: {e}")
        return None

def extract_location_components(address_components, original_address=None):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Places API address_components
    
    Args:
        address_components (list): –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–¥—Ä–µ—Å–∞ –æ—Ç Google API
        original_address (str): –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å country, city, district, county
    """
    location_data = {
        'country': None,
        'country_code': None,
        'city': None,
        'district': None,
        'county': None,
        'postal_code': None
    }
    
    for component in address_components:
        types = component.get('types', [])
        long_name = component.get('long_name', '')
        short_name = component.get('short_name', '')
        
        # –°—Ç—Ä–∞–Ω–∞
        if 'country' in types:
            location_data['country'] = long_name
            location_data['country_code'] = short_name
        
        # –ì–æ—Ä–æ–¥ (administrative_area_level_1 –∏–ª–∏ locality)
        elif 'administrative_area_level_1' in types:
            location_data['city'] = long_name
        elif 'locality' in types and not location_data['city']:
            location_data['city'] = long_name
        
        # –†–∞–π–æ–Ω (sublocality_level_1 –∏–ª–∏ sublocality)
        elif 'sublocality_level_1' in types:
            location_data['district'] = long_name
        elif 'sublocality' in types and not location_data['district']:
            location_data['district'] = long_name
        
        # –û–∫—Ä—É–≥ (administrative_area_level_2)
        elif 'administrative_area_level_2' in types and not location_data['county']:
            location_data['county'] = long_name
        
        # –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
        elif 'postal_code' in types:
            location_data['postal_code'] = long_name
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç—É—Ä–µ—Ü–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
    if original_address and (location_data['country'] == 'Turkey' or location_data['country'] == 'T√ºrkiye'):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–π–æ–Ω –∏–∑ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞
        address_parts = original_address.split(',')
        if len(address_parts) >= 1:
            first_part = address_parts[0].strip()
            # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "Sk.", "Sok.", "Mah." –∏ —Ç.–¥.
            district_name = first_part.replace(' Sk.', '').replace(' Sok.', '').replace(' Mah.', '').replace(' Mahallesi', '')
            
            # –ï—Å–ª–∏ Google –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª district, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π
            if not location_data['district']:
                location_data['district'] = district_name
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω —Ä–∞–π–æ–Ω –∏–∑ –∞–¥—Ä–µ—Å–∞ (Google –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª): {district_name}")
            else:
                logger.info(f"Google –æ–ø—Ä–µ–¥–µ–ª–∏–ª district: {location_data['district']}, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π: {district_name}")
    
    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–æ–∫–∞—Ü–∏–∏: {location_data}")
    return location_data

def find_location_codes_from_components(location_components):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Google Places API
    
    Args:
        location_components (dict): –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
    
    Returns:
        dict: –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –∏–ª–∏ None
    """
    try:
        if not location_components:
            return None
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_data = {
            'country_name': location_components.get('country'),
            'city_name': location_components.get('city'),
            'district_name': location_components.get('district'),
            'county_name': location_components.get('county')
        }
        
        # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        search_data = {k: v for k, v in search_data.items() if v is not None}
        
        if not search_data:
            return None
        
        logger.info(f"–ò—â–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ –±–∞–∑–µ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º: {search_data}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
        logger.info("\nüîç –í–ê–†–ò–ê–ù–¢–´ –ü–û–ò–°–ö–ê –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
        logger.info("1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º")
        logger.info("2. –ü–æ county_name –∏ city_name")
        logger.info("3. –ü–æ district_name –∏ city_name")
        logger.info("4. –¢–æ–ª—å–∫–æ –ø–æ county_name")
        logger.info("5. –¢–æ–ª—å–∫–æ –ø–æ district_name")
        
        # –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ locations - —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        query = supabase.table('locations').select('*')
        
        if search_data.get('city_name'):
            query = query.eq('city_name', search_data['city_name'])
        if search_data.get('county_name'):
            query = query.eq('county_name', search_data['county_name'])
        if search_data.get('district_name'):
            query = query.eq('district_name', search_data['district_name'])
        if search_data.get('country_name'):
            query = query.eq('country_name', search_data['country_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ): {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ county_name –∏ city_name
        logger.info("–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ county_name –∏ city_name")
        query = supabase.table('locations').select('*')
        if search_data.get('county_name'):
            query = query.eq('county_name', search_data['county_name'])
        if search_data.get('city_name'):
            query = query.eq('city_name', search_data['city_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –ø–æ county_name –∏ city_name: {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –∏—â–µ–º –ø–æ district_name –∏ city_name
        logger.info("–ò—â–µ–º –ø–æ district_name –∏ city_name")
        query = supabase.table('locations').select('*')
        if search_data.get('district_name'):
            query = query.eq('district_name', search_data['district_name'])
        if search_data.get('city_name'):
            query = query.eq('city_name', search_data['city_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –ø–æ district_name –∏ city_name: {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ county_name
        logger.info("–ò—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ county_name")
        query = supabase.table('locations').select('*')
        if search_data.get('county_name'):
            query = query.eq('county_name', search_data['county_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –ø–æ county_name: {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ district_name
        logger.info("–ò—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ district_name")
        query = supabase.table('locations').select('*')
        if search_data.get('district_name'):
            query = query.eq('district_name', search_data['district_name'])
        
        result = query.execute()
        
        if result.data and len(result.data) > 0:
            location = result.data[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –ø–æ district_name: {location}")
            return {
                'city_id': location['city_id'],
                'county_id': location['county_id'],
                'district_id': location['district_id'],
                'country_id': location['country_id'],
                'city_name': location['city_name'],
                'county_name': location['county_name'],
                'district_name': location['district_name'],
                'country_name': location['country_name']
            }
        
        logger.warning(f"‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {search_data}")
        return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–¥–æ–≤ –ª–æ–∫–∞—Ü–∏–π: {e}")
        return None

def extract_location_from_address(address):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω –∏ –æ–∫—Ä—É–≥ –∏–∑ –∞–¥—Ä–µ—Å–∞
    
    Args:
        address (str): –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å city_name, district_name, county_name
    """
    try:
        logger.info(f"üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞: {address}")
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–ª—è —Ç—É—Ä–µ—Ü–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
        address_parts = address.split(',')
        logger.info(f"üîç –ß–∞—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞: {address_parts}")
        
        location_data = {
            'city_name': None,
            'district_name': None,
            'county_name': None,
            'country_name': 'Turkey'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç—É—Ä–µ—Ü–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
        }
        
        if len(address_parts) >= 3:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: "Zerdalilik, 07100 Muratpa≈üa/Antalya, T√ºrkiye"
            if 'Muratpa≈üa/Antalya' in address_parts[1]:
                logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π Muratpa≈üa/Antalya")
                location_data['city_name'] = 'Antalya'
                location_data['county_name'] = 'Muratpa≈üa'
                location_data['district_name'] = address_parts[0].strip()
                location_data['country_name'] = 'T√ºrkiye'  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: "Avsallar, Cengiz Akay Sk. No:12, 07410 Alanya/Antalya, T√ºrkiye"
            elif 'Alanya/Antalya' in address_parts[2]:
                logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π Alanya/Antalya")
                location_data['city_name'] = 'Antalya'
                location_data['county_name'] = 'Alanya'
                location_data['district_name'] = address_parts[0].strip()
                location_data['country_name'] = 'T√ºrkiye'  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: "Baraj, 5890. Sk. No:584, 07320 Kepez/Antalya, T√ºrkiye"
            elif 'Kepez/Antalya' in address_parts[2]:
                logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π Kepez/Antalya")
                location_data['city_name'] = 'Antalya'
                location_data['county_name'] = 'Kepez'
                location_data['district_name'] = address_parts[0].strip()
                location_data['country_name'] = 'T√ºrkiye'  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
            else:
                logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª—É—á–∞–π")
                # –î–ª—è –∞–¥—Ä–µ—Å–∞: "Antalya, Alanya, Avsallar Mah., Cengiz Akay Sok., 12B"
                # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å: –≥–æ—Ä–æ–¥ (Antalya) - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥
                location_data['city_name'] = address_parts[0].strip()
                
                # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å: –æ–∫—Ä—É–≥/—Ä–∞–π–æ–Ω (Alanya) - —ç—Ç–æ –æ–∫—Ä—É–≥
                location_data['county_name'] = address_parts[1].strip()
                
                # –¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å: —Ä–∞–π–æ–Ω (Avsallar Mah.) - —ç—Ç–æ —Ä–∞–π–æ–Ω
                district_name = address_parts[2].strip()
                # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "Mah.", "Mahallesi", "Sok." –∏ —Ç.–¥.
                district_name = district_name.replace(' Mah.', '').replace(' Mahallesi', '').replace(' Sok.', '').replace(' Sk.', '')
                location_data['district_name'] = district_name
                
        elif len(address_parts) >= 2:
            logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç (2 —á–∞—Å—Ç–∏)")
            # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
            location_data['district_name'] = address_parts[0].strip()
            location_data['city_name'] = address_parts[1].strip()
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if not location_data['city_name']:
            logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è city_name: Antalya")
            location_data['city_name'] = 'Antalya'  # Default –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
        if not location_data['district_name']:
            logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è district_name: Baraj")
            location_data['district_name'] = 'Baraj'  # Default —Ä–∞–π–æ–Ω
        if not location_data['county_name']:
            logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è county_name: Kepez")
            location_data['county_name'] = 'Kepez'  # Default –ø—Ä–æ–≤–∏–Ω—Ü–∏—è
        if not location_data['country_name']:
            logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è country_name: T√ºrkiye")
            location_data['country_name'] = 'T√ºrkiye'  # Default —Å—Ç—Ä–∞–Ω–∞
        
        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –∞–¥—Ä–µ—Å–∞: {location_data}")
        return location_data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –∞–¥—Ä–µ—Å–∞: {e}")
        logger.error(f"‚ùå –ê–¥—Ä–µ—Å: {address}")
        logger.info(f"üîç –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏—è")
        return {
            'city_name': 'Antalya',
            'district_name': 'Baraj', 
            'county_name': 'Kepez',
            'country_name': 'T√ºrkiye'
        }

def get_historical_property_trends(city_name, district_name, county_name, years_back=5):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã
    
    Args:
        city_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        district_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
        county_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–∞/–ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
        years_back (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –≥–æ–¥–∞–º –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∏ –∞—Ä–µ–Ω–¥—ã
    """
    try:
        from datetime import datetime
        current_date = datetime.now()
        current_year = current_date.year
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ years_back –ª–µ—Ç
        historical_data = {
            'sale_prices': [],
            'rent_prices': [],
            'years': []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π
        location_codes = get_location_codes(city_name, district_name, county_name)
        
        if not location_codes:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            return None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å–∫–∞–¥–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞
        data_source_message = None
        
        for year_offset in range(years_back):
            target_year = current_year - year_offset
            
            # –ö–∞—Å–∫–∞–¥–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
            year_data, message = get_cascading_historical_data(location_codes, target_year)
            
            if year_data:
                # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –≥–æ–¥
                sale_prices = []
                rent_prices = []
                
                for record in year_data:
                    if record.get('unit_price_for_sale'):
                        sale_prices.append(record['unit_price_for_sale'])
                    if record.get('unit_price_for_rent'):
                        rent_prices.append(record['unit_price_for_rent'])
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if sale_prices:
                    historical_data['sale_prices'].append(sum(sale_prices) / len(sale_prices))
                else:
                    historical_data['sale_prices'].append(None)
                
                if rent_prices:
                    historical_data['rent_prices'].append(sum(rent_prices) / len(rent_prices))
                else:
                    historical_data['rent_prices'].append(None)
                
                historical_data['years'].append(target_year)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö (–±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ)
                if data_source_message is None:
                    data_source_message = message
            else:
                historical_data['sale_prices'].append(None)
                historical_data['rent_prices'].append(None)
                historical_data['years'].append(target_year)
        
        # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ —á—Ç–æ–±—ã –≥–æ–¥—ã —à–ª–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        historical_data['sale_prices'].reverse()
        historical_data['rent_prices'].reverse()
        historical_data['years'].reverse()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(historical_data['years'])} –ª–µ—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö
        if data_source_message:
            historical_data['data_source'] = data_source_message
        
        return historical_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        return None

def get_cascading_historical_data(location_codes, target_year):
    """
    –ö–∞—Å–∫–∞–¥–Ω—ã–π –ø–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ —Å fallback –ª–æ–≥–∏–∫–æ–π
    
    Args:
        location_codes (dict): –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–¥–∞–º–∏ –ª–æ–∫–∞—Ü–∏–π
        target_year (int): –¶–µ–ª–µ–≤–æ–π –≥–æ–¥
    
    Returns:
        tuple: (data, message) - –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∏–ø–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        city_code = location_codes.get('city_code')
        district_code = location_codes.get('district_code')
        county_code = location_codes.get('county_code')
        country_id = 1  # T√ºrkiye
        
        # 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if city_code and district_code and county_code:
            query = supabase.table('property_trends').select('*').eq('city_id', city_code).eq('district_id', district_code).eq('county_id', county_code).eq('property_year', target_year)
            result = query.execute()
            
            if result.data:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –¥–ª—è {target_year}")
                return result.data, f"–î–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–π–æ–Ω—É (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)"
        
        # 2. –ï—Å–ª–∏ district_code –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ county_code
        if county_code:
            query = supabase.table('property_trends').select('*').eq('county_id', county_code).is_('city_id', 'null').is_('district_id', 'null').eq('property_year', target_year)
            result = query.execute()
            
            if result.data:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–∫—Ä—É–≥—É –¥–ª—è {target_year}")
                return result.data, f"–î–∞–Ω–Ω—ã–µ –ø–æ –æ–∫—Ä—É–≥—É (county_id={county_code})"
        
        # 3. –ï—Å–ª–∏ county_code –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ city_code
        if city_code:
            query = supabase.table('property_trends').select('*').eq('city_id', city_code).is_('district_id', 'null').is_('county_id', 'null').eq('property_year', target_year)
            result = query.execute()
            
            if result.data:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥—É –¥–ª—è {target_year}")
                return result.data, f"–î–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥—É (city_id={city_code})"
        
        # 4. –ï—Å–ª–∏ city_code –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ country_id
        query = supabase.table('property_trends').select('*').eq('country_id', country_id).is_('city_id', 'null').is_('district_id', 'null').is_('county_id', 'null').eq('property_year', target_year)
        result = query.execute()
        
        if result.data:
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ –¥–ª—è {target_year}")
            return result.data, f"–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ (country_id={country_id})"
        
        # 5. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        logger.warning(f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö –¥–ª—è {target_year}")
        return None, "–ü–æ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"

def create_property_trends_chart(historical_data, chart_type='sale', width=180, height=100):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è PDF (–∑–∞–≥–ª—É—à–∫–∞)
    """
    logger.info(f"–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è: {chart_type}")
    return None

def get_openai_api_key():
    """
    –ü–æ–ª—É—á–∞–µ—Ç OpenAI API –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        str: API –∫–ª—é—á –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        openai_key_row = supabase.table('api_keys').select('key_value').eq('key_name', 'OPENAI_API').execute().data
        
        if openai_key_row and isinstance(openai_key_row, list) and len(openai_key_row) > 0:
            key_data = openai_key_row[0]
            if isinstance(key_data, dict) and 'key_value' in key_data:
                api_key = key_data['key_value']
                if api_key and api_key.strip():
                    logger.info("OpenAI API key retrieved from database successfully")
                    return api_key.strip()
        
        logger.warning("OpenAI API key not found in database")
        return ''
        
    except Exception as e:
        logger.error(f"Error retrieving OpenAI API key from database: {e}")
        return ''

def generate_trend_interpretation_with_chatgpt(gdp_trend, inflation_trend, gdp_data, inflation_data, language='en'):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ç—Ä–µ–Ω–¥–æ–≤ —á–µ—Ä–µ–∑ ChatGPT
    
    Args:
        gdp_trend (float): –¢—Ä–µ–Ω–¥ –í–í–ü
        inflation_trend (float): –¢—Ä–µ–Ω–¥ –∏–Ω—Ñ–ª—è—Ü–∏–∏
        gdp_data (list): –î–∞–Ω–Ω—ã–µ –í–í–ü
        inflation_data (list): –î–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏
        language (str): –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ (en, ru, tr, fr, de)
    
    Returns:
        dict: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    """
    try:
        import openai
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–æ–≤
        languages = {
            'en': 'English',
            'ru': 'Russian', 
            'tr': 'Turkish',
            'fr': 'French',
            'de': 'German'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if len(gdp_data) >= 2 and len(inflation_data) >= 2:
            gdp_last_2 = [d['value'] for d in gdp_data[-2:]]
            inflation_last_2 = [d['value'] for d in inflation_data[-2:]]
            recent_gdp_change = ((gdp_last_2[1] - gdp_last_2[0]) / gdp_last_2[0]) * 100 if gdp_last_2[0] != 0 else 0
            recent_inflation_change = ((inflation_last_2[1] - inflation_last_2[0]) / inflation_last_2[0]) * 100 if inflation_last_2[0] != 0 else 0
        else:
            recent_gdp_change = 0
            recent_inflation_change = 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT
        prompt = f"""
        Analyze economic trends for Turkey and provide interpretations in {languages.get(language, 'English')}.
        
        GDP Trend: {gdp_trend:.1f}%
        Inflation Trend: {inflation_trend:.1f}%
        Recent GDP change (last 2 years): {recent_gdp_change:.1f}%
        Recent Inflation change (last 2 years): {recent_inflation_change:.1f}%
        
        GDP data: {gdp_data}
        Inflation data: {inflation_data}
        
        Please provide:
        1. GDP trend interpretation (2-3 sentences)
        2. Inflation trend interpretation (2-3 sentences) 
        3. Recent comparison interpretation (last 2 years, 2-3 sentences)
        
        Format as JSON:
        {{
            "gdp_interpretation": "...",
            "inflation_interpretation": "...", 
            "recent_comparison": "..."
        }}
        """
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        openai_api_key = get_openai_api_key()
        
        if openai_api_key and OPENAI_AVAILABLE:
            try:
                from openai import OpenAI
                client = OpenAI(api_key=openai_api_key)
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=300,
                    temperature=0.7
                )
                result = json.loads(response.choices[0].message.content)
                logger.info(f"ChatGPT interpretation generated successfully for language: {language}")
            except Exception as e:
                logger.warning(f"ChatGPT API error: {e}, using fallback")
                result = {
                    "gdp_interpretation": f"GDP trend shows {gdp_trend:.1f}% average growth, indicating strong economic expansion",
                    "inflation_interpretation": f"Inflation trend at {inflation_trend:.1f}% shows significant price increases",
                    "recent_comparison": f"Recent 2-year comparison shows GDP change of {recent_gdp_change:.1f}% and inflation change of {recent_inflation_change:.1f}%"
                }
        else:
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –±–µ–∑ ChatGPT
            logger.info("No OpenAI API key available, using fallback interpretation")
            result = {
                "gdp_interpretation": f"GDP trend shows {gdp_trend:.1f}% average growth, indicating strong economic expansion",
                "inflation_interpretation": f"Inflation trend at {inflation_trend:.1f}% shows significant price increases",
                "recent_comparison": f"Recent 2-year comparison shows GDP change of {recent_gdp_change:.1f}% and inflation change of {recent_inflation_change:.1f}%"
            }
        
        return result
        
    except Exception as e:
        logger.error(f"Error generating ChatGPT interpretation: {e}")
        return {
            "gdp_interpretation": f"GDP trend: {gdp_trend:.1f}%",
            "inflation_interpretation": f"Inflation trend: {inflation_trend:.1f}%",
            "recent_comparison": "Recent comparison data unavailable"
        }

def generate_detailed_calculations(gdp_data, inflation_data):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ç—Ä–µ–Ω–¥–æ–≤
    
    Args:
        gdp_data (list): –î–∞–Ω–Ω—ã–µ –í–í–ü
        inflation_data (list): –î–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏
    
    Returns:
        dict: –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
    """
    try:
        # –†–∞—Å—á–µ—Ç—ã –¥–ª—è –í–í–ü
        gdp_calculations = []
        gdp_values = [d['value'] for d in gdp_data]
        
        for i in range(1, len(gdp_values)):
            year1 = gdp_data[i-1]['year']
            year2 = gdp_data[i]['year']
            val1 = gdp_values[i-1]
            val2 = gdp_values[i]
            
            if val1 != 0:
                change = (val2 - val1) / val1
                gdp_calculations.append({
                    'years': f"{year1}‚Üí{year2}",
                    'calculation': f"({val2:.1f} - {val1:.1f}) / {val1:.1f}",
                    'result': f"{change:.3f}"
                })
        
        # –†–∞—Å—á–µ—Ç—ã –¥–ª—è –∏–Ω—Ñ–ª—è—Ü–∏–∏
        inflation_calculations = []
        inflation_values = [d['value'] for d in inflation_data]
        
        for i in range(1, len(inflation_values)):
            year1 = inflation_data[i-1]['year']
            year2 = inflation_data[i]['year']
            val1 = inflation_values[i-1]
            val2 = inflation_values[i]
            
            if val1 != 0:
                change = (val2 - val1) / val1
                inflation_calculations.append({
                    'years': f"{year1}‚Üí{year2}",
                    'calculation': f"({val2:.1f} - {val1:.1f}) / {val1:.1f}",
                    'result': f"{change:.3f}"
                })
        
        return {
            'gdp_calculations': gdp_calculations,
            'inflation_calculations': inflation_calculations,
            'gdp_values': gdp_values,
            'inflation_values': inflation_values
        }
        
    except Exception as e:
        logger.error(f"Error generating detailed calculations: {e}")
        return {
            'gdp_calculations': [],
            'inflation_calculations': [],
            'gdp_values': [],
            'inflation_values': []
        }

def save_interpretations_to_database(country_code, interpretations, calculations):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        country_code (str): –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã
        interpretations (dict): –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        calculations (dict): –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
    """
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ imf_economic_data
        for indicator in ['NGDP_RPCH', 'PCPIPCH']:
            supabase.table('imf_economic_data').update({
                'gdp_trend_interpretation_en': interpretations.get('en', {}).get('gdp_interpretation', ''),
                'gdp_trend_interpretation_ru': interpretations.get('ru', {}).get('gdp_interpretation', ''),
                'gdp_trend_interpretation_tr': interpretations.get('tr', {}).get('gdp_interpretation', ''),
                'gdp_trend_interpretation_fr': interpretations.get('fr', {}).get('gdp_interpretation', ''),
                'gdp_trend_interpretation_de': interpretations.get('de', {}).get('gdp_interpretation', ''),
                'inflation_trend_interpretation_en': interpretations.get('en', {}).get('inflation_interpretation', ''),
                'inflation_trend_interpretation_ru': interpretations.get('ru', {}).get('inflation_interpretation', ''),
                'inflation_trend_interpretation_tr': interpretations.get('tr', {}).get('inflation_interpretation', ''),
                'inflation_trend_interpretation_fr': interpretations.get('fr', {}).get('inflation_interpretation', ''),
                'inflation_trend_interpretation_de': interpretations.get('de', {}).get('inflation_interpretation', ''),
                'recent_comparison_interpretation_en': interpretations.get('en', {}).get('recent_comparison', ''),
                'recent_comparison_interpretation_ru': interpretations.get('ru', {}).get('recent_comparison', ''),
                'recent_comparison_interpretation_tr': interpretations.get('tr', {}).get('recent_comparison', ''),
                'recent_comparison_interpretation_fr': interpretations.get('fr', {}).get('recent_comparison', ''),
                'recent_comparison_interpretation_de': interpretations.get('de', {}).get('recent_comparison', ''),
                'gdp_calculation_details': json.dumps(calculations.get('gdp_calculations', [])),
                'inflation_calculation_details': json.dumps(calculations.get('inflation_calculation_details', []))
            }).eq('country_code', country_code).eq('indicator_code', indicator).execute()
            
        logger.info(f"Interpretations saved to database for country {country_code}")
        
    except Exception as e:
        logger.error(f"Error saving interpretations to database: {e}")

def load_interpretations_from_database(country_code):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        country_code (str): –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã
    
    Returns:
        dict: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∏–ª–∏ None
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã imf_economic_data
        result = supabase.table('imf_economic_data').select('*').eq('country_code', country_code).eq('indicator_code', 'NGDP_RPCH').execute()
        
        if result.data and len(result.data) > 0:
            record = result.data[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            if record.get('gdp_trend_interpretation_en') and record.get('inflation_trend_interpretation_en'):
                interpretations = {}
                for lang in ['en', 'ru', 'tr', 'fr', 'de']:
                    interpretations[lang] = {
                        'gdp_interpretation': record.get(f'gdp_trend_interpretation_{lang}', ''),
                        'inflation_interpretation': record.get(f'inflation_trend_interpretation_{lang}', ''),
                        'recent_comparison': record.get(f'recent_comparison_interpretation_{lang}', '')
                    }
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
                calculations = {
                    'gdp_calculations': json.loads(record.get('gdp_calculation_details', '[]')),
                    'inflation_calculations': json.loads(record.get('inflation_calculation_details', '[]'))
                }
                
                logger.info(f"Interpretations loaded from database for country {country_code}")
                return interpretations, calculations
        
        return None, None
        
    except Exception as e:
        logger.error(f"Error loading interpretations from database: {e}")
        return None, None

def get_market_comparison_data(age_id, floor_id, heating_id, area, price, location_codes, bedrooms=2, is_turkish=False, currency_rate=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü floor_segment_data, heating_data, house_type_data, age_data
    
    Args:
        age_id (str): ID –∑–∞–ø–∏—Å–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
        floor_id (str): ID –∑–∞–ø–∏—Å–∏ —ç—Ç–∞–∂–∞ –æ–±—ä–µ–∫—Ç–∞
        heating_id (str): ID –∑–∞–ø–∏—Å–∏ —Ç–∏–ø–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è
        area (str): –ü–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ –≤ –º¬≤
        price (float): –¶–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        location_codes (dict): –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–∏ (country_id, city_id, county_id, district_id)
        bedrooms (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–∏–ø–∏—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
    """
    try:
        logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
        logger.info(f"üìç –í–æ–∑—Ä–∞—Å—Ç: {age_id}, –≠—Ç–∞–∂: {floor_id}, –û—Ç–æ–ø–ª–µ–Ω–∏–µ: {heating_id}")
        logger.info(f"üìç –ü–ª–æ—â–∞–¥—å: {area} –º¬≤, –¶–µ–Ω–∞: ‚Ç¨{price}")
        logger.info(f"üìç –ö–æ–¥—ã –ª–æ–∫–∞—Ü–∏–∏: {location_codes}")
        logger.info(f"üîç –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: age_id={type(age_id)}, floor_id={type(floor_id)}, heating_id={type(heating_id)}")
        logger.info(f"üåç –¢—É—Ä—Ü–∏—è: {is_turkish}, –ö—É—Ä—Å –≤–∞–ª—é—Ç: {currency_rate}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
        if is_turkish and currency_rate:
            from currency_functions import convert_turkish_data_to_eur
            logger.info("üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ TRY –≤ EUR –≤–∫–ª—é—á–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü
        comparisons = {}
        price_trends = {}  # –î–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ trend_date
        current_date = datetime.now().date()
        twelve_months_ago = current_date - timedelta(days=365)  # 12 –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        
        # 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –æ–±—ä–µ–∫—Ç–∞
        if age_id and age_id != 'unknown':
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º listing_type –ø–æ ID –∑–∞–ø–∏—Å–∏
                age_record = supabase.table('age_data').select('listing_type').eq('id', age_id).execute()
                if age_record.data:
                    age_listing_type = age_record.data[0].get('listing_type')
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω listing_type –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {age_id}: {age_listing_type}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É —Å —É—á–µ—Ç–æ–º –ª–æ–∫–∞—Ü–∏–∏, listing_type –∏ –¥–∞—Ç—ã
                    age_query = supabase.table('age_data').select('trend_date, min_unit_price_for_sale, max_unit_price_for_sale, unit_price_for_sale')
                    
                    # 1. –§–∏–ª—å—Ç—Ä –ø–æ –ª–æ–∫–∞—Ü–∏–∏
                    if location_codes.get('country_id'):
                        age_query = age_query.eq('country_id', location_codes['country_id'])
                    if location_codes.get('city_id'):
                        age_query = age_query.eq('city_id', location_codes['city_id'])
                    if location_codes.get('county_id'):
                        age_query = age_query.eq('county_id', location_codes['county_id'])
                    if location_codes.get('district_id'):
                        age_query = age_query.eq('district_id', location_codes['district_id'])
                    
                    # 2. –§–∏–ª—å—Ç—Ä –ø–æ listing_type (–∞ –Ω–µ –ø–æ ID)
                    age_query = age_query.eq('listing_type', age_listing_type)
                    
                    # 3. –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤)
                    age_query = age_query.gte('trend_date', twelve_months_ago).lte('trend_date', current_date)
                    
                    age_result = age_query.execute()
                    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É (listing_type={age_listing_type}): {len(age_result.data)} –∑–∞–ø–∏—Å–µ–π")
                
                if age_result.data:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –µ–≤—Ä–æ, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –≤ –¢—É—Ä—Ü–∏–∏
                    if is_turkish and currency_rate:
                        age_result.data = convert_turkish_data_to_eur(age_result.data, currency_rate)
                        logger.info("üí± –î–∞–Ω–Ω—ã–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ EUR")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                    price_trends['age'] = {
                        'dates': [record.get('trend_date') for record in age_result.data],
                        'prices': [float(record.get('unit_price_for_sale', 0)) for record in age_result.data if record.get('unit_price_for_sale')]
                    }
                    
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
                    latest_record = max(age_result.data, key=lambda x: x.get('trend_date', ''))
                    min_price = float(latest_record.get('min_unit_price_for_sale', 0))
                    max_price = float(latest_record.get('max_unit_price_for_sale', 0))
                    
                    if min_price > 0 and max_price > 0:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –µ—Å–ª–∏ area –Ω–µ —É–∫–∞–∑–∞–Ω
                        if area and area != 'unknown':
                            area_value = float(area)
                        else:
                            # –¢–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω
                            area_value = 80 if bedrooms <= 2 else 120 if bedrooms <= 3 else 150
                            logger.info(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {area_value} –º¬≤")
                        
                        min_total = min_price * area_value
                        max_total = max_price * area_value
                        
                        comparisons['age'] = {
                            'min_price': min_total,
                            'max_price': max_total,
                            'user_price': price,
                            'deviation_min': ((price - min_total) / min_total * 100) if min_total > 0 else 0,
                            'deviation_max': ((price - max_total) / max_total * 100) if max_total > 0 else 0,
                            'trend_data': price_trends['age']
                        }
                        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É: min={min_total:.0f}, max={max_total:.0f}, user={price:.0f}")
                else:
                    logger.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è listing_type={age_listing_type}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É: {e}")
        
        # 2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —ç—Ç–∞–∂—É
        if floor_id and floor_id != 'unknown':
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º listing_type –ø–æ ID –∑–∞–ø–∏—Å–∏
                floor_record = supabase.table('floor_segment_data').select('listing_type').eq('id', floor_id).execute()
                if floor_record.data:
                    floor_listing_type = floor_record.data[0].get('listing_type')
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω listing_type –¥–ª—è —ç—Ç–∞–∂–∞ {floor_id}: {floor_listing_type}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–∞–∂—É —Å —É—á–µ—Ç–æ–º –ª–æ–∫–∞—Ü–∏–∏, listing_type –∏ –¥–∞—Ç—ã
                    floor_query = supabase.table('floor_segment_data').select('trend_date, min_unit_price_for_sale, max_unit_price_for_sale, unit_price_for_sale')
                    
                    # 1. –§–∏–ª—å—Ç—Ä –ø–æ –ª–æ–∫–∞—Ü–∏–∏
                    if location_codes.get('country_id'):
                        floor_query = floor_query.eq('country_id', location_codes['country_id'])
                    if location_codes.get('city_id'):
                        floor_query = floor_query.eq('city_id', location_codes['city_id'])
                    if location_codes.get('county_id'):
                        floor_query = floor_query.eq('county_id', location_codes['county_id'])
                    if location_codes.get('district_id'):
                        floor_query = floor_query.eq('district_id', location_codes['district_id'])
                    
                    # 2. –§–∏–ª—å—Ç—Ä –ø–æ listing_type (–∞ –Ω–µ –ø–æ ID)
                    floor_query = floor_query.eq('listing_type', floor_listing_type)
                    
                    # 3. –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤)
                    floor_query = floor_query.gte('trend_date', twelve_months_ago).lte('trend_date', current_date)
                    
                    floor_result = floor_query.execute()
                    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —ç—Ç–∞–∂—É (listing_type={floor_listing_type}): {len(floor_result.data)} –∑–∞–ø–∏—Å–µ–π")
                
                if floor_result.data:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –µ–≤—Ä–æ, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –≤ –¢—É—Ä—Ü–∏–∏
                    if is_turkish and currency_rate:
                        floor_result.data = convert_turkish_data_to_eur(floor_result.data, currency_rate)
                        logger.info("üí± –î–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–∞–∂—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ EUR")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                    price_trends['floor'] = {
                        'dates': [record.get('trend_date') for record in floor_result.data],
                        'prices': [float(record.get('unit_price_for_sale', 0)) for record in floor_result.data if record.get('unit_price_for_sale')]
                    }
                    
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
                    latest_record = max(floor_result.data, key=lambda x: x.get('trend_date', ''))
                    min_price = float(latest_record.get('min_unit_price_for_sale', 0))
                    max_price = float(latest_record.get('max_unit_price_for_sale', 0))
                    
                    if min_price > 0 and max_price > 0:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –µ—Å–ª–∏ area –Ω–µ —É–∫–∞–∑–∞–Ω
                        if area and area != 'unknown':
                            area_value = float(area)
                        else:
                            # –¢–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω
                            area_value = 80 if bedrooms <= 2 else 120 if bedrooms <= 3 else 150
                            logger.info(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —ç—Ç–∞–∂–∞: {area_value} –º¬≤")
                        
                        min_total = min_price * area_value
                        max_total = max_price * area_value
                        
                        comparisons['floor'] = {
                            'min_price': min_total,
                            'max_price': max_total,
                            'user_price': price,
                            'deviation_min': ((price - min_total) / min_total * 100) if min_total > 0 else 0,
                            'deviation_max': ((price - max_total) / max_total * 100) if max_total > 0 else 0,
                            'trend_data': price_trends['floor']
                        }
                        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–∞–∂—É: min={min_total:.0f}, max={max_total:.0f}, user={price:.0f}")
                else:
                    logger.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–∞–∂—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è listing_type={floor_listing_type}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–∞–∂—É: {e}")
        
        # 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –æ—Ç–æ–ø–ª–µ–Ω–∏—è
        if heating_id and heating_id != 'unknown':
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º listing_type –ø–æ ID –∑–∞–ø–∏—Å–∏
                heating_record = supabase.table('heating_data').select('listing_type').eq('id', heating_id).execute()
                if heating_record.data:
                    heating_listing_type = heating_record.data[0].get('listing_type')
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω listing_type –¥–ª—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è {heating_id}: {heating_listing_type}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–æ–ø–ª–µ–Ω–∏—é —Å —É—á–µ—Ç–æ–º –ª–æ–∫–∞—Ü–∏–∏, listing_type –∏ –¥–∞—Ç—ã
                    heating_query = supabase.table('heating_data').select('trend_date, min_unit_price_for_sale, max_unit_price_for_sale, unit_price_for_sale')
                    
                    # 1. –§–∏–ª—å—Ç—Ä –ø–æ –ª–æ–∫–∞—Ü–∏–∏
                    if location_codes.get('country_id'):
                        heating_query = heating_query.eq('country_id', location_codes['country_id'])
                    if location_codes.get('city_id'):
                        heating_query = heating_query.eq('city_id', location_codes['city_id'])
                    if location_codes.get('county_id'):
                        heating_query = heating_query.eq('county_id', location_codes['county_id'])
                    if location_codes.get('district_id'):
                        heating_query = heating_query.eq('district_id', location_codes['district_id'])
                    
                    # 2. –§–∏–ª—å—Ç—Ä –ø–æ listing_type (–∞ –Ω–µ –ø–æ ID)
                    heating_query = heating_query.eq('listing_type', heating_listing_type)
                    
                    # 3. –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤)
                    heating_query = heating_query.gte('trend_date', twelve_months_ago).lte('trend_date', current_date)
                    
                    heating_result = heating_query.execute()
                    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –æ—Ç–æ–ø–ª–µ–Ω–∏—é (listing_type={heating_listing_type}): {len(heating_result.data)} –∑–∞–ø–∏—Å–µ–π")
                
                if heating_result.data:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –µ–≤—Ä–æ, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –≤ –¢—É—Ä—Ü–∏–∏
                    if is_turkish and currency_rate:
                        heating_result.data = convert_turkish_data_to_eur(heating_result.data, currency_rate)
                        logger.info("üí± –î–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–æ–ø–ª–µ–Ω–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ EUR")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                    price_trends['heating'] = {
                        'dates': [record.get('trend_date') for record in heating_result.data],
                        'prices': [float(record.get('unit_price_for_sale', 0)) for record in heating_result.data if record.get('unit_price_for_sale')]
                    }
                    
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
                    latest_record = max(heating_result.data, key=lambda x: x.get('trend_date', ''))
                    min_price = float(latest_record.get('min_unit_price_for_sale', 0))
                    max_price = float(latest_record.get('max_unit_price_for_sale', 0))
                    
                    if min_price > 0 and max_price > 0:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –µ—Å–ª–∏ area –Ω–µ —É–∫–∞–∑–∞–Ω
                        if area and area != 'unknown':
                            area_value = float(area)
                        else:
                            # –¢–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω
                            area_value = 80 if bedrooms <= 2 else 120 if bedrooms <= 3 else 150
                            logger.info(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è: {area_value} –º¬≤")
                        
                        min_total = min_price * area_value
                        max_total = max_price * area_value
                        
                        comparisons['heating'] = {
                            'min_price': min_total,
                            'max_price': max_total,
                            'user_price': price,
                            'deviation_min': ((price - min_total) / min_total * 100) if min_total > 0 else 0,
                            'deviation_max': ((price - max_total) / max_total * 100) if max_total > 0 else 0,
                            'trend_data': price_trends['heating']
                        }
                        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–æ–ø–ª–µ–Ω–∏—é: min={min_total:.0f}, max={max_total:.0f}, user={price:.0f}")
                else:
                    logger.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–æ–ø–ª–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è listing_type={heating_listing_type}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ç–æ–ø–ª–µ–Ω–∏—é: {e}")
        
        # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –¥–æ–º–∞ - –£–ë–†–ê–ù–û –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
        # –ë–ª–æ–∫ "–ü–æ —Ç–∏–ø—É –¥–æ–º–∞" –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        # 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if comparisons:
            all_min_prices = [comp['min_price'] for comp in comparisons.values() if comp['min_price'] > 0]
            all_max_prices = [comp['max_price'] for comp in comparisons.values() if comp['max_price'] > 0]
            
            if all_min_prices and all_max_prices:
                avg_min_price = sum(all_min_prices) / len(all_min_prices)
                avg_max_price = sum(all_max_prices) / len(all_max_prices)
                
                comparisons['final'] = {
                    'avg_min_price': avg_min_price,
                    'avg_max_price': avg_max_price,
                    'user_price': price,
                    'deviation_min': ((price - avg_min_price) / avg_min_price * 100) if avg_min_price > 0 else 0,
                    'deviation_max': ((price - avg_max_price) / avg_max_price * 100) if avg_max_price > 0 else 0
                }
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–≤–æ–¥ –ø–æ —Ü–µ–Ω–µ
                if price < avg_min_price:
                    price_conclusion = f"–¶–µ–Ω–∞ –Ω–∏–∂–µ —Ä—ã–Ω–æ—á–Ω–æ–π –Ω–∞ {abs(comparisons['final']['deviation_min']):.1f}% - –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!"
                elif price > avg_max_price:
                    price_conclusion = f"–¶–µ–Ω–∞ –≤—ã—à–µ —Ä—ã–Ω–æ—á–Ω–æ–π –Ω–∞ {comparisons['final']['deviation_max']:.1f}% - –∑–∞–≤—ã—à–µ–Ω–∞"
                else:
                    price_conclusion = f"–¶–µ–Ω–∞ –≤ —Ä—ã–Ω–æ—á–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {comparisons['final']['deviation_min']:.1f}% –¥–æ {comparisons['final']['deviation_max']:.1f}%)"
                
                comparisons['price_conclusion'] = price_conclusion
                logger.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: avg_min={avg_min_price:.0f}, avg_max={avg_max_price:.0f}, –≤—ã–≤–æ–¥: {price_conclusion}")
        
        # 6. –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        comparisons['price_trends'] = price_trends
        
        logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {comparisons}")
        logger.info(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ comparisons:")
        for key, value in comparisons.items():
            if isinstance(value, dict) and 'min_price' in value:
                logger.info(f"  {key}: min={value.get('min_price', 0):.0f}, max={value.get('max_price', 0):.0f}, deviation_min={value.get('deviation_min', 0):.1f}%, deviation_max={value.get('deviation_max', 0):.1f}%")
            else:
                logger.info(f"  {key}: {value}")
        return comparisons
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
        return {}


@app.route('/api/base_prices', methods=['POST'])
def api_base_prices():
    """
    API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —Ü–µ–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü age_data, floor_segment_data, heating_data, house_type_data
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è min –∏ max —Ü–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    """
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': 'Missing request data'}), 400
        
        country_id = data.get('country_id')
        city_id = data.get('city_id')
        county_id = data.get('county_id')
        district_id = data.get('district_id')
        
        if not all([country_id, city_id, county_id, district_id]):
            return jsonify({'error': 'Missing required location parameters'}), 400
        
        logger.info(f"üí∞ –ó–∞–ø—Ä–æ—Å –±–∞–∑–æ–≤—ã—Ö —Ü–µ–Ω –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: country_id={country_id}, city_id={city_id}, county_id={county_id}, district_id={district_id}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –±–∞–∑–æ–≤—ã—Ö —Ü–µ–Ω
        tables = ['age_data', 'floor_segment_data', 'heating_data', 'house_type_data']
        
        min_sale_prices = []
        max_sale_prices = []
        min_rent_prices = []
        max_rent_prices = []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        for table_name in tables:
            try:
                logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                
                response = supabase.table(table_name).select(
                    'min_unit_price_for_sale, max_unit_price_for_sale, min_unit_price_for_rent, max_unit_price_for_rent'
                ).eq('country_id', country_id).eq('city_id', city_id).eq('county_id', county_id).eq('district_id', district_id).execute()
                
                if response.data and len(response.data) > 0:
                    # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
                    table_data = response.data
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ min/max —Ü–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                    table_min_sale = [record.get('min_unit_price_for_sale') for record in table_data if record.get('min_unit_price_for_sale') is not None]
                    table_max_sale = [record.get('max_unit_price_for_sale') for record in table_data if record.get('max_unit_price_for_sale') is not None]
                    table_min_rent = [record.get('min_unit_price_for_rent') for record in table_data if record.get('min_unit_price_for_rent') is not None]
                    table_max_rent = [record.get('max_unit_price_for_rent') for record in table_data if record.get('max_unit_price_for_rent') is not None]
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
                    if table_min_sale:
                        min_sale_prices.append(sum(table_min_sale) / len(table_min_sale))
                    if table_max_sale:
                        max_sale_prices.append(sum(table_max_sale) / len(table_max_sale))
                    if table_min_rent:
                        min_rent_prices.append(sum(table_min_rent) / len(table_min_rent))
                    if table_max_rent:
                        max_rent_prices.append(sum(table_max_rent) / len(table_max_rent))
                    
                    logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ {table_name}: –∑–∞–ø–∏—Å–µ–π={len(table_data)}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name} –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏")
                    
            except Exception as table_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {table_error}")
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if not min_sale_prices or not max_sale_prices or not min_rent_prices or not max_rent_prices:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤—ã—Ö —Ü–µ–Ω")
            return jsonify({'error': 'Insufficient data for base price calculation'}), 404
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º
        avg_min_sale_price = sum(min_sale_prices) / len(min_sale_prices)
        avg_max_sale_price = sum(max_sale_prices) / len(max_sale_prices)
        avg_min_rent_price = sum(min_rent_prices) / len(min_rent_prices)
        avg_max_rent_price = sum(max_rent_prices) / len(max_rent_prices)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã (—Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É min –∏ max)
        base_sale_price = (avg_min_sale_price + avg_max_sale_price) / 2
        base_rent_price = (avg_min_rent_price + avg_max_rent_price) / 2
        
        logger.info(f"üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã:")
        logger.info(f"  - –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {base_sale_price:.2f}")
        logger.info(f"  - –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: {base_rent_price:.2f}")
        logger.info(f"  - –ò—Å—Ç–æ—á–Ω–∏–∫: {len(min_sale_prices)} —Ç–∞–±–ª–∏—Ü")
        
        return jsonify({
            'success': True,
            'base_prices': {
                'sale_price': base_sale_price,
                'rent_price': base_rent_price,
                'calculation_details': {
                    'avg_min_sale_price': avg_min_sale_price,
                    'avg_max_sale_price': avg_max_sale_price,
                    'avg_min_rent_price': avg_min_rent_price,
                    'avg_max_rent_price': avg_max_rent_price,
                    'tables_used': len(min_sale_prices),
                    'tables_requested': tables
                }
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–∑–æ–≤—ã—Ö —Ü–µ–Ω: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/property_trends', methods=['POST'])
def api_property_trends():
    """
    API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–¥–∞—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã property_trends
    """
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': 'Missing request data'}), 400
        
        country_id = data.get('country_id')
        city_id = data.get('city_id')
        county_id = data.get('county_id')
        district_id = data.get('district_id')
        
        if not all([country_id, city_id, county_id, district_id]):
            return jsonify({'error': 'Missing required location parameters'}), 400
        
        logger.info(f"üìä –ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: country_id={country_id}, city_id={city_id}, county_id={county_id}, district_id={district_id}")
        
        # –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ property_trends
        query = supabase.table('property_trends').select('*').eq('country_id', country_id).eq('city_id', city_id).eq('county_id', county_id).eq('district_id', district_id).order('property_date', desc=True)
        
        response = query.execute()
        
        if response.data:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(response.data)} –∑–∞–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if response.data:
                first_record = response.data[0]
                logger.info(f"üîç –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã:")
                logger.info(f"  - unit_price_for_sale: {first_record.get('unit_price_for_sale')}")
                logger.info(f"  - unit_price_for_rent: {first_record.get('unit_price_for_rent')}")
                logger.info(f"  - price_change_sale: {first_record.get('price_change_sale')}")
                logger.info(f"  - price_change_rent: {first_record.get('price_change_rent')}")
                logger.info(f"  - yield: {first_record.get('yield')}")
                logger.info(f"  - property_date: {first_record.get('property_date')}")
                logger.info(f"  - property_year: {first_record.get('property_year')}")
                logger.info(f"  - property_month: {first_record.get('property_month')}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            trends = []
            for record in response.data:
                trend = {
                    'trend_type': 'price_trend',
                    'trend_value': record.get('unit_price_for_sale') or record.get('unit_price_for_rent'),
                    'period': 'monthly',
                    'date': record.get('property_date'),
                    'property_year': record.get('property_year'),
                    'property_month': record.get('property_month'),
                    'unit_price_for_sale': record.get('unit_price_for_sale'),
                    'unit_price_for_rent': record.get('unit_price_for_rent'),
                    'price_change_sale': record.get('price_change_sale'),
                    'price_change_rent': record.get('price_change_rent'),
                    'annual_price_change_sale': record.get('annual_price_change_sale'),
                    'annual_price_change_rent': record.get('annual_price_change_rent'),
                    'yield': record.get('yield'),
                    'count_for_sale': record.get('count_for_sale'),
                    'count_for_rent': record.get('count_for_rent')
                }
                trends.append(trend)
            
            return jsonify({
                'success': True,
                'trends': trends,
                'total_count': len(trends)
            })
        else:
            logger.info(f"‚ö†Ô∏è –¢—Ä–µ–Ω–¥—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏")
            return jsonify({
                'success': True,
                'trends': [],
                'total_count': 0,
                'message': 'No trends found for this location'
            })
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/price_trends', methods=['POST'])
def api_price_trends():
    """
    API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–Ω–∞–º–∏–∫–µ —Ü–µ–Ω –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    """
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': 'Missing request data'}), 400
        
        location_codes = data.get('location_codes', {})
        area = data.get('area')
        
        if not location_codes:
            return jsonify({'error': 'Missing location_codes'}), 400
        
        if not area or area == 'unknown':
            return jsonify({'error': 'Missing or invalid area'}), 400
        
        try:
            area_value = float(area)
        except (ValueError, TypeError):
            return jsonify({'error': 'Invalid area value'}), 400
        
        logger.info(f"üìà –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–¥–∞—Ö —Ü–µ–Ω –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {location_codes}, –ø–ª–æ—â–∞–¥—å: {area_value} –º¬≤")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥—ã –ª–æ–∫–∞—Ü–∏–∏:")
        logger.info(f"  - country_id: {location_codes.get('country_id')} (—Ç–∏–ø: {type(location_codes.get('country_id'))})")
        logger.info(f"  - city_id: {location_codes.get('city_id')} (—Ç–∏–ø: {type(location_codes.get('city_id'))})")
        logger.info(f"  - county_id: {location_codes.get('county_id')} (—Ç–∏–ø: {type(location_codes.get('county_id'))})")
        logger.info(f"  - district_id: {location_codes.get('district_id')} (—Ç–∏–ø: {type(location_codes.get('district_id'))})")
        
        # –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_price_trends_data
        logger.info("üîç –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_price_trends_data –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ property_trends
        logger.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã property_trends...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        try:
            total_count_query = supabase.table('property_trends').select('id', count='exact')
            total_count_response = total_count_query.execute()
            total_count = total_count_response.count if hasattr(total_count_response, 'count') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            logger.info(f"üîç –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ property_trends: {total_count}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π: {e}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ country_id —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        try:
            countries_query = supabase.table('property_trends').select('country_id').limit(10)
            countries_response = countries_query.execute()
            if countries_response.data:
                unique_countries = list(set([r.get('country_id') for r in countries_response.data if r.get('country_id') is not None]))
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ country_id –≤ —Ç–∞–±–ª–∏—Ü–µ: {unique_countries}")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å country_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è country_id: {e}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã
        try:
            country_query = supabase.table('property_trends').select('*').eq('country_id', location_codes['country_id']).limit(5)
            country_response = country_query.execute()
            logger.info(f"üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è country_id={location_codes['country_id']}: –Ω–∞–π–¥–µ–Ω–æ {len(country_response.data) if country_response.data else 0} –∑–∞–ø–∏—Å–µ–π")
            if country_response.data:
                logger.info(f"üîç –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã: {country_response.data[0]}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω—ã: {e}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞
        try:
            city_query = supabase.table('property_trends').select('*').eq('country_id', location_codes['country_id']).eq('city_id', location_codes['city_id']).limit(5)
            city_response = city_query.execute()
            logger.info(f"üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è city_id={location_codes['city_id']}: –Ω–∞–π–¥–µ–Ω–æ {len(city_response.data) if city_response.data else 0} –∑–∞–ø–∏—Å–µ–π")
            if city_response.data:
                logger.info(f"üîç –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_response.data[0]}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞: {e}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—à–µ–≥–æ –æ–∫—Ä—É–≥–∞
        try:
            county_query = supabase.table('property_trends').select('*').eq('country_id', location_codes['country_id']).eq('city_id', location_codes['city_id']).eq('county_id', location_codes['county_id']).limit(5)
            county_response = county_query.execute()
            logger.info(f"üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è county_id={location_codes['county_id']}: –Ω–∞–π–¥–µ–Ω–æ {len(county_response.data) if county_response.data else 0} –∑–∞–ø–∏—Å–µ–π")
            if county_response.data:
                logger.info(f"üîç –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–∫—Ä—É–≥–∞: {county_response.data[0]}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–∫—Ä—É–≥–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
        if get_price_trends_data is None:
            logger.error("‚ùå –§—É–Ω–∫—Ü–∏—è get_price_trends_data –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
            return jsonify({
                'error': '–§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                'trend': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
                'change_3y': 0,
                'forecast_3m': 0,
                'analysis': '–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                'recommendation': '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
                'chart_data': []
            }), 500
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–¥–∞—Ö —Ü–µ–Ω
        trends_data = get_price_trends_data(supabase, location_codes, area_value)
        
        if 'error' in trends_data:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–¥–∞—Ö: {trends_data['error']}")
            return jsonify(trends_data), 400
        
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–¥–∞—Ö —Ü–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã: {trends_data['trend']}")
        return jsonify(trends_data)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API price_trends: {e}")
        return jsonify({
            'error': f'Internal server error: {str(e)}',
            'trend': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
            'change_3y': 0,
            'forecast_3m': 0,
            'analysis': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
            'recommendation': '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
            'chart_data': []
        }), 500


@app.route('/api/region_insights', methods=['POST'])
def api_region_insights():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ AI-–≤—ã–≤–æ–¥–∞ –ø–æ –¥–∞–Ω–Ω—ã–º —Ä–µ–≥–∏–æ–Ω–∞"""
    try:
        data = request.json or {}
        region_data = data.get('region_data', {})
        user_language = data.get('language', 'ru')
        
        logger.info(f"üß† –ó–∞–ø—Ä–æ—Å AI-–≤—ã–≤–æ–¥–∞ –¥–ª—è —è–∑—ã–∫–∞: {user_language}")
        
        # –ü–æ–ª—É—á–∞–µ–º OpenAI API –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            logger.info("üîç –ò—â–µ–º OpenAI API –∫–ª—é—á –≤ —Ç–∞–±–ª–∏—Ü–µ api_keys...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...")
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
                test_result = supabase.table('api_keys').select('id').limit(1).execute()
                logger.info(f"üìä –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã api_keys: {test_result}")
            except Exception as table_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ api_keys: {table_error}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
                possible_tables = ['api_keys', 'apikeys', 'api_keys_table', 'keys', 'api_keys_v1']
                for table_name in possible_tables:
                    try:
                        logger.info(f"üîç –ü—Ä–æ–±—É–µ–º —Ç–∞–±–ª–∏—Ü—É: {table_name}")
                        test_result = supabase.table(table_name).select('id').limit(1).execute()
                        logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} –¥–æ—Å—Ç—É–ø–Ω–∞")
                        break
                    except Exception as e:
                        logger.info(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
                        continue
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
            logger.info("üîç –í–∞—Ä–∏–∞–Ω—Ç 1: –ó–∞–ø—Ä–æ—Å —Å select='*'")
            api_key_result = supabase.table('api_keys').select('*').eq('key_name', 'OPENAI_API').execute()
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ API –∫–ª—é—á–∞: {api_key_result}")
            logger.info(f"üìä –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(api_key_result)}")
            logger.info(f"üìä –î–∞–Ω–Ω—ã–µ: {api_key_result.data}")
            logger.info(f"üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(api_key_result.data)}")
            logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(api_key_result.data) if api_key_result.data else 0}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if not api_key_result.data or len(api_key_result.data) == 0:
                logger.warning("‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π...")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                logger.info("üîç –í–∞—Ä–∏–∞–Ω—Ç 2: –ó–∞–ø—Ä–æ—Å —Å select='key_value'")
                api_key_result2 = supabase.table('api_keys').select('key_value').eq('key_name', 'OPENAI_API').execute()
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {api_key_result2}")
                logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {api_key_result2.data}")
                
                if api_key_result2.data and len(api_key_result2.data) > 0:
                    api_key_result = api_key_result2
                    logger.info("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                else:
                    logger.error("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    return jsonify({'success': False, 'error': 'OpenAI API key not found'}), 500
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á
            if api_key_result.data and len(api_key_result.data) > 0:
                first_record = api_key_result.data[0]
                logger.info(f"üìä –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {first_record}")
                logger.info(f"üìä –ö–ª—é—á–∏ –∑–∞–ø–∏—Å–∏: {list(first_record.keys()) if first_record else 'None'}")
                
                if 'key_value' in first_record:
                    openai_api_key = first_record['key_value']
                    logger.info(f"‚úÖ OpenAI API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {openai_api_key[:20]}...")
                else:
                    logger.error(f"‚ùå –ü–æ–ª–µ 'key_value' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–ø–∏—Å–∏: {first_record}")
                    return jsonify({'success': False, 'error': 'key_value field not found in record'}), 500
            else:
                logger.error("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return jsonify({'success': False, 'error': 'OpenAI API key not found'}), 500
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OpenAI API –∫–ª—é—á–∞: {e}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return jsonify({'success': False, 'error': 'Failed to get OpenAI API key'}), 500
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —è–∑—ã–∫–µ
        language_prompts = {
            'ru': '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞–ø–∏—à–∏ –æ–¥–∏–Ω —Å–∂–∞—Ç—ã–π –∞–±–∑–∞—Ü –∫–∞–∫ –≤—ã–≤–æ–¥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∏—ç–ª—Ç–æ—Ä–∞. –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ç—Ä–µ–Ω–¥–∞—Ö —Ä—ã–Ω–∫–∞, —Å–ø—Ä–æ—Å–µ –∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞—Ö. –ù–µ —É–∫–∞–∑—ã–≤–∞–π —á–∏—Å–ª–∞, —Ç–æ–ª—å–∫–æ –∏–Ω—Å–∞–π—Ç—ã. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–∏—à–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.',
            'en': 'Analyze this real estate data and write one concise realtor insight paragraph. Focus on market trends, demand, and best investment segments. Do NOT list numbers‚Äîgive actionable insights only. Write your response in English.',
            'de': 'Analysiere diese Immobiliendaten und erstelle einen kurzen Absatz mit professioneller Makler-Einsch√§tzung. Konzentriere dich auf Markttrends, Nachfrage und die besten Investitionssegmente. Keine Zahlen nennen, nur aussagekr√§ftige Erkenntnisse. Schreibe deine Antwort auf Deutsch.',
            'fr': 'Analysez ces donn√©es immobili√®res et r√©digez un paragraphe concis comme un avis de professionnel de l\'immobilier. Concentrez-vous sur les tendances du march√©, la demande et les meilleurs segments d\'investissement. Ne donnez pas de chiffres, uniquement des insights exploitables. √âcrivez votre r√©ponse en fran√ßais.',
            'tr': 'Bu gayrimenkul verilerini analiz edin ve profesyonel bir emlak danƒ±≈ümanƒ± gibi kƒ±sa bir paragraf yazƒ±n. Piyasa trendleri, talep ve en iyi yatƒ±rƒ±m segmentlerine odaklanƒ±n. Sayƒ± vermeyin, sadece uygulanabilir i√ßg√∂r√ºler sunun. Cevabƒ±nƒ±zƒ± T√ºrk√ße yazƒ±n.'
        }
        
        prompt = language_prompts.get(user_language, language_prompts['en'])
        
        logger.info(f"üîç –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {prompt}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI
        data_summary = {
            'location': region_data.get('location', {}),
            'general_data': region_data.get('general_data', []),
            'house_type_data': region_data.get('house_type_data', []),
            'floor_segment_data': region_data.get('floor_segment_data', []),
            'age_data': region_data.get('age_data', []),
            'heating_data': region_data.get('heating_data', [])
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_text = f"""
        –î–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω—É:
        {data_summary}
        
        {prompt}
        """
        
        try:
            import openai
            client = openai.OpenAI(api_key=openai_api_key)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —è–∑—ã–∫–µ
            system_messages = {
                'ru': "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –ü–∏—à–∏ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ: '–†—ã–Ω–æ–∫ Kepez, Baraj –≤ –ê–Ω—Ç–∞–ª—å–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é, –ø—Ä–æ–¥–∞—é—â–µ–π—Å—è –∏–ª–∏ —Å–¥–∞—é—â–µ–π—Å—è –≤ –∞—Ä–µ–Ω–¥—É –ø—Ä–∏–º–µ—Ä–Ω–æ –∑–∞ –¥–≤–∞ –º–µ—Å—è—Ü–∞, –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –æ—Ç –∞—Ä–µ–Ω–¥—ã –≤ —Å—Ä–µ–¥–Ω–µ–º 7-8% –≥–æ–¥–æ–≤—ã—Ö. –ù–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º —Å–µ–≥–º–µ–Ω—Ç–æ–º —è–≤–ª—è—é—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä—ã 2+1 –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ 5-10 –ª–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞—é—â–∏–µ –ª—É—á—à–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –æ—Ç –∞—Ä–µ–Ω–¥—ã. –ë–æ–ª–µ–µ –Ω–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã 1+1 –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞, —á–µ–º –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –æ—Ç –∞—Ä–µ–Ω–¥—ã, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ö —ç—Ç–∞–∂–∞—Ö —Å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∞—Ä–µ–Ω–¥—ã.' –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, —É–ø–æ–º–∏–Ω–∞–π —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –≤–æ–∑—Ä–∞—Å—Ç –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏. –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ù–∏–∫–∞–∫–∏—Ö –æ–±—â–∏—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π.",
                'en': "You are a professional real estate analyst. Write exactly like the example: 'The Kepez, Baraj market in Antalya shows steady demand with properties selling or renting within about two months and rental yields averaging 7‚Äì8% annually. The most attractive investment segment is 2+1 apartments aged 5‚Äì10 years, offering the best balance between price and rental return. Newer 1+1 units are better suited for capital appreciation rather than high rental income, while mid-floor apartments with air-conditioning provide the strongest liquidity and rental appeal.' Be specific, mention actual property types, ages, and features. Maximum 3 sentences. No general statements.",
                'de': "Du bist ein professioneller Immobilienanalyst. Schreibe genau wie im Beispiel: 'Der Kepez, Baraj Markt in Antalya zeigt eine stabile Nachfrage mit Immobilien, die sich in etwa zwei Monaten verkaufen oder vermieten lassen und Mietrenditen von durchschnittlich 7-8% j√§hrlich erzielen. Das attraktivste Investitionssegment sind 2+1 Wohnungen im Alter von 5-10 Jahren, die das beste Gleichgewicht zwischen Preis und Mietrendite bieten. Neuere 1+1 Einheiten sind besser f√ºr potenzielle Kapitalgewinne als f√ºr hohe Mieteinnahmen geeignet, w√§hrend Wohnungen auf mittleren Etagen mit Klimaanlage die h√∂chste Liquidit√§t und Mietattraktivit√§t bieten.' Sei spezifisch, erw√§hne tats√§chliche Immobilientypen, Alter und Merkmale. Maximal 3 S√§tze. Keine allgemeinen Aussagen.",
                'fr': "Vous √™tes un analyste immobilier professionnel. √âcrivez exactement comme dans l'exemple : 'Le march√© Kepez, Baraj √† Antalya montre une demande stable avec des propri√©t√©s se vendant ou se louant en environ deux mois et des rendements locatifs moyens de 7 √† 8 % par an. Le segment d'investissement le plus attractif est celui des appartements 2+1 √¢g√©s de 5 √† 10 ans, offrant le meilleur √©quilibre entre prix et rendement locatif. Les unit√©s 1+1 plus r√©centes sont mieux adapt√©es √† l'appr√©ciation du capital plut√¥t qu'aux revenus locatifs √©lev√©s, tandis que les appartements aux √©tages moyens avec climatisation offrent la plus forte liquidit√© et l'attrait locatif.' Soyez sp√©cifique, mentionnez les types de propri√©t√©s r√©els, l'√¢ge et les caract√©ristiques. Maximum 3 phrases. Aucune d√©claration g√©n√©rale.",
                'tr': "Sen profesyonel bir emlak analistisin. Tam olarak ≈üu √∂rnekteki gibi yaz: 'Antalya'daki Kepez, Baraj pazarƒ±, m√ºlklerin yakla≈üƒ±k iki ay i√ßinde satƒ±ldƒ±ƒüƒ± veya kiralandƒ±ƒüƒ± ve kiralama getirisinin yƒ±llƒ±k ortalama %7-8 olduƒüu istikrarlƒ± bir talep g√∂steriyor. En √ßekici yatƒ±rƒ±m segmenti, fiyat ve kiralama getirisi arasƒ±nda en iyi dengeyi sunan 5-10 ya≈üƒ±ndaki 2+1 dairelerdir. Daha yeni 1+1 birimler, y√ºksek kiralama gelirinden ziyade potansiyel sermaye artƒ±≈üƒ± i√ßin daha uygundur, klima ile orta kat daireler ise en g√º√ßl√º likidite ve kiralama √ßekiciliƒüini saƒülar.' Spesifik olun, ger√ßek m√ºlk t√ºrlerini, ya≈üƒ±nƒ± ve √∂zelliklerini belirtin. Maksimum 3 c√ºmle. Genel ifadeler yok."
            }
            
            system_message = system_messages.get(user_language, system_messages['en'])
            
            logger.info(f"üîç –í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —è–∑—ã–∫–∞ {user_language}")
            
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_message},
                    {"role": "user", "content": analysis_text}
                ],
                max_tokens=150,
                temperature=0.4
            )
            
            insights = response.choices[0].message.content.strip()
            logger.info(f"‚úÖ AI-–≤—ã–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω: {insights[:100]}...")
            
            return jsonify({
                'success': True,
                'insights': insights,
                'language': user_language
            })
            
        except ImportError:
            logger.error("‚ùå –ú–æ–¥—É–ª—å openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return jsonify({'success': False, 'error': 'OpenAI module not available'}), 500
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
            return jsonify({'success': False, 'error': f'OpenAI API error: {str(e)}'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API region_insights: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


@app.route('/api/translations', methods=['POST'])
def api_translations():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    try:
        data = request.get_json()
        language = data.get('language', 'ru')
        
        if language not in ['ru', 'en', 'de', 'fr', 'tr']:
            language = 'ru'
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        return jsonify(locales.get(language, locales['ru']))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API translations: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/test_api_keys', methods=['GET'])
def api_test_api_keys():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã api_keys"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã api_keys")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...")
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            test_connection = supabase.table('users').select('id').limit(1).execute()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç: {test_connection}")
        except Exception as conn_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {conn_error}")
            return jsonify({'success': False, 'error': f'Supabase connection failed: {str(conn_error)}'}), 500
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—é —Ç–∞–±–ª–∏—Ü—É
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É api_keys...")
        try:
            result = supabase.table('api_keys').select('*').execute()
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã: {result}")
            logger.info(f"üìä –î–∞–Ω–Ω—ã–µ: {result.data}")
            logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(result.data) if result.data else 0}")
            
            if result.data:
                logger.info("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ api_keys:")
                for i, record in enumerate(result.data):
                    logger.info(f"  –ó–∞–ø–∏—Å—å {i+1}: {record}")
            else:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ api_keys –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
        except Exception as table_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ api_keys: {table_error}")
            return jsonify({'success': False, 'error': f'Table access failed: {str(table_error)}'}), 500
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ OPENAI_API
        logger.info("üîç –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å key_name='OPENAI_API'...")
        try:
            openai_result = supabase.table('api_keys').select('*').eq('key_name', 'OPENAI_API').execute()
            logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ OPENAI_API: {openai_result}")
            logger.info(f"üîç –î–∞–Ω–Ω—ã–µ OPENAI_API: {openai_result.data}")
            
            if openai_result.data and len(openai_result.data) > 0:
                logger.info("‚úÖ –ó–∞–ø–∏—Å—å OPENAI_API –Ω–∞–π–¥–µ–Ω–∞")
                openai_record = openai_result.data[0]
                logger.info(f"üìä –ó–∞–ø–∏—Å—å: {openai_record}")
                logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(openai_record.keys())}")
                
                if 'key_value' in openai_record:
                    key_value = openai_record['key_value']
                    logger.info(f"‚úÖ –ü–æ–ª–µ key_value –Ω–∞–π–¥–µ–Ω–æ: {key_value[:20]}...")
                else:
                    logger.warning("‚ö†Ô∏è –ü–æ–ª–µ key_value –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–ø–∏—Å–∏")
            else:
                logger.warning("‚ö†Ô∏è –ó–∞–ø–∏—Å—å OPENAI_API –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as search_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ OPENAI_API: {search_error}")
            return jsonify({'success': False, 'error': f'Search failed: {str(search_error)}'}), 500
        
        return jsonify({
            'success': True,
            'total_records': len(result.data) if result.data else 0,
            'all_records': result.data,
            'openai_records': openai_result.data if 'openai_result' in locals() else [],
            'message': 'Table api_keys checked successfully'
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è api_keys: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return jsonify({'success': False, 'error': str(e)}), 500


if __name__ == '__main__':
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    logger.info("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
    final_test = safe_db_operation(
        lambda: supabase.table('users').select('id').limit(1).execute()
    )
    if final_test is not None:
        logger.info("‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase —É—Å–ø–µ—à–Ω–∞")
    else:
        logger.error("‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –Ω–µ —É–¥–∞–ª–∞—Å—å")
    
    run_flask()