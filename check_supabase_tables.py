#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü –≤ Supabase
"""

import os
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY')

def check_supabase_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
    print(f"URL: {SUPABASE_URL}")
    print(f"Key: {SUPABASE_ANON_KEY[:20]}..." if SUPABASE_ANON_KEY else "Key: –ù–ï –ù–ê–ô–î–ï–ù")
    
    if not SUPABASE_URL or not SUPABASE_ANON_KEY:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    return True

def check_table_exists(table_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
    headers = {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
        'Content-Type': 'application/json'
    }
    
    url = f"{SUPABASE_URL}/rest/v1/{table_name}?select=count"
    
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
        elif response.status_code == 404:
            print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        else:
            print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name}: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return False

def test_simple_insert(table_name):
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    headers = {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
        'Content-Type': 'application/json',
        'Prefer': 'return=minimal'
    }
    
    url = f"{SUPABASE_URL}/rest/v1/{table_name}"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è short_term_rentals
    if table_name == 'short_term_rentals':
        test_data = {
            'property_id': 'test_001',
            'address': 'Test Address',
            'latitude': 36.8969,
            'longitude': 30.7133,
            'city': 'Antalya',
            'district': 'Lara',
            'property_type': 'Apartment',
            'bedrooms': 2,
            'bathrooms': 1,
            'max_guests': 4,
            'price_per_night': 100.00,
            'price_currency': 'USD',
            'source': 'test'
        }
    else:
        print(f"‚ö†Ô∏è –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–ª—è {table_name} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        return False
    
    try:
        response = requests.post(url, headers=headers, json=test_data)
        if response.status_code == 201:
            print(f"‚úÖ –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –≤ {table_name} —É—Å–ø–µ—à–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ {table_name}: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {table_name}: {e}")
        return False

def check_rls_policies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ RLS"""
    print("\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ RLS...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    headers = {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
        'Content-Type': 'application/json'
    }
    
    tables = ['short_term_rentals', 'long_term_rentals', 'property_sales', 'historical_prices', 'market_statistics']
    
    for table in tables:
        url = f"{SUPABASE_URL}/rest/v1/{table}?select=count"
        try:
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                print(f"‚úÖ RLS –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è {table} —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ùå RLS –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è {table} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ RLS –¥–ª—è {table}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Supabase...\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not check_supabase_connection():
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...")
    tables = ['short_term_rentals', 'long_term_rentals', 'property_sales', 'historical_prices', 'market_statistics']
    
    all_tables_exist = True
    for table in tables:
        if not check_table_exists(table):
            all_tables_exist = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS
    check_rls_policies()
    
    # –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏
    if all_tables_exist:
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        test_simple_insert('short_term_rentals')
    
    print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if not all_tables_exist:
        print("1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç supabase_schema_safe.sql –≤ Supabase Dashboard")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –≤ Table Editor")
    else:
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")

if __name__ == "__main__":
    main() 