#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–æ–º –ª–æ–∫–∞—Ü–∏–π
"""

import json
import os
from flask import Flask, jsonify, request

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
def load_static_locations():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('static_locations.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å –¥–∞–Ω–Ω—ã–º–∏
locations_data = None

@app.before_first_request
def initialize_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    global locations_data
    locations_data = load_static_locations()
    if locations_data:
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {locations_data['metadata']['total_countries']} —Å—Ç—Ä–∞–Ω, {locations_data['metadata']['total_cities']} –≥–æ—Ä–æ–¥–æ–≤")

@app.route('/api/locations/countries', methods=['GET'])
def api_locations_countries():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if not locations_data:
        return jsonify({'success': False, 'error': 'Data not loaded'}), 500
    
    try:
        countries = locations_data['countries']
        return jsonify({'success': True, 'countries': countries})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/cities', methods=['POST'])
def api_locations_cities():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ country_id –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if not locations_data:
        return jsonify({'success': False, 'error': 'Data not loaded'}), 500
    
    data = request.json or {}
    country_id = data.get('country_id')
    
    if not country_id:
        return jsonify({'error': 'country_id required'}), 400
    
    try:
        cities = locations_data['cities'].get(str(country_id), [])
        return jsonify({'success': True, 'cities': cities})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/counties', methods=['POST'])
def api_locations_counties():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∫—Ä—É–≥–æ–≤ –ø–æ city_id –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if not locations_data:
        return jsonify({'success': False, 'error': 'Data not loaded'}), 500
    
    data = request.json or {}
    city_id = data.get('city_id')
    
    if not city_id:
        return jsonify({'error': 'city_id required'}), 400
    
    try:
        counties = locations_data['counties'].get(str(city_id), [])
        return jsonify({'success': True, 'counties': counties})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/districts', methods=['POST'])
def api_locations_districts():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–æ–≤ –ø–æ county_id –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if not locations_data:
        return jsonify({'success': False, 'error': 'Data not loaded'}), 500
    
    data = request.json or {}
    county_id = data.get('county_id')
    
    if not county_id:
        return jsonify({'error': 'county_id required'}), 400
    
    try:
        districts = locations_data['districts'].get(str(county_id), [])
        return jsonify({'success': True, 'districts': districts})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/locations/status', methods=['GET'])
def api_locations_status():
    """–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π"""
    if not locations_data:
        return jsonify({'success': False, 'error': 'Data not loaded'}), 500
    
    return jsonify({
        'success': True,
        'status': {
            'loaded': True,
            'metadata': locations_data['metadata'],
            'file_size': os.path.getsize('static_locations.json') if os.path.exists('static_locations.json') else 0
        }
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    app.run(host='0.0.0.0', port=8081, debug=True)
