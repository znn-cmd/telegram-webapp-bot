#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import time
import requests
import json
from concurrent.futures import ThreadPoolExecutor, as_completed

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://aaadvisor-zaicevn.amvera.io"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
TEST_ENDPOINTS = [
    "/api/locations/countries",
    "/api/currency/rates", 
    "/api/user",
    "/api/performance/stats"
]

def test_endpoint(endpoint, method="GET", data=None):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ endpoint"""
    url = f"{BASE_URL}{endpoint}"
    start_time = time.time()
    
    try:
        if method == "GET":
            response = requests.get(url, timeout=30)
        elif method == "POST":
            response = requests.post(url, json=data, timeout=30)
        
        execution_time = time.time() - start_time
        
        return {
            'endpoint': endpoint,
            'method': method,
            'status_code': response.status_code,
            'execution_time': execution_time,
            'response_size': len(response.content),
            'success': response.status_code == 200
        }
    except Exception as e:
        execution_time = time.time() - start_time
        return {
            'endpoint': endpoint,
            'method': method,
            'status_code': 0,
            'execution_time': execution_time,
            'response_size': 0,
            'success': False,
            'error': str(e)
        }

def test_concurrent_requests(endpoint, num_requests=10):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {num_requests} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ {endpoint}")
    
    with ThreadPoolExecutor(max_workers=10) as executor:
        futures = [executor.submit(test_endpoint, endpoint) for _ in range(num_requests)]
        
        results = []
        for future in as_completed(futures):
            results.append(future.result())
    
    return results

def test_cache_performance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞")
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º)
    print("üìä –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∫—ç—à MISS)...")
    result1 = test_endpoint("/api/locations/countries")
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º)
    print("üìä –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∫—ç—à HIT)...")
    result2 = test_endpoint("/api/locations/countries")
    
    # –¢—Ä–µ—Ç–∏–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º)
    print("üìä –¢—Ä–µ—Ç–∏–π –∑–∞–ø—Ä–æ—Å (–∫—ç—à HIT)...")
    result3 = test_endpoint("/api/locations/countries")
    
    return {
        'first_request': result1,
        'second_request': result2,
        'third_request': result3,
        'cache_improvement': result1['execution_time'] / result2['execution_time'] if result2['execution_time'] > 0 else 0
    }

def test_performance_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    try:
        response = requests.get(f"{BASE_URL}/api/performance/stats", timeout=30)
        if response.status_code == 200:
            stats = response.json()
            return stats
        else:
            return {'error': f'Status code: {response.status_code}'}
    except Exception as e:
        return {'error': str(e)}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Aaadviser")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ endpoints
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö endpoints:")
    for endpoint in TEST_ENDPOINTS:
        result = test_endpoint(endpoint)
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"{status} {endpoint}: {result['execution_time']:.3f}s ({result['status_code']})")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞:")
    cache_results = test_cache_performance()
    
    print(f"üìä –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {cache_results['first_request']['execution_time']:.3f}s")
    print(f"üìä –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å: {cache_results['second_request']['execution_time']:.3f}s")
    print(f"üìä –¢—Ä–µ—Ç–∏–π –∑–∞–ø—Ä–æ—Å: {cache_results['third_request']['execution_time']:.3f}s")
    print(f"üöÄ –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {cache_results['cache_improvement']:.1f}x")
    
    # –¢–µ—Å—Ç 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
    concurrent_results = test_concurrent_requests("/api/locations/countries", 5)
    
    successful_requests = [r for r in concurrent_results if r['success']]
    avg_time = sum(r['execution_time'] for r in successful_requests) / len(successful_requests) if successful_requests else 0
    
    print(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(successful_requests)}/{len(concurrent_results)}")
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_time:.3f}s")
    
    # –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    stats = test_performance_stats()
    
    if 'error' not in stats:
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        if 'overall_stats' in stats:
            overall = stats['overall_stats']
            print(f"üìä –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {overall.get('uptime_seconds', 0):.0f} —Å–µ–∫—É–Ω–¥")
            print(f"üìä –í—Å–µ–≥–æ –º–µ—Ç—Ä–∏–∫: {overall.get('total_metrics_recorded', 0)}")
            print(f"üìä –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {overall.get('total_errors', 0)}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['error']}")
    
    # –¢–µ—Å—Ç 5: –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:")
    try:
        response = requests.post(f"{BASE_URL}/api/performance/cache/clear", timeout=30)
        if response.status_code == 200:
            print("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if cache_results['cache_improvement'] > 2:
        print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
    else:
        print("‚ö†Ô∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ª—É—á—à–µ")
    
    print("üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ TTL –∫—ç—à–µ–π:")
    print("   - –õ–æ–∫–∞—Ü–∏–∏: 1 –Ω–µ–¥–µ–ª—è")
    print("   - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç: 1 –¥–µ–Ω—å") 
    print("   - –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 1 –Ω–µ–¥–µ–ª—è")
    print("   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 1 –Ω–µ–¥–µ–ª—è")
    
    if avg_time < 1.0:
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API —Ö–æ—Ä–æ—à–∞—è")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–∞")
    
    if len(successful_requests) == len(concurrent_results):
        print("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π")

if __name__ == "__main__":
    main()
