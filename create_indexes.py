#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase
–£—Å–∫–æ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ë–î –≤ 5-20 —Ä–∞–∑
"""

import os
import logging
from supabase import create_client, Client
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_supabase_client():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase"""
    load_dotenv()
    
    url = os.getenv('SUPABASE_URL')
    key = os.getenv('SUPABASE_KEY')
    
    if not url or not key:
        raise ValueError("SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
    
    return create_client(url, key)

def execute_sql_script(supabase: Client, sql_script_path: str):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞"""
    try:
        with open(sql_script_path, 'r', encoding='utf-8') as file:
            sql_content = file.read()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        sql_commands = [cmd.strip() for cmd in sql_content.split(';') if cmd.strip() and not cmd.strip().startswith('--')]
        
        logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(sql_commands)} SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        for i, command in enumerate(sql_commands, 1):
            if command:
                try:
                    logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {i}/{len(sql_commands)}")
                    logger.debug(f"SQL: {command[:100]}...")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ Supabase
                    result = supabase.rpc('exec_sql', {'sql_query': command}).execute()
                    
                    logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {i} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    
                except Exception as e:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                    if "already exists" in str(e).lower() or "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(e):
                        logger.warning(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ {i}: –∏–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {i}: {e}")
                        logger.error(f"SQL: {command}")
        
        logger.info("üéâ –í—Å–µ SQL –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SQL —Ñ–∞–π–ª–∞: {e}")
        raise

def create_indexes_manually(supabase: Client):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
    
    indexes = [
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã locations
        {
            'name': 'idx_locations_country_id',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_locations_country_id ON locations(country_id)',
            'description': '–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω'
        },
        {
            'name': 'idx_locations_country_city',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_locations_country_city ON locations(country_id, city_id)',
            'description': '–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–µ'
        },
        {
            'name': 'idx_locations_city_county',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_locations_city_county ON locations(city_id, county_id)',
            'description': '–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π –ø–æ –≥–æ—Ä–æ–¥—É'
        },
        {
            'name': 'idx_locations_county_district',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_locations_county_district ON locations(county_id, district_id)',
            'description': '–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–æ–≤ –ø–æ –æ–±–ª–∞—Å—Ç–∏'
        },
        {
            'name': 'idx_locations_hierarchy',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_locations_hierarchy ON locations(country_id, city_id, county_id, district_id)',
            'description': '–°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ª–æ–∫–∞—Ü–∏–π'
        },
        {
            'name': 'idx_locations_country_name',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_locations_country_name ON locations(country_name)',
            'description': '–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç—Ä–∞–Ω—ã'
        },
        {
            'name': 'idx_locations_city_name',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_locations_city_name ON locations(city_name)',
            'description': '–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞'
        },
        {
            'name': 'idx_locations_county_name',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_locations_county_name ON locations(county_name)',
            'description': '–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ–±–ª–∞—Å—Ç–∏'
        },
        {
            'name': 'idx_locations_district_name',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_locations_district_name ON locations(district_name)',
            'description': '–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–π–æ–Ω–∞'
        },
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users (idx_users_telegram_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        {
            'name': 'idx_users_status',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_users_status ON users(user_status)',
            'description': '–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
            'name': 'idx_users_telegram_status',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_users_telegram_status ON users(telegram_id, user_status)',
            'description': '–°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–≤'
        },
        {
            'name': 'idx_users_period_end',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_users_period_end ON users(period_end)',
            'description': '–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥—É –ø–æ–¥–ø–∏—Å–∫–∏'
        },
        {
            'name': 'idx_users_language',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_users_language ON users(language)',
            'description': '–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —è–∑—ã–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
            'name': 'idx_users_balance',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_users_balance ON users(balance)',
            'description': '–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
            'name': 'idx_users_registration_date',
            'sql': 'CREATE INDEX IF NOT EXISTS idx_users_registration_date ON users(registration_date)',
            'description': '–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
        }
    ]
    
    logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ {len(indexes)} –∏–Ω–¥–µ–∫—Å–æ–≤...")
    
    for i, index in enumerate(indexes, 1):
        try:
            logger.info(f"üìù {i}/{len(indexes)}: {index['description']}")
            logger.debug(f"SQL: {index['sql']}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
            result = supabase.rpc('exec_sql', {'sql_query': index['sql']}).execute()
            
            logger.info(f"‚úÖ –ò–Ω–¥–µ–∫—Å '{index['name']}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            if "already exists" in str(e).lower() or "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(e):
                logger.warning(f"‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å '{index['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ '{index['name']}': {e}")

def check_database_connection(supabase: Client):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        result = supabase.table('users').select('id').limit(1).execute()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
        supabase = create_supabase_client()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not check_database_connection(supabase):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        create_indexes_manually(supabase)
        
        logger.info("üéâ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üìä –û–∂–∏–¥–∞–µ–º–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: 5-20 —Ä–∞–∑ –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
