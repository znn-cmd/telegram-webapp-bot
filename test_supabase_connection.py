#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
"""

import os
import sys
import time
import logging
import ssl
import socket
from urllib.parse import urlparse
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_network_connectivity():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Å–µ—Ç–µ–≤—É—é —Å–≤—è–∑–Ω–æ—Å—Ç—å"""
    print("\nüîç –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏")
    print("=" * 50)
    
    supabase_url = os.getenv("SUPABASE_URL")
    if not supabase_url:
        print("‚ùå SUPABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–æ—Å—Ç –∏–∑ URL
    parsed_url = urlparse(supabase_url)
    host = parsed_url.hostname
    port = 443  # HTTPS –ø–æ—Ä—Ç
    
    print(f"üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host}:{port}")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        result = sock.connect_ex((host, port))
        sock.close()
        
        if result == 0:
            print(f"‚úÖ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {host}:{port} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {host}:{port}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏: {e}")
        return False

def test_ssl_handshake():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SSL handshake"""
    print("\nüîê –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL handshake")
    print("=" * 50)
    
    supabase_url = os.getenv("SUPABASE_URL")
    parsed_url = urlparse(supabase_url)
    host = parsed_url.hostname
    port = 443
    
    print(f"üîí –ü–æ–ø—ã—Ç–∫–∞ SSL handshake —Å {host}:{port}")
    
    # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    timeouts = [5, 10, 30, 60]
    
    for timeout in timeouts:
        print(f"\n‚è±Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º {timeout} —Å–µ–∫—É–Ω–¥...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = ssl.create_default_context()
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç
            with socket.create_connection((host, port), timeout=timeout) as sock:
                with context.wrap_socket(sock, server_hostname=host) as ssock:
                    print(f"‚úÖ SSL handshake —É—Å–ø–µ—à–µ–Ω —Å —Ç–∞–π–º–∞—É—Ç–æ–º {timeout}—Å")
                    print(f"   –ü—Ä–æ—Ç–æ–∫–æ–ª: {ssock.version()}")
                    print(f"   –®–∏—Ñ—Ä: {ssock.cipher()}")
                    return True
                    
        except socket.timeout:
            print(f"‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å {timeout}—Å")
        except ssl.SSLError as e:
            print(f"‚ùå SSL –æ—à–∏–±–∫–∞: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return False

def test_supabase_client():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Supabase –∫–ª–∏–µ–Ω—Ç"""
    print("\nüîß –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase –∫–ª–∏–µ–Ω—Ç–∞")
    print("=" * 50)
    
    try:
        from supabase_client import get_supabase_client
        
        print("üì° –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase...")
        client = get_supabase_client()
        
        print("üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        result = client.table('users').select('id').limit(1).execute()
        
        print("‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Supabase –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_dns_resolution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"""
    print("\nüåê –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS")
    print("=" * 50)
    
    supabase_url = os.getenv("SUPABASE_URL")
    parsed_url = urlparse(supabase_url)
    host = parsed_url.hostname
    
    try:
        ip_address = socket.gethostbyname(host)
        print(f"‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {host} -> {ip_address}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        try:
            hostname, _, _ = socket.gethostbyaddr(ip_address)
            print(f"‚úÖ –û–±—Ä–∞—Ç–Ω–æ–µ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {ip_address} -> {hostname}")
        except:
            print(f"‚ö†Ô∏è  –û–±—Ä–∞—Ç–Ω–æ–µ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è {ip_address}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_key = os.getenv("SUPABASE_ANON_KEY")
    
    print(f"üìã SUPABASE_URL: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if supabase_url else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üìã SUPABASE_ANON_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if supabase_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    if not supabase_url or not supabase_key:
        print("\n‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ", test_dns_resolution),
        ("–°–µ—Ç–µ–≤–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å", test_network_connectivity),
        ("SSL Handshake", test_ssl_handshake),
        ("Supabase –∫–ª–∏–µ–Ω—Ç", test_supabase_client)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 70)
    
    for test_name, success in results:
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{test_name}: {status}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    failed_tests = [name for name, success in results if not success]
    if failed_tests:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if "DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ" in failed_tests:
            print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS")
            print("- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ DNS —Å–µ—Ä–≤–µ—Ä—ã (8.8.8.8, 1.1.1.1)")
        
        if "–°–µ—Ç–µ–≤–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å" in failed_tests:
            print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞/–ø—Ä–æ–∫—Å–∏")
            print("- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç 443 –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        if "SSL Handshake" in failed_tests:
            print("- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–∞–π–º–∞—É—Ç—ã")
            print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è")
            print("- –û–±–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: pip install --upgrade certifi")
        
        if "Supabase –∫–ª–∏–µ–Ω—Ç" in failed_tests:
            print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SUPABASE_URL –∏ SUPABASE_ANON_KEY")
            print("- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å supabase-py: pip install --upgrade supabase")

if __name__ == "__main__":
    main()