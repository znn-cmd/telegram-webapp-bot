#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
"""

import csv
import os
import sys
from datetime import datetime
import requests
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
SUPABASE_URL = os.getenv('SUPABASE_URL', '')
SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY', '')

def check_supabase_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase"""
    if not SUPABASE_URL or not SUPABASE_ANON_KEY:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export SUPABASE_URL='your_supabase_url'")
        print("export SUPABASE_ANON_KEY='your_supabase_anon_key'")
        print("\n–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("SUPABASE_URL=your_supabase_url")
        print("SUPABASE_ANON_KEY=your_supabase_anon_key")
        sys.exit(1)

def make_supabase_request(endpoint, method='GET', data=None, upsert=False):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Supabase API"""
    headers = {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
        'Content-Type': 'application/json',
    }
    if method == 'POST' and upsert:
        headers['Prefer'] = 'resolution=merge-duplicates'
    elif method == 'POST':
        headers['Prefer'] = 'return=minimal'
    
    url = f"{SUPABASE_URL}/rest/v1/{endpoint}"
    
    try:
        if method == 'GET':
            response = requests.get(url, headers=headers)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=data)
        elif method == 'PUT':
            response = requests.put(url, headers=headers, json=data)
        elif method == 'DELETE':
            response = requests.delete(url, headers=headers)
        
        if response.status_code >= 400:
            print(f"\n--- –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞ Supabase ---")
            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"URL: {response.url}")
            print(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
            print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
            if data:
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
            print("-------------------------------\n")
            return None
        
        # –î–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True (–¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π)
        return True
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Supabase: {e}")
        return None

def load_short_term_rentals():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã"""
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã...")
    
    with open('test_data_short_term_rentals_full.csv', 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        
        for row in reader:
            data = {
                'property_id': row['property_id'],
                'address': row['address'],
                'latitude': float(row['latitude']) if row['latitude'] else None,
                'longitude': float(row['longitude']) if row['longitude'] else None,
                'city': row['city'],
                'district': row['district'],
                'property_type': row['property_type'],
                'bedrooms': int(row['bedrooms']) if row['bedrooms'] else None,
                'bathrooms': int(row['bathrooms']) if row['bathrooms'] else None,
                'max_guests': int(row['max_guests']) if row['max_guests'] else None,
                'amenities': [a.strip() for a in row['amenities'].split(',')] if row['amenities'] else [],
                'description': row['description'] or None,
                'photos': [p.strip() for p in row['photos'].split(',')] if row['photos'] else [],
                'source': row['source'],
                'source_url': row['source_url'] or None,
                'source_id': row['source_id'] or None,
                'price_per_night': float(row['price_per_night']) if row['price_per_night'] else None,
                'price_currency': row['price_currency'],
                'availability_rate': float(row['availability_rate']) if row['availability_rate'] else None,
                'avg_rating': float(row['avg_rating']) if row['avg_rating'] else None,
                'review_count': int(row['review_count']) if row['review_count'] else None,
                'host_name': row['host_name'] or None,
                'host_rating': float(row['host_rating']) if row['host_rating'] else None,
                'host_review_count': int(row['host_review_count']) if row['host_review_count'] else None,
                'instant_bookable': True if row['instant_bookable'].lower() == 'true' else False,
                'superhost': True if row['superhost'].lower() == 'true' else False,
                'is_active': True if row['is_active'].lower() == 'true' else False
            }
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—è created_at, updated_at, last_scraped_at
            # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–∏ —Å None (–∫—Ä–æ–º–µ NOT NULL)
            data = {k: v for k, v in data.items() if v is not None or k in [
                'property_id','address','latitude','longitude','city','district','property_type','bedrooms','bathrooms','max_guests','price_per_night','price_currency','source']}
            
            result = make_supabase_request(
                'short_term_rentals',
                method='POST',
                data=data,
                upsert=True
            )
            
            if result is None:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–∏ {row['property_id']}")
            else:
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–ø–∏—Å—å {row['property_id']}")
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

def load_long_term_rentals():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã"""
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã...")
    
    with open('test_data_long_term_rentals.csv', 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        
        for row in reader:
            data = {
                'property_id': row['property_id'],
                'address': row['address'],
                'latitude': float(row['latitude']),
                'longitude': float(row['longitude']),
                'city': row['city'],
                'district': row['district'],
                'property_type': row['property_type'],
                'bedrooms': int(row['bedrooms']),
                'bathrooms': int(row['bathrooms']),
                'floor_area_sqm': float(row['floor_area_sqm']),
                'land_area_sqm': float(row['land_area_sqm']),
                'amenities': [a.strip() for a in row['amenities'].split(',')] if row['amenities'] else [],
                'description': row['description'],
                'photos': [p.strip() for p in row['photos'].split(',')] if row['photos'] else [],
                'source': row['source'],
                'source_url': row['source_url'],
                'source_id': row['source_id'],
                'monthly_rent': float(row['monthly_rent']),
                'rent_currency': row['rent_currency'],
                'deposit_amount': float(row['deposit_amount']),
                'deposit_currency': row['deposit_currency'],
                'utilities_included': row['utilities_included'] == 'true',
                'pet_friendly': row['pet_friendly'] == 'true',
                'furnished': row['furnished'] == 'true',
                'available_from': row['available_from'],
                'lease_term_months': int(row['lease_term_months']),
                'agent_name': row['agent_name'],
                'agent_rating': float(row['agent_rating']),
                'agent_review_count': int(row['agent_review_count']),
                'is_active': row['is_active'] == 'true'
            }
            
            result = make_supabase_request(
                'long_term_rentals',
                method='POST',
                data=data,
                upsert=True
            )
            
            if result is None:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–∏ {row['property_id']}")
            else:
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–ø–∏—Å—å {row['property_id']}")
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

def load_property_sales():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...")
    
    with open('test_data_property_sales.csv', 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        
        for row in reader:
            data = {
                'property_id': row['property_id'],
                'address': row['address'],
                'latitude': float(row['latitude']),
                'longitude': float(row['longitude']),
                'city': row['city'],
                'district': row['district'],
                'property_type': row['property_type'],
                'bedrooms': int(row['bedrooms']),
                'bathrooms': int(row['bathrooms']),
                'floor_area_sqm': float(row['floor_area_sqm']),
                'land_area_sqm': float(row['land_area_sqm']),
                'amenities': [a.strip() for a in row['amenities'].split(',')] if row['amenities'] else [],
                'description': row['description'],
                'photos': [p.strip() for p in row['photos'].split(',')] if row['photos'] else [],
                'source': row['source'],
                'source_url': row['source_url'],
                'source_id': row['source_id'],
                'asking_price': float(row['asking_price']),
                'price_currency': row['price_currency'],
                'price_per_sqm': float(row['price_per_sqm']),
                'property_age_years': int(row['property_age_years']),
                'construction_status': row['construction_status'],
                'ownership_type': row['ownership_type'],
                'agent_name': row['agent_name'],
                'agent_rating': float(row['agent_rating']),
                'agent_review_count': int(row['agent_review_count']),
                'is_active': row['is_active'] == 'true'
            }
            
            result = make_supabase_request(
                'property_sales',
                method='POST',
                data=data,
                upsert=True
            )
            
            if result is None:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–∏ {row['property_id']}")
            else:
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–ø–∏—Å—å {row['property_id']}")
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

def load_historical_prices():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω"""
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω...")
    
    with open('test_data_historical_prices.csv', 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        
        for row in reader:
            data = {
                'property_id': row['property_id'],
                'date': row['date'],
                'price': float(row['price']),
                'price_currency': row['price_currency'],
                'price_type': row['price_type'],
                'source': row['source']
            }
            
            result = make_supabase_request(
                'historical_prices',
                method='POST',
                data=data,
                upsert=True
            )
            
            if result is None:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–∏ {row['property_id']} - {row['date']}")
            else:
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–ø–∏—Å—å {row['property_id']} - {row['date']}")
    
    print("‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

def load_market_statistics():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    with open('test_data_market_statistics.csv', 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        
        for row in reader:
            data = {
                'district': row['district'],
                'date': row['date'],
                'avg_sale_price_per_sqm': float(row['avg_sale_price_per_sqm']),
                'avg_rent_price_per_month': float(row['avg_rent_price_per_month']),
                'avg_short_term_price_per_night': float(row['avg_short_term_price_per_night']),
                'property_count': int(row['property_count']),
                'avg_property_age': float(row['avg_property_age']),
                'avg_bedrooms': float(row['avg_bedrooms']),
                'avg_bathrooms': float(row['avg_bathrooms']),
                'avg_floor_area': float(row['avg_floor_area']),
                'avg_land_area': float(row['avg_land_area']),
                'price_change_1y': float(row['price_change_1y']),
                'price_change_3y': float(row['price_change_3y']),
                'price_change_5y': float(row['price_change_5y']),
                'rent_yield_avg': float(row['rent_yield_avg']),
                'occupancy_rate_short_term': float(row['occupancy_rate_short_term']),
                'days_on_market_avg': float(row['days_on_market_avg'])
            }
            
            result = make_supabase_request(
                'market_statistics',
                method='POST',
                data=data,
                upsert=True
            )
            
            if result is None:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–∏ {row['district']} - {row['date']}")
            else:
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–ø–∏—Å—å {row['district']} - {row['date']}")
    
    print("‚úÖ –†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

def get_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    
    tables = ['short_term_rentals', 'long_term_rentals', 'property_sales', 'historical_prices', 'market_statistics']
    
    for table in tables:
        result = make_supabase_request(f'{table}?select=count')
        if result:
            count = len(result) if isinstance(result, list) else 0
            print(f"  - {table}: {count} –∑–∞–ø–∏—Å–µ–π")
        else:
            print(f"  - {table}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

def clear_supabase_tables():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    tables = [
        'short_term_rentals',
        'long_term_rentals',
        'property_sales',
        'historical_prices',
        'market_statistics'
    ]
    print("üßπ –û—á–∏—â–∞—é –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã...")
    for table in tables:
        result = make_supabase_request(table, method='DELETE')
        if result is not None:
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} –æ—á–∏—â–µ–Ω–∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table}")


def main():
    check_supabase_config()
    clear_supabase_tables()
    print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Supabase...")
    load_short_term_rentals()
    load_long_term_rentals()
    load_property_sales()
    load_historical_prices()
    load_market_statistics()
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    get_statistics()

if __name__ == "__main__":
    main() 