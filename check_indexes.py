#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã
"""

import os
import logging
from supabase import create_client, Client
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_supabase_client():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase"""
    load_dotenv()
    
    url = os.getenv('SUPABASE_URL')
    key = os.getenv('SUPABASE_KEY')
    
    if not url or not key:
        raise ValueError("SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
    
    return create_client(url, key)

def check_table_exists(supabase: Client, table_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        result = supabase.table(table_name).select('*').limit(1).execute()
        return True
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
        return False

def check_indexes_for_table(supabase: Client, table_name: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ pg_indexes
        query = f"""
        SELECT 
            indexname,
            indexdef
        FROM pg_indexes 
        WHERE tablename = '{table_name}' 
        ORDER BY indexname;
        """
        
        result = supabase.rpc('exec_sql', {'sql_query': query}).execute()
        
        if result.data:
            logger.info(f"üìã –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}:")
            for index in result.data:
                logger.info(f"  - {index['indexname']}")
                logger.debug(f"    {index['indexdef']}")
        else:
            logger.warning(f"‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è {table_name}: {e}")

def check_table_structure(supabase: Client, table_name: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        query = f"""
        SELECT 
            column_name,
            data_type,
            is_nullable
        FROM information_schema.columns 
        WHERE table_name = '{table_name}' 
        ORDER BY ordinal_position;
        """
        
        result = supabase.rpc('exec_sql', {'sql_query': query}).execute()
        
        if result.data:
            logger.info(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}:")
            for column in result.data:
                nullable = "NULL" if column['is_nullable'] == 'YES' else "NOT NULL"
                logger.info(f"  - {column['column_name']}: {column['data_type']} {nullable}")
        else:
            logger.warning(f"‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã {table_name}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
        supabase = create_supabase_client()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            result = supabase.table('users').select('id').limit(1).execute()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables_to_check = ['users', 'locations']
        
        for table_name in tables_to_check:
            logger.info(f"\n{'='*50}")
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
            logger.info(f"{'='*50}")
            
            if check_table_exists(supabase, table_name):
                check_table_structure(supabase, table_name)
                check_indexes_for_table(supabase, table_name)
            else:
                logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        logger.info(f"\n{'='*50}")
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"{'='*50}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
