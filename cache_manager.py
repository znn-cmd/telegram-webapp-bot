"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –≤ Redis
–£—Å–∫–æ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ 10-50 —Ä–∞–∑
"""

import redis
import json
import logging
from typing import Optional, List, Tuple, Any
from datetime import timedelta
import os
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

class CacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ in-memory –∫—ç—à–∞"""
        self.is_available = False
        self.redis_client = None
        self.memory_cache = {}  # Fallback –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        self.cache_ttl = {}     # TTL –¥–ª—è in-memory –∫—ç—à–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∫—ç—à
        cache_enabled = os.getenv('CACHE_ENABLED', 'true').lower() == 'true'
        if not cache_enabled:
            logger.info("‚ö†Ô∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ CACHE_ENABLED=false")
            return
            
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            redis_host = os.getenv('REDIS_HOST', 'localhost')
            redis_port = int(os.getenv('REDIS_PORT', 6379))
            redis_db = int(os.getenv('REDIS_DB', 0))
            redis_password = os.getenv('REDIS_PASSWORD', None)
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis
            self.redis_client = redis.Redis(
                host=redis_host,
                port=redis_port,
                db=redis_db,
                password=redis_password,
                decode_responses=True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ UTF-8
                socket_connect_timeout=5,  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                socket_timeout=5,  # –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
                retry_on_timeout=True,  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
                health_check_interval=30  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            self.redis_client.ping()
            logger.info("‚úÖ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            self.is_available = True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory –∫—ç—à.")
            self.redis_client = None
            self.is_available = False
    
    def _get_cache_key(self, prefix: str, *args) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞"""
        key_parts = [prefix] + [str(arg) for arg in args if arg is not None]
        return ":".join(key_parts)
    
    def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞"""
        if self.redis_client and self.is_available:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis
            try:
                cached_data = self.redis_client.get(key)
                if cached_data:
                    logger.debug(f"üéØ Redis –∫—ç—à HIT –¥–ª—è –∫–ª—é—á–∞: {key}")
                    return json.loads(cached_data)
                else:
                    logger.debug(f"‚ùå Redis –∫—ç—à MISS –¥–ª—è –∫–ª—é—á–∞: {key}")
                    return None
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ Redis –∫—ç—à–∞ {key}: {e}")
                return None
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory –∫—ç—à
            return self._get_from_memory_cache(key)
    
    def set(self, key: str, data: Any, ttl_seconds: int = 3600) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à —Å TTL"""
        if self.redis_client and self.is_available:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis
            try:
                serialized_data = json.dumps(data, ensure_ascii=False)
                result = self.redis_client.setex(key, ttl_seconds, serialized_data)
                if result:
                    logger.debug(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Redis –∫—ç—à: {key} (TTL: {ttl_seconds}s)")
                return result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis –∫—ç—à {key}: {e}")
                # Fallback –∫ memory –∫—ç—à—É
                return self._set_to_memory_cache(key, data, ttl_seconds)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory –∫—ç—à
            return self._set_to_memory_cache(key, data, ttl_seconds)
    
    def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞"""
        if not self.is_available:
            return False
            
        try:
            result = self.redis_client.delete(key)
            if result:
                logger.debug(f"üóëÔ∏è –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫—ç—à–∞: {key}")
            return bool(result)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ {key}: {e}")
            return False
    
    def clear_pattern(self, pattern: str) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É"""
        if not self.is_available:
            return 0
            
        try:
            keys = self.redis_client.keys(pattern)
            if keys:
                deleted_count = self.redis_client.delete(*keys)
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} –∫–ª—é—á–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
                return deleted_count
            return 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É {pattern}: {e}")
            return 0
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    
    def get_countries(self) -> Optional[List[Tuple[int, str]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω –∏–∑ –∫—ç—à–∞"""
        key = self._get_cache_key("locations", "countries")
        return self.get(key)
    
    def set_countries(self, countries: List[Tuple[int, str]], ttl_hours: int = 24) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω –≤ –∫—ç—à"""
        key = self._get_cache_key("locations", "countries")
        return self.set(key, countries, ttl_hours * 3600)
    
    def get_cities(self, country_id: int) -> Optional[List[Tuple[int, str]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ country_id –∏–∑ –∫—ç—à–∞"""
        key = self._get_cache_key("locations", "cities", country_id)
        return self.get(key)
    
    def set_cities(self, country_id: int, cities: List[Tuple[int, str]], ttl_hours: int = 24) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –≤ –∫—ç—à"""
        key = self._get_cache_key("locations", "cities", country_id)
        return self.set(key, cities, ttl_hours * 3600)
    
    def get_counties(self, city_id: int) -> Optional[List[Tuple[int, str]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π –ø–æ city_id –∏–∑ –∫—ç—à–∞"""
        key = self._get_cache_key("locations", "counties", city_id)
        return self.get(key)
    
    def set_counties(self, city_id: int, counties: List[Tuple[int, str]], ttl_hours: int = 24) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π –≤ –∫—ç—à"""
        key = self._get_cache_key("locations", "counties", city_id)
        return self.set(key, counties, ttl_hours * 3600)
    
    def get_districts(self, county_id: int) -> Optional[List[Tuple[int, str]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–æ–≤ –ø–æ county_id –∏–∑ –∫—ç—à–∞"""
        key = self._get_cache_key("locations", "districts", county_id)
        return self.get(key)
    
    def set_districts(self, county_id: int, districts: List[Tuple[int, str]], ttl_hours: int = 24) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–æ–≤ –≤ –∫—ç—à"""
        key = self._get_cache_key("locations", "districts", county_id)
        return self.set(key, districts, ttl_hours * 3600)
    
    def clear_locations_cache(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return self.clear_pattern("locations:*")
    
    def get_cache_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        if not self.is_available:
            return {"status": "unavailable", "message": "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
        
        try:
            info = self.redis_client.info()
            return {
                "status": "available",
                "used_memory": info.get("used_memory_human", "unknown"),
                "connected_clients": info.get("connected_clients", 0),
                "total_commands_processed": info.get("total_commands_processed", 0),
                "keyspace_hits": info.get("keyspace_hits", 0),
                "keyspace_misses": info.get("keyspace_misses", 0),
                "hit_rate": self._calculate_hit_rate(info)
            }
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def _calculate_hit_rate(self, info: dict) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à"""
        hits = info.get("keyspace_hits", 0)
        misses = info.get("keyspace_misses", 0)
        total = hits + misses
        
        if total == 0:
            return 0.0
        
        return round((hits / total) * 100, 2)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è in-memory –∫—ç—à–∞
    def _get_from_memory_cache(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ in-memory –∫—ç—à–∞"""
        import time
        
        if key in self.memory_cache:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
            if key in self.cache_ttl:
                if time.time() < self.cache_ttl[key]:
                    logger.debug(f"üéØ Memory –∫—ç—à HIT –¥–ª—è –∫–ª—é—á–∞: {key}")
                    return self.memory_cache[key]
                else:
                    # –ö–ª—é—á –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º
                    del self.memory_cache[key]
                    del self.cache_ttl[key]
                    logger.debug(f"‚è∞ Memory –∫—ç—à –∏—Å—Ç–µ–∫ –¥–ª—è –∫–ª—é—á–∞: {key}")
            else:
                logger.debug(f"üéØ Memory –∫—ç—à HIT –¥–ª—è –∫–ª—é—á–∞: {key}")
                return self.memory_cache[key]
        
        logger.debug(f"‚ùå Memory –∫—ç—à MISS –¥–ª—è –∫–ª—é—á–∞: {key}")
        return None
    
    def _set_to_memory_cache(self, key: str, data: Any, ttl_seconds: int) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ in-memory –∫—ç—à"""
        import time
        
        try:
            self.memory_cache[key] = data
            self.cache_ttl[key] = time.time() + ttl_seconds
            logger.debug(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ memory –∫—ç—à: {key} (TTL: {ttl_seconds}s)")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ memory –∫—ç—à {key}: {e}")
            return False
    
    def _clean_expired_memory_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π –∏–∑ memory –∫—ç—à–∞"""
        import time
        
        current_time = time.time()
        expired_keys = [key for key, expiry in self.cache_ttl.items() if current_time >= expiry]
        
        for key in expired_keys:
            if key in self.memory_cache:
                del self.memory_cache[key]
            if key in self.cache_ttl:
                del self.cache_ttl[key]
        
        if expired_keys:
            logger.debug(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_keys)} –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π –∏–∑ memory –∫—ç—à–∞")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞
cache_manager = CacheManager()
