#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ i18n-manager.js
"""

import re
import os

def extract_translation_keys():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ HTML —Ñ–∞–π–ª–æ–≤"""
    keys = set()
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö data-i18n –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    html_files = [f for f in os.listdir('.') if f.endswith('.html')]
    
    for html_file in html_files:
        try:
            with open(html_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ data-i18n –∞—Ç—Ä–∏–±—É—Ç—ã
            matches = re.findall(r'data-i18n="([^"]+)"', content)
            keys.update(matches)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {html_file}: {e}")
    
    return sorted(list(keys))

def check_translation_exists(key, content):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–ª—é—á–∞"""
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–ª—é—á –Ω–∞ —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'main.title' -> ['main', 'title'])
    parts = key.split('.')
    
    # –ò—â–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
    languages = ['ru', 'en', 'de', 'fr', 'tr']
    
    for lang in languages:
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —è–∑—ã–∫–∞
        lang_pattern = rf"'{lang}': \{{([^}}]*)\}}"
        lang_match = re.search(lang_pattern, content, re.DOTALL)
        
        if lang_match:
            lang_content = lang_match.group(1)
            
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if len(parts) >= 2:
                category = parts[0]
                subkey = parts[1]
                
                # –ò—â–µ–º —Å–µ–∫—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_pattern = rf"'{category}': \{{([^}}]*)\}}"
                category_match = re.search(category_pattern, lang_content, re.DOTALL)
                
                if category_match:
                    category_content = category_match.group(1)
                    
                    # –ò—â–µ–º –∫–ª—é—á –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    key_pattern = rf"'{subkey}': '[^']*'"
                    if re.search(key_pattern, category_content):
                        return True
    
    return False

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ i18n-manager.js...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ HTML
    all_keys = extract_translation_keys()
    
    # –ß–∏—Ç–∞–µ–º i18n-manager.js
    try:
        with open('i18n-manager.js', 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è i18n-manager.js: {e}")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_keys)} –∫–ª—é—á–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ HTML —Ñ–∞–π–ª–∞—Ö")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á
    missing_keys = []
    existing_keys = []
    
    for key in all_keys:
        if check_translation_exists(key, content):
            existing_keys.append(key)
        else:
            missing_keys.append(key)
    
    print(f"‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {len(existing_keys)} –∫–ª—é—á–µ–π")
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing_keys)} –∫–ª—é—á–µ–π")
    
    if missing_keys:
        print("\nüìù –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏:")
        for key in missing_keys:
            print(f"  - {key}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    screenshot_keys = [
        'main.title',
        'reports.region_analytics', 
        'reports.property_evaluation',
        'reports.title',
        'profile.title',
        'common.help'
    ]
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:")
    for key in screenshot_keys:
        exists = check_translation_exists(key, content)
        status = "‚úÖ" if exists else "‚ùå"
        print(f"  {status} {key}")

if __name__ == "__main__":
    main()
